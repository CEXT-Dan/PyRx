import PyRx
import PyGe
import PyGi
import PyGs
import PyDb
import PyAp
import PyEd

class ACIcolorMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kACIbyBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIbyLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIclear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIforeground (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIfrozenLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACImaximum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIminimum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACInone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIstandard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class AbstractViewTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (AbstractViewTable)arg1, (AbstractViewTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbAbstractViewTable {lvalue},class PyDbAbstractViewTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AbstractViewTable :
      '''cast( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AbstractViewTable :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class AbstractViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AbstractViewTableRecord :
      '''cast( (RxObject)arg1) -> AbstractViewTableRecord :

    C++ signature :
        class PyDbAbstractViewTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AbstractViewTableRecord :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTableRecord :

    C++ signature :
        class PyDbAbstractViewTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self, *args, **kwargs)-> None :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> None :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> None :
      '''setBackground( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBackground(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> None :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setSun (self, *args, **kwargs)-> None :
      '''setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> None :

    C++ signature :
        void setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> None :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> None :

    C++ signature :
        void setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> None :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class AdsName:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def fromObjectId (self, *args, **kwargs)-> None :
      '''fromObjectId( (AdsName)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void fromObjectId(class AdsName {lvalue},class PyDbObjectId)'''
    ...
    def toObjectId (self, *args, **kwargs)-> ObjectId :
      '''toObjectId( (AdsName)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId toObjectId(class AdsName {lvalue})'''
    ...

class AlignedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AlignedDimension :
      '''cast( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AlignedDimension :
      '''cloneFrom( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs)-> Point3d :
      '''dimLinePoint( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbAlignedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (AlignedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbAlignedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> Point3d :
      '''jogSymbolPosition( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbAlignedDimension {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (AlignedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbAlignedDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> None :
      '''setDimLinePoint( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimLinePoint(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> None :
      '''setJogSymbolOn( (AlignedDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setJogSymbolOn(class PyDbAlignedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> None :
      '''setJogSymbolPosition( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogSymbolPosition(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (AlignedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbAlignedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbAlignedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbAlignedDimension {lvalue})'''
    ...

class AnnoType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockRef (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFcf (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoAnno (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class AnnotationScale:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def collectionName (self, *args, **kwargs)-> str :
      '''collectionName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > collectionName(class PyDbObjectContext {lvalue})'''
    ...
    def copyFrom (self, *args, **kwargs)-> None :
      '''copyFrom( (AnnotationScale)arg1, (RxObject)arg2) -> None :

    C++ signature :
        void copyFrom(class PyDbAnnotationScale {lvalue},class PyRxObject)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getDrawingUnits (self, *args, **kwargs)-> float :
      '''getDrawingUnits( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getDrawingUnits(class PyDbAnnotationScale {lvalue})'''
    ...
    def getIsTemporaryScale (self, *args, **kwargs)-> bool :
      '''getIsTemporaryScale( (AnnotationScale)arg1) -> bool :

    C++ signature :
        bool getIsTemporaryScale(class PyDbAnnotationScale {lvalue})'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbObjectContext {lvalue})'''
    ...
    def getPaperUnits (self, *args, **kwargs)-> float :
      '''getPaperUnits( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getPaperUnits(class PyDbAnnotationScale {lvalue})'''
    ...
    def getScale (self, *args, **kwargs)-> float :
      '''getScale( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getScale(class PyDbAnnotationScale {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def matchScaleId (self, *args, **kwargs)-> bool :
      '''matchScaleId( (AnnotationScale)arg1, (int)arg2) -> bool :

    C++ signature :
        bool matchScaleId(class PyDbAnnotationScale {lvalue},__int64)'''
    ...
    def setDrawingUnits (self, *args, **kwargs)-> None :
      '''setDrawingUnits( (AnnotationScale)arg1, (float)arg2) -> None :

    C++ signature :
        void setDrawingUnits(class PyDbAnnotationScale {lvalue},double)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (ObjectContext)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbObjectContext {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPaperUnits (self, *args, **kwargs)-> None :
      '''setPaperUnits( (AnnotationScale)arg1, (float)arg2) -> None :

    C++ signature :
        void setPaperUnits(class PyDbAnnotationScale {lvalue},double)'''
    ...
    def uniqueIdentifier (self, *args, **kwargs)-> int :
      '''uniqueIdentifier( (ObjectContext)arg1) -> int :

    C++ signature :
        __int64 uniqueIdentifier(class PyDbObjectContext {lvalue})'''
    ...

class Arc:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double,double,double)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Arc :
      '''cast( (RxObject)arg1) -> Arc :

    C++ signature :
        class PyDbArc cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (Arc)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbArc {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Arc :
      '''cloneFrom( (RxObject)arg1) -> Arc :

    C++ signature :
        class PyDbArc cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (Arc)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbArc {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Arc)arg1) -> float :

    C++ signature :
        double length(class PyDbArc {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Arc)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbArc {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def radius (self, *args, **kwargs)-> float :
      '''radius( (Arc)arg1) -> float :

    C++ signature :
        double radius(class PyDbArc {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (Arc)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbArc {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndAngle (self, *args, **kwargs)-> None :
      '''setEndAngle( (Arc)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndAngle(class PyDbArc {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Arc)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbArc {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs)-> None :
      '''setRadius( (Arc)arg1, (float)arg2) -> None :

    C++ signature :
        void setRadius(class PyDbArc {lvalue},double)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartAngle (self, *args, **kwargs)-> None :
      '''setStartAngle( (Arc)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartAngle(class PyDbArc {lvalue},double)'''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Arc)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbArc {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (Arc)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbArc {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Arc)arg1) -> float :

    C++ signature :
        double thickness(class PyDbArc {lvalue})'''
    ...
    def totalAngle (self, *args, **kwargs)-> float :
      '''totalAngle( (Arc)arg1) -> float :

    C++ signature :
        double totalAngle(class PyDbArc {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ArcDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcEndParam (self, *args, **kwargs)-> float :
      '''arcEndParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcEndParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDbArcDimension {lvalue})'''
    ...
    def arcStartParam (self, *args, **kwargs)-> float :
      '''arcStartParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcStartParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcSymbolType (self, *args, **kwargs)-> int :
      '''arcSymbolType( (ArcDimension)arg1) -> int :

    C++ signature :
        int arcSymbolType(class PyDbArcDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ArcDimension :
      '''cast( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbArcDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ArcDimension :
      '''cloneFrom( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasLeader (self, *args, **kwargs)-> bool :
      '''hasLeader( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool hasLeader(class PyDbArcDimension {lvalue})'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPartial (self, *args, **kwargs)-> bool :
      '''isPartial( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool isPartial(class PyDbArcDimension {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def leader1Point (self, *args, **kwargs)-> Point3d :
      '''leader1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader1Point(class PyDbArcDimension {lvalue})'''
    ...
    def leader2Point (self, *args, **kwargs)-> Point3d :
      '''leader2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader2Point(class PyDbArcDimension {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcEndParam (self, *args, **kwargs)-> None :
      '''setArcEndParam( (ArcDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setArcEndParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArcStartParam (self, *args, **kwargs)-> None :
      '''setArcStartParam( (ArcDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setArcStartParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcSymbolType (self, *args, **kwargs)-> None :
      '''setArcSymbolType( (ArcDimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setArcSymbolType(class PyDbArcDimension {lvalue},int)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHasLeader (self, *args, **kwargs)-> None :
      '''setHasLeader( (ArcDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasLeader(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIsPartial (self, *args, **kwargs)-> None :
      '''setIsPartial( (ArcDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPartial(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLeader1Point (self, *args, **kwargs)-> None :
      '''setLeader1Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeader1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLeader2Point (self, *args, **kwargs)-> None :
      '''setLeader2Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeader2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbArcDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbArcDimension {lvalue})'''
    ...

class AttributeDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> None :
      '''adjustAlignment( (AttributeDefinition)arg1, (Database)arg2) -> None :

    C++ signature :
        void adjustAlignment(class PyDbAttributeDefinition {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AttributeDefinition :
      '''cast( (RxObject)arg1) -> AttributeDefinition :

    C++ signature :
        class PyDbAttributeDefinition cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AttributeDefinition :
      '''cloneFrom( (RxObject)arg1) -> AttributeDefinition :

    C++ signature :
        class PyDbAttributeDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def convertFieldToText (self, *args, **kwargs)-> None :
      '''convertFieldToText( (Text)arg1) -> None :

    C++ signature :
        void convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttributeDefinition (self, *args, **kwargs)-> None :
      '''convertIntoMTextAttributeDefinition( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void convertIntoMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldLength (self, *args, **kwargs)-> int :
      '''fieldLength( (AttributeDefinition)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getMTextAttributeDefinition (self, *args, **kwargs)-> MText :
      '''getMTextAttributeDefinition( (AttributeDefinition)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self, *args, **kwargs)-> bool :
      '''isConstant( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self, *args, **kwargs)-> bool :
      '''isInvisible( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMTextAttributeDefinition (self, *args, **kwargs)-> bool :
      '''isMTextAttributeDefinition( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isPreset (self, *args, **kwargs)-> bool :
      '''isPreset( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self, *args, **kwargs)-> bool :
      '''isVerifiable( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self, *args, **kwargs)-> bool :
      '''lockPositionInBlock( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttributeDefinition {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, *args, **kwargs)-> None :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> None :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def prompt (self, *args, **kwargs)-> str :
      '''prompt( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prompt(class PyDbAttributeDefinition {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> None :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstant (self, *args, **kwargs)-> None :
      '''setConstant( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstant(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldLength (self, *args, **kwargs)-> None :
      '''setFieldLength( (AttributeDefinition)arg1, (int)arg2) -> None :

    C++ signature :
        void setFieldLength(class PyDbAttributeDefinition {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> None :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs)-> None :
      '''setInvisible( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInvisible(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setJustification (self, *args, **kwargs)-> None :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> None :

    C++ signature :
        void setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self, *args, **kwargs)-> None :
      '''setLockPositionInBlock( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLockPositionInBlock(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setMTextAttributeDefinition (self, *args, **kwargs)-> None :
      '''setMTextAttributeDefinition( (AttributeDefinition)arg1, (MText)arg2) -> None :

    C++ signature :
        void setMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPreset (self, *args, **kwargs)-> None :
      '''setPreset( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPreset(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setPrompt (self, *args, **kwargs)-> None :
      '''setPrompt( (AttributeDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrompt(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs)-> None :
      '''setTag( (AttributeDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setTag(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs)-> None :
      '''setTextString( (Text)arg1, (str)arg2) -> None :

    C++ signature :
        void setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerifiable (self, *args, **kwargs)-> None :
      '''setVerifiable( (AttributeDefinition)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVerifiable(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> None :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, *args, **kwargs)-> None :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self, *args, **kwargs)-> str :
      '''tag( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttributeDefinition {lvalue})'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttributeDefinition (self, *args, **kwargs)-> None :
      '''updateMTextAttributeDefinition( (AttributeDefinition)arg1) -> None :

    C++ signature :
        void updateMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class AttributeReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> None :
      '''adjustAlignment( (Text)arg1, (Database)arg2) -> None :

    C++ signature :
        void adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AttributeReference :
      '''cast( (RxObject)arg1) -> AttributeReference :

    C++ signature :
        class PyDbAttribute cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AttributeReference :
      '''cloneFrom( (RxObject)arg1) -> AttributeReference :

    C++ signature :
        class PyDbAttribute cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def convertFieldToText (self, *args, **kwargs)-> None :
      '''convertFieldToText( (Text)arg1) -> None :

    C++ signature :
        void convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttribute (self, *args, **kwargs)-> None :
      '''convertIntoMTextAttribute( (AttributeReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void convertIntoMTextAttribute(class PyDbAttribute {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldLength (self, *args, **kwargs)-> int :
      '''fieldLength( (AttributeReference)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttribute {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getMTextAttribute (self, *args, **kwargs)-> MText :
      '''getMTextAttribute( (AttributeReference)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self, *args, **kwargs)-> bool :
      '''isConstant( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttribute {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self, *args, **kwargs)-> bool :
      '''isInvisible( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttribute {lvalue})'''
    ...
    def isMTextAttribute (self, *args, **kwargs)-> bool :
      '''isMTextAttribute( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isPreset (self, *args, **kwargs)-> bool :
      '''isPreset( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttribute {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyLocked (self, *args, **kwargs)-> bool :
      '''isReallyLocked( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isReallyLocked(class PyDbAttribute {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self, *args, **kwargs)-> bool :
      '''isVerifiable( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttribute {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self, *args, **kwargs)-> bool :
      '''lockPositionInBlock( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttribute {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, *args, **kwargs)-> None :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> None :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> None :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setAttributeFromBlock (self, *args, **kwargs)-> None :
      '''setAttributeFromBlock( (AttributeReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class AcGeMatrix3d)

setAttributeFromBlock( (AttributeReference)arg1, (AttributeDefinition)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class PyDbAttributeDefinition,class AcGeMatrix3d)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldLength (self, *args, **kwargs)-> None :
      '''setFieldLength( (AttributeReference)arg1, (int)arg2) -> None :

    C++ signature :
        void setFieldLength(class PyDbAttribute {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> None :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs)-> None :
      '''setInvisible( (AttributeReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInvisible(class PyDbAttribute {lvalue},bool)'''
    ...
    def setJustification (self, *args, **kwargs)-> None :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> None :

    C++ signature :
        void setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self, *args, **kwargs)-> None :
      '''setLockPositionInBlock( (AttributeReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLockPositionInBlock(class PyDbAttribute {lvalue},bool)'''
    ...
    def setMTextAttribute (self, *args, **kwargs)-> None :
      '''setMTextAttribute( (AttributeReference)arg1, (MText)arg2) -> None :

    C++ signature :
        void setMTextAttribute(class PyDbAttribute {lvalue},class PyDbMText {lvalue})'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs)-> None :
      '''setTag( (AttributeReference)arg1, (str)arg2) -> None :

    C++ signature :
        void setTag(class PyDbAttribute {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs)-> None :
      '''setTextString( (Text)arg1, (str)arg2) -> None :

    C++ signature :
        void setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> None :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, *args, **kwargs)-> None :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self, *args, **kwargs)-> str :
      '''tag( (AttributeReference)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttribute {lvalue})'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttribute (self, *args, **kwargs)-> None :
      '''updateMTextAttribute( (AttributeReference)arg1) -> None :

    C++ signature :
        void updateMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BlockBegin:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockBegin :
      '''cast( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockBegin :
      '''cloneFrom( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BlockEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockEnd :
      '''cast( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockEnd :
      '''cloneFrom( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BlockReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockReference :
      '''cast( (RxObject)arg1) -> BlockReference :

    C++ signature :
        class PyDbBlockReference cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockReference :
      '''cloneFrom( (RxObject)arg1) -> BlockReference :

    C++ signature :
        class PyDbBlockReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> None :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> None :

    C++ signature :
        void explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> None :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> None :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (BlockReference)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (BlockReference)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (BlockReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> None :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BlockScaling:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAny (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUniform (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class BlockTable:
    def __init__ (self: BlockTable,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def add (self: BlockTable,block : BlockTableRecord)-> ObjectId :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: PyRx.RxObject)-> BlockTable :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def cloneFrom (otherObject: PyRx.RxObject)-> BlockTable :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BlockTableRecord:
    def __init__ (self: BlockTableRecord,id: ObjectId=kNull,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addAnnoScalestoBlkRefs (self, *args, **kwargs)-> None :
      '''addAnnoScalestoBlkRefs( (BlockTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void addAnnoScalestoBlkRefs(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendAcDbEntity (self, *args, **kwargs)-> ObjectId :
      '''appendAcDbEntity( (BlockTableRecord)arg1, (Entity)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAcDbEntity(class PyDbBlockTableRecord {lvalue},class PyDbEntity)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assumeOwnershipOf (self, *args, **kwargs)-> None :
      '''assumeOwnershipOf( (BlockTableRecord)arg1, (list)arg2) -> None :

    C++ signature :
        void assumeOwnershipOf(class PyDbBlockTableRecord {lvalue},class boost::python::list)'''
    ...
    def blockInsertUnits (self, *args, **kwargs)-> UnitsValue :
      '''blockInsertUnits( (BlockTableRecord)arg1) -> UnitsValue :

    C++ signature :
        enum AcDb::UnitsValue blockInsertUnits(class PyDbBlockTableRecord {lvalue})'''
    ...
    def blockScaling (self, *args, **kwargs)-> BlockScaling :
      '''blockScaling( (BlockTableRecord)arg1) -> BlockScaling :

    C++ signature :
        enum AcDbBlockTableRecord::BlockScaling blockScaling(class PyDbBlockTableRecord {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockTableRecord :
      '''cast( (RxObject)arg1) -> BlockTableRecord :

    C++ signature :
        class PyDbBlockTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockTableRecord :
      '''cloneFrom( (RxObject)arg1) -> BlockTableRecord :

    C++ signature :
        class PyDbBlockTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def comments (self, *args, **kwargs)-> str :
      '''comments( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > comments(class PyDbBlockTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def explodable (self, *args, **kwargs)-> bool :
      '''explodable( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool explodable(class PyDbBlockTableRecord {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBlockReferenceIds (self, *args, **kwargs)-> list :
      '''getBlockReferenceIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list getBlockReferenceIds(class PyDbBlockTableRecord {lvalue})

getBlockReferenceIds( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> list :

    C++ signature :
        class boost::python::list getBlockReferenceIds(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def getErasedBlockReferenceIds (self, *args, **kwargs)-> list :
      '''getErasedBlockReferenceIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list getErasedBlockReferenceIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayoutId (self, *args, **kwargs)-> ObjectId :
      '''getLayoutId( (BlockTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayoutId(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAttributeDefinitions (self, *args, **kwargs)-> bool :
      '''hasAttributeDefinitions( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAttributeDefinitions(class PyDbBlockTableRecord {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAnonymous (self, *args, **kwargs)-> bool :
      '''isAnonymous( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isAnonymous(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFromExternalReference (self, *args, **kwargs)-> bool :
      '''isFromExternalReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromExternalReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isFromOverlayReference (self, *args, **kwargs)-> bool :
      '''isFromOverlayReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromOverlayReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isLayout (self, *args, **kwargs)-> bool :
      '''isLayout( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isLayout(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUnloaded (self, *args, **kwargs)-> bool :
      '''isUnloaded( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isUnloaded(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def objectIds (self, *args, **kwargs)-> list :
      '''objectIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list objectIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def openBlockBegin (self, *args, **kwargs)-> None :
      '''openBlockBegin( (BlockTableRecord)arg1, (BlockBegin)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openBlockBegin(class PyDbBlockTableRecord {lvalue},class PyDbBlockBegin {lvalue},enum AcDb::OpenMode)'''
    ...
    def openBlockEnd (self, *args, **kwargs)-> None :
      '''openBlockEnd( (BlockTableRecord)arg1, (BlockEnd)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openBlockEnd(class PyDbBlockTableRecord {lvalue},class PyDbBlockEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (BlockTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbBlockTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def pathName (self, *args, **kwargs)-> str :
      '''pathName( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > pathName(class PyDbBlockTableRecord {lvalue})'''
    ...
    def postProcessAnnotativeBTR (self, *args, **kwargs)-> int :
      '''postProcessAnnotativeBTR( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> int :

    C++ signature :
        int postProcessAnnotativeBTR(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockInsertUnits (self, *args, **kwargs)-> None :
      '''setBlockInsertUnits( (BlockTableRecord)arg1, (UnitsValue)arg2) -> None :

    C++ signature :
        void setBlockInsertUnits(class PyDbBlockTableRecord {lvalue},enum AcDb::UnitsValue)'''
    ...
    def setBlockScaling (self, *args, **kwargs)-> None :
      '''setBlockScaling( (BlockTableRecord)arg1, (BlockScaling)arg2) -> None :

    C++ signature :
        void setBlockScaling(class PyDbBlockTableRecord {lvalue},enum AcDbBlockTableRecord::BlockScaling)'''
    ...
    def setComments (self, *args, **kwargs)-> None :
      '''setComments( (BlockTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setComments(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setExplodable (self, *args, **kwargs)-> None :
      '''setExplodable( (BlockTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExplodable(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsFromOverlayReference (self, *args, **kwargs)-> None :
      '''setIsFromOverlayReference( (BlockTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsFromOverlayReference(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setIsUnloaded (self, *args, **kwargs)-> None :
      '''setIsUnloaded( (BlockTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsUnloaded(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setLayoutId (self, *args, **kwargs)-> None :
      '''setLayoutId( (BlockTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLayoutId(class PyDbBlockTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self, *args, **kwargs)-> None :
      '''setOrigin( (BlockTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOrigin(class PyDbBlockTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPathName (self, *args, **kwargs)-> None :
      '''setPathName( (BlockTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setPathName(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xrefDatabase (self, *args, **kwargs)-> Database :
      '''xrefDatabase( (BlockTableRecord)arg1, (bool)arg2) -> Database :

    C++ signature :
        class PyDbDatabase xrefDatabase(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def xrefStatus (self, *args, **kwargs)-> XrefStatus :
      '''xrefStatus( (BlockTableRecord)arg1) -> XrefStatus :

    C++ signature :
        enum AcDb::XrefStatus xrefStatus(class PyDbBlockTableRecord {lvalue})'''
    ...

class Body:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Body :
      '''cast( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Body :
      '''cloneFrom( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class BoolOperType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBoolIntersect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBoolSubtract (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBoolUnite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Cell:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def column (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def row (self, *args, **kwargs)-> None:
      '''None'''
    ...

class CellAlignment:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentLayout:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellContentLayoutStackedHorizontal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentLayoutStackedVertical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellContentTypeBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellEdgeMask:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellMargin:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellMarginBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginHorzSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginVertSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellProperty:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellPropAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropAutoScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropBackgroundColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropBitProperties (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContentColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContentLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataTypeAndFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropFlowDirBtoT (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginHorzSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginVertSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMergeAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropRotation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropTextHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropTextStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellRange:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def bottomRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def leftColumn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def rightColumn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def topRow (self, *args, **kwargs)-> None:
      '''None'''
    ...

class CellState:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllCellStates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentLocked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentReadOnly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatLocked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatReadOnly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateLinked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMultipleContentCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CenterMarkType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Circle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Circle :
      '''cast( (RxObject)arg1) -> Circle :

    C++ signature :
        class PyDbCircle cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (Circle)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbCircle {lvalue})'''
    ...
    def circumference (self, *args, **kwargs)-> float :
      '''circumference( (Circle)arg1) -> float :

    C++ signature :
        double circumference(class PyDbCircle {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Circle :
      '''cloneFrom( (RxObject)arg1) -> Circle :

    C++ signature :
        class PyDbCircle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def diameter (self, *args, **kwargs)-> float :
      '''diameter( (Circle)arg1) -> float :

    C++ signature :
        double diameter(class PyDbCircle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Circle)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbCircle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def radius (self, *args, **kwargs)-> float :
      '''radius( (Circle)arg1) -> float :

    C++ signature :
        double radius(class PyDbCircle {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (Circle)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbCircle {lvalue},class AcGePoint3d)'''
    ...
    def setCircumference (self, *args, **kwargs)-> None :
      '''setCircumference( (Circle)arg1, (float)arg2) -> None :

    C++ signature :
        void setCircumference(class PyDbCircle {lvalue},double)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDiameter (self, *args, **kwargs)-> None :
      '''setDiameter( (Circle)arg1, (float)arg2) -> None :

    C++ signature :
        void setDiameter(class PyDbCircle {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Circle)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbCircle {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs)-> None :
      '''setRadius( (Circle)arg1, (float)arg2) -> None :

    C++ signature :
        void setRadius(class PyDbCircle {lvalue},double)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Circle)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbCircle {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Circle)arg1) -> float :

    C++ signature :
        double thickness(class PyDbCircle {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ClipBoundaryType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CollisionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCollisionTypeNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCollisionTypeSolid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Color:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blue (self, *args, **kwargs)-> int :
      '''blue( (Color)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmColor {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Color)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class AcCmColor {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Color)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class AcCmColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs)-> int :
      '''getCOLORREF( (Color)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs)-> int :
      '''getRGB( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs)-> int :
      '''getRGBM( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmColor {lvalue})'''
    ...
    def green (self, *args, **kwargs)-> int :
      '''green( (Color)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs)-> bool :
      '''isByACI( (Color)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (Color)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs)-> bool :
      '''isByColor( (Color)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (Color)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs)-> bool :
      '''isByPen( (Color)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs)-> bool :
      '''isForeground( (Color)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs)-> bool :
      '''isNone( (Color)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmColor {lvalue})'''
    ...
    def penIndex (self, *args, **kwargs)-> int :
      '''penIndex( (Color)arg1) -> int :

    C++ signature :
        unsigned short penIndex(class AcCmColor {lvalue})'''
    ...
    def red (self, *args, **kwargs)-> int :
      '''red( (Color)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs)-> None :
      '''setByBlock( (Color)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs)-> None :
      '''setByLayer( (Color)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs)-> ErrorStatus :
      '''setCOLORREF( (Color)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmColor {lvalue},unsigned int)'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class AcCmColor {lvalue},unsigned short)'''
    ...
    def setForeground (self, *args, **kwargs)-> None :
      '''setForeground( (Color)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmColor {lvalue})'''
    ...
    def setLayerOff (self, *args, **kwargs)-> None :
      '''setLayerOff( (Color)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs)-> None :
      '''setNone( (Color)arg1) -> None :

    C++ signature :
        void setNone(class AcCmColor {lvalue})'''
    ...
    def setPenIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setPenIndex( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPenIndex(class AcCmColor {lvalue},unsigned short)'''
    ...
    def setRGB (self, *args, **kwargs)-> ErrorStatus :
      '''setRGB( (Color)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned int)

setRGB( (Color)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs)-> ErrorStatus :
      '''setRGBM( (Color)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmColor {lvalue},unsigned int)'''
    ...

class ColorMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kByACI (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByPen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForeground (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayerFrozen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayerOff (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Core:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def activeDatabaseArray (self, *args, **kwargs)-> list :
      '''activeDatabaseArray() -> list :

    C++ signature :
        class boost::python::list activeDatabaseArray()'''
    ...
    def angToF (self, *args, **kwargs)-> float :
      '''angToF( (str)arg1, (int)arg2) -> float :

    C++ signature :
        double angToF(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def angToS (self, *args, **kwargs)-> str :
      '''angToS( (float)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > angToS(double,int,int)'''
    ...
    def assignGelibCurveToAcDbCurve (self, *args, **kwargs)-> None :
      '''assignGelibCurveToAcDbCurve( (Curve3d)arg1, (Curve)arg2) -> None :

    C++ signature :
        void assignGelibCurveToAcDbCurve(class PyGeCurve3d,class PyDbCurve {lvalue})

assignGelibCurveToAcDbCurve( (Curve3d)arg1, (Curve)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void assignGelibCurveToAcDbCurve(class PyGeCurve3d,class PyDbCurve {lvalue},class AcGeVector3d {lvalue})

assignGelibCurveToAcDbCurve( (Curve3d)arg1, (Curve)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void assignGelibCurveToAcDbCurve(class PyGeCurve3d,class PyDbCurve {lvalue},class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def attachXref (self, *args, **kwargs)-> None :
      '''attachXref( (Database)arg1, (str)arg2, (str)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void attachXref(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue})'''
    ...
    def bindXrefs (self, *args, **kwargs)-> None :
      '''bindXrefs( (Database)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void bindXrefs(class PyDbDatabase {lvalue},class boost::python::list,bool)

bindXrefs( (Database)arg1, (list)arg2, (bool)arg3, (bool)arg4, (bool)arg5) -> None :

    C++ signature :
        void bindXrefs(class PyDbDatabase {lvalue},class boost::python::list,bool,bool,bool)'''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> None :
      '''clearSetupForLayouts( (int)arg1) -> None :

    C++ signature :
        void clearSetupForLayouts(unsigned __int64)'''
    ...
    def convertAcDbCurveToGelibCurve (self, *args, **kwargs)-> Curve3d :
      '''convertAcDbCurveToGelibCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d convertAcDbCurveToGelibCurve(class PyDbCurve)

convertAcDbCurveToGelibCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d convertAcDbCurveToGelibCurve(class PyDbCurve,class AcGeTol)'''
    ...
    def convertGelibCurveToAcDbCurve (self, *args, **kwargs)-> Curve :
      '''convertGelibCurveToAcDbCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve convertGelibCurveToAcDbCurve(class PyGeCurve3d)

convertGelibCurveToAcDbCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve convertGelibCurveToAcDbCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

convertGelibCurveToAcDbCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve convertGelibCurveToAcDbCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def createViewByViewport (self, *args, **kwargs)-> ObjectId :
      '''createViewByViewport( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> ObjectId :

    C++ signature :
        class PyDbObjectId createViewByViewport(class PyDbDatabase {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def detachXref (self, *args, **kwargs)-> None :
      '''detachXref( (Database)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void detachXref(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def dictAdd (self, *args, **kwargs)-> bool :
      '''dictAdd( (ObjectId)arg1, (str)arg2, (ObjectId)arg3) -> bool :

    C++ signature :
        bool dictAdd(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def dictNext (self, *args, **kwargs)-> list :
      '''dictNext( (ObjectId)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list dictNext(class PyDbObjectId,int)'''
    ...
    def dictRemove (self, *args, **kwargs)-> bool :
      '''dictRemove( (ObjectId)arg1, (str)arg2) -> bool :

    C++ signature :
        bool dictRemove(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dictRename (self, *args, **kwargs)-> bool :
      '''dictRename( (ObjectId)arg1, (str)arg2, (str)arg3) -> bool :

    C++ signature :
        bool dictRename(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dictSearch (self, *args, **kwargs)-> list :
      '''dictSearch( (ObjectId)arg1, (str)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list dictSearch(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def disToF (self, *args, **kwargs)-> float :
      '''disToF( (str)arg1, (int)arg2) -> float :

    C++ signature :
        double disToF(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def displayPreviewFromDwg (self, *args, **kwargs)-> bool :
      '''displayPreviewFromDwg( (str)arg1, (int)arg2) -> bool :

    C++ signature :
        bool displayPreviewFromDwg(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned __int64)'''
    ...
    def doSetupForLayouts (self, *args, **kwargs)-> int :
      '''doSetupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 doSetupForLayouts(class PyDbDatabase {lvalue})'''
    ...
    def dwkFileExists (self, *args, **kwargs)-> bool :
      '''dwkFileExists( (str)arg1) -> bool :

    C++ signature :
        bool dwkFileExists(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dxfOutAs2000 (self, *args, **kwargs)-> None :
      '''dxfOutAs2000( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAs2000(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def dxfOutAs2004 (self, *args, **kwargs)-> None :
      '''dxfOutAs2004( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAs2004(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def dxfOutAsR12 (self, *args, **kwargs)-> None :
      '''dxfOutAsR12( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAsR12(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def ecs2Wcs (self, *args, **kwargs)-> bool :
      '''ecs2Wcs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

ecs2Wcs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def entDel (self, *args, **kwargs)-> bool :
      '''entDel( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entDel(class PyDbObjectId)'''
    ...
    def entGet (self, *args, **kwargs)-> list :
      '''entGet( (ObjectId)arg1) -> list :

    C++ signature :
        class boost::python::list entGet(class PyDbObjectId)'''
    ...
    def entLast (self, *args, **kwargs)-> ObjectId :
      '''entLast() -> ObjectId :

    C++ signature :
        class PyDbObjectId entLast()'''
    ...
    def entMake (self, *args, **kwargs)-> bool :
      '''entMake( (list)arg1) -> bool :

    C++ signature :
        bool entMake(class boost::python::list)'''
    ...
    def entMakeX (self, *args, **kwargs)-> ObjectId :
      '''entMakeX( (list)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId entMakeX(class boost::python::list)'''
    ...
    def entMod (self, *args, **kwargs)-> bool :
      '''entMod( (list)arg1) -> bool :

    C++ signature :
        bool entMod(class boost::python::list)'''
    ...
    def entNext (self, *args, **kwargs)-> ObjectId :
      '''entNext( (ObjectId)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId entNext(class PyDbObjectId)'''
    ...
    def entUpd (self, *args, **kwargs)-> bool :
      '''entUpd( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entUpd(class PyDbObjectId)'''
    ...
    def openDbEntity (self, *args, **kwargs)-> Entity :
      '''openDbEntity( (ObjectId)arg1, (OpenMode)arg2) -> Entity :

    C++ signature :
        class PyDbEntity openDbEntity(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def openDbObject (self, *args, **kwargs)-> DbObject :
      '''openDbObject( (ObjectId)arg1, (OpenMode)arg2) -> DbObject :

    C++ signature :
        class PyDbObject openDbObject(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def regApp (self, *args, **kwargs)-> bool :
      '''regApp( (str)arg1) -> bool :

    C++ signature :
        bool regApp(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def resbufTest (self, *args, **kwargs)-> list :
      '''resbufTest( (list)arg1) -> list :

    C++ signature :
        class boost::python::list resbufTest(class boost::python::list)'''
    ...
    def ucs2Ucs (self, *args, **kwargs)-> bool :
      '''ucs2Ucs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool ucs2Ucs(class AcGePoint3d,class AcGePoint3d {lvalue})

ucs2Ucs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool ucs2Ucs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def ucs2Wcs (self, *args, **kwargs)-> bool :
      '''ucs2Wcs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGePoint3d,class AcGePoint3d {lvalue})

ucs2Wcs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def updateDimension (self, *args, **kwargs)-> None :
      '''updateDimension( (ObjectId)arg1) -> None :

    C++ signature :
        void updateDimension(class PyDbObjectId)'''
    ...
    def wcs2Ecs (self, *args, **kwargs)-> bool :
      '''wcs2Ecs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

wcs2Ecs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...

class Curve:
    def __init__ (self: Curve,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Curve :
      '''cast( (RxObject)arg1) -> Curve :

    C++ signature :
        class PyDbCurve cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Curve :
      '''cloneFrom( (RxObject)arg1) -> Curve :

    C++ signature :
        class PyDbCurve cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Database:
    def UCSTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def __init__ (self: Database,buildDefaultDrawing : bool=True,noDocument: bool=False)-> None :
      '''                             '''
    ...
    def addObject (self: Database,object : DbObject)-> ObjectId :
      '''                             '''
    ...
    def angbase (self: Database)-> float :
      '''                             '''
    ...
    def angdir (self: Database)-> bool :
      '''                             '''
    ...
    def annoAllVisible (self: Database)-> bool :
      '''                             '''
    ...
    def annotativeDwg (self: Database)-> bool :
      '''                             '''
    ...
    def approxNumObjects (self: Database)-> int :
      '''                             '''
    ...
    def attmode (self: Database)-> int :
      '''                             '''
    ...
    def aunits (self: Database)-> int :
      '''                             '''
    ...
    def auprec (self: Database)-> int :
      '''                             '''
    ...
    def blipmode (self: Database)-> bool :
      '''                             '''
    ...
    def blockTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def byBlockLinetype (self: Database)-> ObjectId :
      '''                             '''
    ...
    def byBlockMaterial (self: Database)-> ObjectId :
      '''                             '''
    ...
    def byLayerLinetype (self: Database)-> ObjectId :
      '''                             '''
    ...
    def byLayerMaterial (self: Database)-> ObjectId :
      '''                             '''
    ...
    def cDynDisplayMode (self: Database)-> int :
      '''                             '''
    ...
    def cameraDisplay (self: Database)-> bool :
      '''                             '''
    ...
    def cameraHeight (self: Database)-> float :
      '''                             '''
    ...
    def celtscale (self: Database)-> float :
      '''                             '''
    ...
    def celtype (self: Database)-> ObjectId :
      '''                             '''
    ...
    def celweight (self: Database)-> LineWeight :
      '''                             '''
    ...
    def chamfera (self: Database)-> float :
      '''                             '''
    ...
    def chamferb (self: Database)-> float :
      '''                             '''
    ...
    def chamferc (self: Database)-> float :
      '''                             '''
    ...
    def chamferd (self: Database)-> float :
      '''                             '''
    ...
    def classDxfName (self: Database,pClass : PyRx.RxClass)-> str :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def clayer (self: Database)-> ObjectId :
      '''                             '''
    ...
    def closeInput (self: Database,close : bool)-> None :
      '''                             '''
    ...
    def cmaterial (self: Database)-> ObjectId :
      '''                             '''
    ...
    def cmljust (self: Database)-> int :
      '''                             '''
    ...
    def cmlscale (self: Database)-> float :
      '''                             '''
    ...
    def cmlstyleID (self: Database)-> ObjectId :
      '''                             '''
    ...
    def colorDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def continuousLinetype (self: Database)-> ObjectId :
      '''                             '''
    ...
    def coords (self: Database)-> int :
      '''                             '''
    ...
    def countEmptyObjects (self: Database,flag : int)-> int :
      '''                             '''
    ...
    def currentSpaceId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def detailViewStyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def detailViewStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimAssoc (self: Database)-> int :
      '''                             '''
    ...
    def dimStyleTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimapost (self: Database)-> str :
      '''                             '''
    ...
    def dimaso (self: Database)-> bool :
      '''                             '''
    ...
    def dimblk (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimblk1 (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimblk2 (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimfit (self: Database)-> int :
      '''                             '''
    ...
    def dimpost (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimsho (self: Database)-> bool :
      '''                             '''
    ...
    def dimstyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dimunit (self: Database)-> int :
      '''                             '''
    ...
    def disablePartialOpen (self: Database)-> None :
      '''                             '''
    ...
    def disableUndoRecording (self: Database,disable : bool)-> None :
      '''                             '''
    ...
    def dispSilh (self: Database)-> bool :
      '''                             '''
    ...
    def dragVisStyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def dragmode (self: Database)-> int :
      '''                             '''
    ...
    def drawOrderCtl (self: Database)-> int :
      '''                             '''
    ...
    def dwfframe (self: Database)-> int :
      '''                             '''
    ...
    def dwgFileWasSavedByAutodeskSoftware (self: Database)-> bool :
      '''                             '''
    ...
    def dxfIn (self: Database,filename : str)-> None :
      '''                             '''
    ...
    def dxfOut (self: Database,filename : str)-> None :
      '''                             '''
    ...
    def elevation (self: Database)-> float :
      '''                             '''
    ...
    def eraseEmptyObjects (self: Database,flag : int)-> int :
      '''                             '''
    ...
    def extmax (self: Database)-> Point3d :
      '''                             '''
    ...
    def extmin (self: Database)-> Point3d :
      '''                             '''
    ...
    def facetres (self: Database)-> float :
      '''                             '''
    ...
    def filletrad (self: Database)-> float :
      '''                             '''
    ...
    def fillmode (self: Database)-> bool :
      '''                             '''
    ...
    def forceWblockDatabaseCopy (self: Database)-> None :
      '''                             '''
    ...
    def geoCoordinateSystemId (self: Database)-> str :
      '''                             '''
    ...
    def geoMarkerVisibility (self: Database)-> bool :
      '''                             '''
    ...
    def get3dDwfPrec (self: Database)-> float :
      '''                             '''
    ...
    def getCePlotStyleNameId (self: Database)-> PlotStyleNameType :
      '''                             '''
    ...
    def getDimstyleParentId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def getFilename (self: Database)-> str :
      '''                             '''
    ...
    def getNearestLineWeight (weight : int)-> LineWeight :
      '''                             '''
    ...
    def getObjectId (self: Database,createIfNotFound : bool,objHandle : Handle,xRefId : int=0)-> ObjectId :
      '''                             '''
    ...
    def getViewportArray (self: Database)-> list :
      '''                             '''
    ...
    def getVisualStyleList (self: Database)-> list :
      '''                             '''
    ...
    def globalMaterial (self: Database)-> ObjectId :
      '''                             '''
    ...
    def groupDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def haloGap (self: Database)-> int :
      '''                             '''
    ...
    def handseed (self: Database)-> Handle :
      '''                             '''
    ...
    def hasClass (self: Database,pClass : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def hideText (self: Database)-> int :
      '''                             '''
    ...
    def hpInherit (self: Database)-> bool :
      '''                             '''
    ...
    def hpOrigin (self: Database)-> Point2d :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def insert (self, *args, **kwargs)-> None :
      '''insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (Database)arg4, (bool)arg5) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (Database)arg5, (bool)arg6) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (Matrix3d)arg2, (Database)arg3, (bool)arg4) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class AcGeMatrix3d,class PyDbDatabase {lvalue},bool)'''
    ...
    def insunits (self: Database)-> UnitsValue :
      '''                             '''
    ...
    def interfereVpVisStyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def intersectColor (self: Database)-> int :
      '''                             '''
    ...
    def intersectDisplay (self: Database)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isAppRegistered (self: Database,pszAppName : str)-> bool :
      '''                             '''
    ...
    def isBeingDestroyed (self: Database)-> bool :
      '''                             '''
    ...
    def isEMR (self: Database)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isObjectNonPersistent (id : ObjectId)-> bool :
      '''                             '''
    ...
    def isPartiallyOpened (self: Database)-> bool :
      '''                             '''
    ...
    def isPucsOrthographic (self: Database,orthoView : OrthographicView)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: Database,orthoView : OrthographicView)-> bool :
      '''                             '''
    ...
    def isValidLineWeight (weight : int)-> bool :
      '''                             '''
    ...
    def isolines (self: Database)-> int :
      '''                             '''
    ...
    def joinStyle (self: Database)-> JoinStyle :
      '''                             '''
    ...
    def lastSavedAsMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def lastSavedAsVersion (self: Database)-> int :
      '''                             '''
    ...
    def latitude (self: Database)-> float :
      '''                             '''
    ...
    def layerEval (self: Database)-> int :
      '''                             '''
    ...
    def layerNotify (self: Database)-> int :
      '''                             '''
    ...
    def layerTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def layerZero (self: Database)-> ObjectId :
      '''                             '''
    ...
    def layoutDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def lensLength (self: Database)-> float :
      '''                             '''
    ...
    def lightGlyphDisplay (self: Database)-> int :
      '''                             '''
    ...
    def lightingUnits (self: Database)-> int :
      '''                             '''
    ...
    def lightsInBlocks (self: Database)-> bool :
      '''                             '''
    ...
    def limcheck (self: Database)-> bool :
      '''                             '''
    ...
    def limmax (self: Database)-> Point2d :
      '''                             '''
    ...
    def limmin (self: Database)-> Point2d :
      '''                             '''
    ...
    def lineWeightDisplay (self: Database)-> bool :
      '''                             '''
    ...
    def linetypeTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def loadLineTypeFile (self: Database,ltn : str,filename : str)-> None :
      '''                             '''
    ...
    def loftAng1 (self: Database)-> float :
      '''                             '''
    ...
    def loftAng2 (self: Database)-> float :
      '''                             '''
    ...
    def loftMag1 (self: Database)-> float :
      '''                             '''
    ...
    def loftMag2 (self: Database)-> float :
      '''                             '''
    ...
    def loftNormals (self: Database)-> int :
      '''                             '''
    ...
    def loftParam (self: Database)-> int :
      '''                             '''
    ...
    def longitude (self: Database)-> float :
      '''                             '''
    ...
    def ltscale (self: Database)-> float :
      '''                             '''
    ...
    def lunits (self: Database)-> int :
      '''                             '''
    ...
    def luprec (self: Database)-> int :
      '''                             '''
    ...
    def mLStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def maintenanceReleaseVersion (self: Database)-> int :
      '''                             '''
    ...
    def markObjectNonPersistent (id : ObjectId,value : bool)-> None :
      '''                             '''
    ...
    def materialDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def maxactvp (self: Database)-> int :
      '''                             '''
    ...
    def measurement (self: Database)-> MeasurementValue :
      '''                             '''
    ...
    def mirrtext (self: Database)-> bool :
      '''                             '''
    ...
    def mleaderStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def mleaderscale (self: Database)-> float :
      '''                             '''
    ...
    def mleaderstyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def modelSpaceId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def msOleScale (self: Database)-> float :
      '''                             '''
    ...
    def msltscale (self: Database)-> bool :
      '''                             '''
    ...
    def namedObjectsDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def needsRecovery (self: Database)-> bool :
      '''                             '''
    ...
    def northDirection (self: Database)-> float :
      '''                             '''
    ...
    def numberOfSaves (self: Database)-> int :
      '''                             '''
    ...
    def obscuredColor (self: Database)-> int :
      '''                             '''
    ...
    def obscuredLineType (self: Database)-> int :
      '''                             '''
    ...
    def oleStartUp (self: Database)-> bool :
      '''                             '''
    ...
    def originalFileMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileName (self: Database)-> str :
      '''                             '''
    ...
    def originalFileSavedByMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileSavedByVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileVersion (self: Database)-> int :
      '''                             '''
    ...
    def orthomode (self: Database)-> bool :
      '''                             '''
    ...
    def paperSpaceVportId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def pdfframe (self: Database)-> int :
      '''                             '''
    ...
    def pdmode (self: Database)-> int :
      '''                             '''
    ...
    def pdsize (self: Database)-> float :
      '''                             '''
    ...
    def pextmax (self: Database)-> Point3d :
      '''                             '''
    ...
    def pextmin (self: Database)-> Point3d :
      '''                             '''
    ...
    def pickstyle (self: Database)-> int :
      '''                             '''
    ...
    def pinsbase (self: Database)-> Point3d :
      '''                             '''
    ...
    def plimcheck (self: Database)-> bool :
      '''                             '''
    ...
    def plimmax (self: Database)-> Point2d :
      '''                             '''
    ...
    def plimmin (self: Database)-> Point2d :
      '''                             '''
    ...
    def plineEllipse (self: Database)-> bool :
      '''                             '''
    ...
    def plinegen (self: Database)-> bool :
      '''                             '''
    ...
    def plinewid (self: Database)-> float :
      '''                             '''
    ...
    def plotSettingsDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def plotStyleMode (self: Database)-> bool :
      '''                             '''
    ...
    def plotStyleNameDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def previewType (self: Database)-> int :
      '''                             '''
    ...
    def psltscale (self: Database)-> bool :
      '''                             '''
    ...
    def psolHeight (self: Database)-> float :
      '''                             '''
    ...
    def psolWidth (self: Database)-> float :
      '''                             '''
    ...
    def pucsBase (self: Database)-> ObjectId :
      '''                             '''
    ...
    def pucsname (self: Database)-> ObjectId :
      '''                             '''
    ...
    def pucsorg (self: Database)-> Point3d :
      '''                             '''
    ...
    def pucsxdir (self: Database)-> Vector3d :
      '''                             '''
    ...
    def pucsydir (self: Database)-> Vector3d :
      '''                             '''
    ...
    def purge (self: Database)-> list :
      '''                             '''
    ...
    def qtextmode (self: Database)-> bool :
      '''                             '''
    ...
    def readDwgFile (self: Database,fileName : str,mode : int=kForReadAndReadShare,bAllowCPConversion : bool=False,password : str=empty)-> None :
      '''                             '''
    ...
    def reclaimMemoryFromErasedObjects (self: Database,ids : list[ObjectId])-> None :
      '''                             '''
    ...
    def regAppTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def regenmode (self: Database)-> bool :
      '''                             '''
    ...
    def registerApp (self: Database,appName : str)-> None :
      '''                             '''
    ...
    def resetTimes (self: Database)-> None :
      '''                             '''
    ...
    def restoreForwardingXrefSymbols (self: Database)-> None :
      '''                             '''
    ...
    def restoreOriginalXrefSymbols (self: Database)-> None :
      '''                             '''
    ...
    def retainOriginalThumbnailBitmap (self: Database)-> bool :
      '''                             '''
    ...
    def saveAs (self: Database,filename : str)-> None :
      '''                             '''
    ...
    def saveproxygraphics (self: Database)-> int :
      '''                             '''
    ...
    def scaleListDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def sectionViewStyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def sectionViewStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def set3dDwfPrec (self: Database,dwfPrec : float)-> None :
      '''                             '''
    ...
    def setAngbase (self: Database,angle : float)-> None :
      '''                             '''
    ...
    def setAngdir (self: Database,dir : bool)-> None :
      '''                             '''
    ...
    def setAnnoAllVisible (self: Database,allvis : bool)-> None :
      '''                             '''
    ...
    def setAttdia (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setAttmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setAttreq (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setAunits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setAuprec (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setBlipmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setCDynDisplayMode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCameraDisplay (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setCameraHeight (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCannoscale (self: Database,val : AnnotationScale)-> None :
      '''                             '''
    ...
    def setCePlotStyleName (self: Database,val : PlotStyleNameType,id : ObjectId)-> None :
      '''                             '''
    ...
    def setCecolor (self: Database,val : Color)-> None :
      '''                             '''
    ...
    def setCeltscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCeltype (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCelweight (self: Database,val : LineWeight)-> None :
      '''                             '''
    ...
    def setCetransparency (self: Database,val : Transparency)-> None :
      '''                             '''
    ...
    def setChamfera (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferb (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferc (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferd (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setClayer (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmaterial (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmljust (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCmlscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCmlstyleID (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCoords (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCshadow (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDelUsedObj (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDgnframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimAssoc (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimaso (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDimfit (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimsho (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDimstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setDimstyleData (self: Database,val : DimStyleTableRecord | ObjectId)-> None :
      '''                             '''
    ...
    def setDimunit (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDispSilh (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDragVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setDragmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDrawOrderCtl (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDwfframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setElevation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setEndCaps (self: Database,val : EndCaps)-> None :
      '''                             '''
    ...
    def setExtmax (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setExtmin (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFacetres (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setFilletrad (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setFillmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setFingerprintGuid (self: Database,guid : str)-> None :
      '''                             '''
    ...
    def setFullSaveRequired (self: Database)-> None :
      '''                             '''
    ...
    def setGeoMarkerVisibility (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setHaloGap (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setHandseed (self: Database,val : Handle)-> None :
      '''                             '''
    ...
    def setHideText (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setHpInherit (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setHpOrigin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setHyperlinkBase (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setIndexctl (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setInsbase (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setInsunits (self: Database,val : UnitsValue)-> None :
      '''                             '''
    ...
    def setInterfereColor (self: Database,val : Color)-> None :
      '''                             '''
    ...
    def setInterfereObjVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setInterfereVpVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setIntersectColor (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setIntersectDisplay (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setIsolines (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setJoinStyle (self: Database,val : JoinStyle)-> None :
      '''                             '''
    ...
    def setLatitude (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLayerEval (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLayerNotify (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLensLength (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLightGlyphDisplay (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLightingUnits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLightsInBlocks (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLimcheck (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLimmax (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLimmin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLineWeightDisplay (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLoftAng1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftAng2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftMag1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftMag2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftNormals (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLoftParam (self: Database,flags : int)-> None :
      '''                             '''
    ...
    def setLongitude (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLtscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLunits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLuprec (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setMLeaderscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setMLeaderstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setMaxactvp (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setMeasurement (self: Database,val : MeasurementValue)-> None :
      '''                             '''
    ...
    def setMirrtext (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setMsOleScale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setMsltscale (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setNorthDirection (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setObscuredColor (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setObscuredLineType (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setOleStartUp (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setOrthomode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPdfframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPdmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPdsize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPelevation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPextmax (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPextmin (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPickstyle (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPinsbase (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPlimcheck (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlimmax (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlimmin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlineEllipse (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlinegen (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlinewid (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPreviewType (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setProjectName (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setPsltscale (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPsolHeight (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPsolWidth (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPucs (self: Database,ucsOrigin : PyGe.Point3d,ucsXDir : PyGe.Point3d,ucsYDir : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPucsBase (self: Database,ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setPucsname (self: Database,ucsrec : ObjectId)-> None :
      '''                             '''
    ...
    def setQtextmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setRealWorldScale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setRegenmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setRetainOriginalThumbnailBitmap (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSaveproxygraphics (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSectionViewStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setShadedge (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setShadedif (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setShadowPlaneLocation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setShowHist (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSketchinc (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setSkpoly (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSolidHist (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSortEnts (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSplframe (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSplinesegs (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSplinetype (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setStepSize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setStepsPerSec (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setStyleSheet (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setSurftab1 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurftab2 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurftype (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurfu (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurfv (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTStackAlign (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTStackSize (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTablestyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setTextsize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTextstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTilemode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setTimeZone (self: Database,val : TimeZone)-> None :
      '''                             '''
    ...
    def setTimeZoneAsUtcOffset (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTracewid (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTreedepth (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUcs (self: Database,ucsOrigin : PyGe.Point3d,ucsXDir : PyGe.Point3d,ucsYDir : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcsBase (self: Database,ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setUcsname (self: Database,ucsrecId : ObjectId)-> None :
      '''                             '''
    ...
    def setUnitmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUpdateThumbnail (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri1 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri2 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri3 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri4 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri5 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUserr1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr3 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr4 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr5 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUsrtimer (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setVersionGuid (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setViewportScaleDefault (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setVisretain (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setWorldPucsBaseOrigin (self: Database,ucsOrigin : PyGe.Point3d,orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldUcsBaseOrigin (self: Database,ucsOrigin : PyGe.Point3d,orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldview (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setXclipFrame (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setXrefEditEnabled (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def shadedge (self: Database)-> int :
      '''                             '''
    ...
    def shadedif (self: Database)-> int :
      '''                             '''
    ...
    def shadowPlaneLocation (self: Database)-> float :
      '''                             '''
    ...
    def showHist (self: Database)-> int :
      '''                             '''
    ...
    def sketchinc (self: Database)-> float :
      '''                             '''
    ...
    def skpoly (self: Database)-> bool :
      '''                             '''
    ...
    def solidHist (self: Database)-> int :
      '''                             '''
    ...
    def sortEnts (self: Database)-> int :
      '''                             '''
    ...
    def splframe (self: Database)-> bool :
      '''                             '''
    ...
    def splinesegs (self: Database)-> int :
      '''                             '''
    ...
    def splinetype (self: Database)-> int :
      '''                             '''
    ...
    def stepSize (self: Database)-> float :
      '''                             '''
    ...
    def stepsPerSec (self: Database)-> float :
      '''                             '''
    ...
    def surftab1 (self: Database)-> int :
      '''                             '''
    ...
    def surftab2 (self: Database)-> int :
      '''                             '''
    ...
    def surftype (self: Database)-> int :
      '''                             '''
    ...
    def surfu (self: Database)-> int :
      '''                             '''
    ...
    def surfv (self: Database)-> int :
      '''                             '''
    ...
    def tableStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def tablestyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def textStyleTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def textsize (self: Database)-> float :
      '''                             '''
    ...
    def textstyle (self: Database)-> ObjectId :
      '''                             '''
    ...
    def thickness (self: Database)-> float :
      '''                             '''
    ...
    def tileModeLightSynch (self: Database)-> int :
      '''                             '''
    ...
    def tilemode (self: Database)-> bool :
      '''                             '''
    ...
    def timeZone (self: Database)-> TimeZone :
      '''                             '''
    ...
    def tracewid (self: Database)-> float :
      '''                             '''
    ...
    def transactionManager (self: Database)-> TransactionManager :
      '''                             '''
    ...
    def treedepth (self: Database)-> int :
      '''                             '''
    ...
    def tstackalign (self: Database)-> int :
      '''                             '''
    ...
    def tstacksize (self: Database)-> int :
      '''                             '''
    ...
    def ucsBase (self: Database)-> ObjectId :
      '''                             '''
    ...
    def ucsname (self: Database)-> ObjectId :
      '''                             '''
    ...
    def ucsorg (self: Database)-> Point3d :
      '''                             '''
    ...
    def ucsxdir (self: Database)-> Vector3d :
      '''                             '''
    ...
    def ucsydir (self: Database)-> Vector3d :
      '''                             '''
    ...
    def undoRecording (self: Database)-> bool :
      '''                             '''
    ...
    def unitmode (self: Database)-> int :
      '''                             '''
    ...
    def updateDataLink (self: Database,nDir : UpdateDirection,opt : UpdateOption)-> None :
      '''                             '''
    ...
    def updateExt (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def updateThumbnail (self: Database)-> int :
      '''                             '''
    ...
    def useri1 (self: Database)-> int :
      '''                             '''
    ...
    def useri2 (self: Database)-> int :
      '''                             '''
    ...
    def useri3 (self: Database)-> int :
      '''                             '''
    ...
    def useri4 (self: Database)-> int :
      '''                             '''
    ...
    def useri5 (self: Database)-> int :
      '''                             '''
    ...
    def userr1 (self: Database)-> float :
      '''                             '''
    ...
    def userr2 (self: Database)-> float :
      '''                             '''
    ...
    def userr3 (self: Database)-> float :
      '''                             '''
    ...
    def userr4 (self: Database)-> float :
      '''                             '''
    ...
    def userr5 (self: Database)-> float :
      '''                             '''
    ...
    def usrtimer (self: Database)-> bool :
      '''                             '''
    ...
    def viewTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def viewportScaleDefault (self: Database)-> float :
      '''                             '''
    ...
    def viewportTableId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def visretain (self: Database)-> bool :
      '''                             '''
    ...
    def visualStyleDictionaryId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def wblock (self, *args, **kwargs)-> None :
      '''wblock( (Database)arg1, (Database)arg2, (list)arg3, (Point3d)arg4 [, (DuplicateRecordCloning)arg5]) -> None :

    C++ signature :
        void wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue},class boost::python::list,class AcGePoint3d [,enum AcDb::DuplicateRecordCloning])

wblock( (Database)arg1, (Database)arg2 [, (ObjectId)arg3]) -> None :

    C++ signature :
        void wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue} [,class PyDbObjectId])'''
    ...
    def worldPucsBaseOrigin (self: Database,view : OrthographicView)-> Point3d :
      '''                             '''
    ...
    def worldUcsBaseOrigin (self: Database,view : OrthographicView)-> Point3d :
      '''                             '''
    ...
    def worldview (self: Database)-> bool :
      '''                             '''
    ...
    def xclipFrame (self: Database)-> int :
      '''                             '''
    ...
    def xrefBlockId (self: Database)-> ObjectId :
      '''                             '''
    ...
    def xrefEditEnabled (self: Database)-> bool :
      '''                             '''
    ...

class DbObject:
    def __init__ (self: DbObject,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def cloneFrom (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class DiametricDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DiametricDimension :
      '''cast( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DiametricDimension :
      '''cloneFrom( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def farChordPoint (self, *args, **kwargs)-> Point3d :
      '''farChordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d farChordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (DiametricDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbDiametricDimension {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setFarChordPoint (self, *args, **kwargs)-> None :
      '''setFarChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setFarChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, *args, **kwargs)-> None :
      '''setLeaderLength( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setLeaderLength(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Dictionary:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def asDict (self, *args, **kwargs)-> dict :
      '''asDict( (Dictionary)arg1) -> dict :

    C++ signature :
        class boost::python::dict asDict(class PyDbDictionary {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Dictionary :
      '''cast( (RxObject)arg1) -> Dictionary :

    C++ signature :
        class PyDbDictionary cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Dictionary :
      '''cloneFrom( (RxObject)arg1) -> Dictionary :

    C++ signature :
        class PyDbDictionary cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (Dictionary)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (Dictionary)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (Dictionary)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbDictionary {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def nameAt (self, *args, **kwargs)-> str :
      '''nameAt( (Dictionary)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > nameAt(class PyDbDictionary {lvalue},class PyDbObjectId)'''
    ...
    def numEntries (self, *args, **kwargs)-> int :
      '''numEntries( (Dictionary)arg1) -> int :

    C++ signature :
        unsigned int numEntries(class PyDbDictionary {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def remove (self, *args, **kwargs)-> None :
      '''remove( (Dictionary)arg1, (str)arg2) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

remove( (Dictionary)arg1, (str)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue})

remove( (Dictionary)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAt (self, *args, **kwargs)-> ObjectId :
      '''setAt( (Dictionary)arg1, (str)arg2, (DbObject)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId setAt(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObject {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> bool :
      '''setName( (Dictionary)arg1, (str)arg2, (str)arg3) -> bool :

    C++ signature :
        bool setName(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class DimInspect:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kShapeAngular (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeLabel (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRemove (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DimStyleTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (DimStyleTable)arg1, (DimStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbDimStyleTable {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DimStyleTable :
      '''cast( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DimStyleTable :
      '''cloneFrom( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class DimStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DimStyleTableRecord :
      '''cast( (RxObject)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DimStyleTableRecord :
      '''cloneFrom( (RxObject)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Dimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Dimension :
      '''cast( (RxObject)arg1) -> Dimension :

    C++ signature :
        class PyDbDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Dimension :
      '''cloneFrom( (RxObject)arg1) -> Dimension :

    C++ signature :
        class PyDbDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class DrawLeaderOrderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrawLeaderHeadFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawLeaderTailFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DrawMLeaderOrderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrawContentFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawLeaderFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DuplicateRecordCloning:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrcIgnore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcMangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcNotApplicable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcReplace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcUnmangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcXrefMangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DwgDataType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDwg3Real (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgBChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHardOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHardPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt64 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgNotRecognized (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgNull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgSoftOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgSoftPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DxfCode:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDxfAlpha (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfArbHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAttributePrompt (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAttributeTag (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBinaryChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBool (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCLShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCLShapeText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCircleSides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColorName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColorRGB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfComment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfControlString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDashLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDefaultLightingOn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDefaultLightingType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDescription (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimAPostStr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimPostStr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimVarHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDragVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEdgeStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfElevation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEmbeddedObjectStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEnd (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfFaceStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfFirstEntId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientColCount (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientColVal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientObjType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientPatType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientShift (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientTintType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientTintVal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHardOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHardPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHasSubentities (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHeaderId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt64 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayerLinetype (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayoutName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeElement (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypePDC (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeProse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLiveSectionId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLiveSectionName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMaterialId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMlineOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMstyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalX (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalY (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalZ (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfObjVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfOperator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPReactors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPixelScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPlotStyleNameId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPlotStyleNameType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRegAppFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRegAppName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRenderMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShadePlotId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShadowFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeXOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeYOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSoftOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSoftPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSubclass (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSunId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymTableRecComments (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymTableRecName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymbolTableName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextBigFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfThickness (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStyleFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStylePSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStyleXScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOrg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOriX (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOriY (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVertexIdentifier (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBackClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBackgroundId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBrightness (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewContrast (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewFrontClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewLensLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewWidth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportAspect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGrid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGridDisplay (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGridMajor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportIcon (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportNumber (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapPair (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportTwist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportZoom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVpVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXDataStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXDictionary (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXRefPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXTextString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXXXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdAsciiString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdBinaryChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdControlString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdDist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdInteger16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdInteger32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdMax (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DynBlockReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def anonymousBlockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''anonymousBlockTableRecord( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId anonymousBlockTableRecord(class PyDbDynBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReference {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def convertToStaticBlock (self, *args, **kwargs)-> None :
      '''convertToStaticBlock( (DynBlockReference)arg1) -> None :

    C++ signature :
        void convertToStaticBlock(class PyDbDynBlockReference {lvalue})

convertToStaticBlock( (DynBlockReference)arg1, (str)arg2) -> None :

    C++ signature :
        void convertToStaticBlock(class PyDbDynBlockReference {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dynamicBlockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''dynamicBlockTableRecord( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dynamicBlockTableRecord(class PyDbDynBlockReference {lvalue})'''
    ...
    def getBlockProperties (self, *args, **kwargs)-> list :
      '''getBlockProperties( (DynBlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list getBlockProperties(class PyDbDynBlockReference {lvalue})'''
    ...
    def getIsDynamicBlock (self, *args, **kwargs)-> bool :
      '''getIsDynamicBlock( (ObjectId)arg1) -> bool :

    C++ signature :
        bool getIsDynamicBlock(class PyDbObjectId)'''
    ...
    def isDynamicBlock (self, *args, **kwargs)-> bool :
      '''isDynamicBlock( (DynBlockReference)arg1) -> bool :

    C++ signature :
        bool isDynamicBlock(class PyDbDynBlockReference {lvalue})'''
    ...
    def resetBlock (self, *args, **kwargs)-> None :
      '''resetBlock( (DynBlockReference)arg1) -> None :

    C++ signature :
        void resetBlock(class PyDbDynBlockReference {lvalue})'''
    ...

class DynBlockReferenceProperty:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (DynBlockReferenceProperty)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def getAllowedValues (self, *args, **kwargs)-> list :
      '''getAllowedValues( (DynBlockReferenceProperty)arg1) -> list :

    C++ signature :
        class boost::python::list getAllowedValues(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyName (self, *args, **kwargs)-> str :
      '''propertyName( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > propertyName(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyType (self, *args, **kwargs)-> DwgDataType :
      '''propertyType( (DynBlockReferenceProperty)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType propertyType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def readOnly (self, *args, **kwargs)-> bool :
      '''readOnly( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool readOnly(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (DynBlockReferenceProperty)arg1, (EvalVariant)arg2) -> None :

    C++ signature :
        void setValue(class PyDbDynBlockReferenceProperty {lvalue},class PyDbEvalVariant)'''
    ...
    def show (self, *args, **kwargs)-> bool :
      '''show( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool show(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def unitsType (self, *args, **kwargs)-> DynUnitsType :
      '''unitsType( (DynBlockReferenceProperty)arg1) -> DynUnitsType :

    C++ signature :
        enum AcDbDynBlockReferenceProperty::UnitsType unitsType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> EvalVariant :
      '''value( (DynBlockReferenceProperty)arg1) -> EvalVariant :

    C++ signature :
        class PyDbEvalVariant value(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def visibleInCurrentVisibilityState (self, *args, **kwargs)-> bool :
      '''visibleInCurrentVisibilityState( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool visibleInCurrentVisibilityState(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...

class DynUnitsType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAngular (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDistance (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoUnits (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class EndCaps:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEndCapAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapSquare (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Entity:
    def __init__ (self: Entity,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: RxObject)-> Entity :
      '''                             '''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def cloneFrom (otherObject: RxObject)-> Entity :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class EntityColor:
    def ByBlock (self, *args, **kwargs)-> EntityColor :
      '''ByBlock() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByBlock()

ByBlock() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByBlock()'''
    ...
    def ByLayer (self, *args, **kwargs)-> EntityColor :
      '''ByLayer() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByLayer()

ByLayer() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByLayer()'''
    ...
    def Foreground (self, *args, **kwargs)-> EntityColor :
      '''Foreground() -> EntityColor :

    C++ signature :
        class AcCmEntityColor Foreground()

Foreground() -> EntityColor :

    C++ signature :
        class AcCmEntityColor Foreground()'''
    ...
    def None (self, *args, **kwargs)-> EntityColor :
      '''None() -> EntityColor :

    C++ signature :
        class AcCmEntityColor None()

None() -> EntityColor :

    C++ signature :
        class AcCmEntityColor None()'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char,unsigned char,unsigned char)'''
    ...
    def black (self, *args, **kwargs)-> EntityColor :
      '''black() -> EntityColor :

    C++ signature :
        class AcCmEntityColor black()

black() -> EntityColor :

    C++ signature :
        class AcCmEntityColor black()'''
    ...
    def blue (self, *args, **kwargs)-> int :
      '''blue( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmEntityColor {lvalue})'''
    ...
    def canResolveRGB (self, *args, **kwargs)-> bool :
      '''canResolveRGB( (EntityColor)arg1) -> bool :

    C++ signature :
        bool canResolveRGB(class AcCmEntityColor {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (EntityColor)arg1) -> int :

    C++ signature :
        short colorIndex(class AcCmEntityColor {lvalue})'''
    ...
    def colorMethod (self, *args, **kwargs)-> ColorMethod :
      '''colorMethod( (EntityColor)arg1) -> ColorMethod :

    C++ signature :
        enum AcCmEntityColor::ColorMethod colorMethod(class AcCmEntityColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs)-> int :
      '''getCOLORREF( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmEntityColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs)-> int :
      '''getRGB( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmEntityColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs)-> int :
      '''getRGBM( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmEntityColor {lvalue})'''
    ...
    def green (self, *args, **kwargs)-> int :
      '''green( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmEntityColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs)-> bool :
      '''isByACI( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmEntityColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs)-> bool :
      '''isByColor( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmEntityColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs)-> bool :
      '''isByPen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmEntityColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs)-> bool :
      '''isForeground( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozen (self, *args, **kwargs)-> bool :
      '''isLayerFrozen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozen(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozenOrOff (self, *args, **kwargs)-> bool :
      '''isLayerFrozenOrOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozenOrOff(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerOff (self, *args, **kwargs)-> bool :
      '''isLayerOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs)-> bool :
      '''isNone( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmEntityColor {lvalue})'''
    ...
    def layerIndex (self, *args, **kwargs)-> int :
      '''layerIndex( (EntityColor)arg1) -> int :

    C++ signature :
        int layerIndex(class AcCmEntityColor {lvalue})'''
    ...
    def makeTrueColor (self, *args, **kwargs)-> EntityColor :
      '''makeTrueColor( (EntityColor)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor makeTrueColor(class AcCmEntityColor {lvalue})'''
    ...
    def penIndex (self, *args, **kwargs)-> int :
      '''penIndex( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned short penIndex(class AcCmEntityColor {lvalue})'''
    ...
    def red (self, *args, **kwargs)-> int :
      '''red( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmEntityColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs)-> None :
      '''setByBlock( (EntityColor)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs)-> None :
      '''setByLayer( (EntityColor)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs)-> ErrorStatus :
      '''setCOLORREF( (EntityColor)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (EntityColor)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class AcCmEntityColor {lvalue},short)'''
    ...
    def setForeground (self, *args, **kwargs)-> None :
      '''setForeground( (EntityColor)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmEntityColor {lvalue})'''
    ...
    def setLayerIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setLayerIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerIndex(class AcCmEntityColor {lvalue},int)'''
    ...
    def setLayerOff (self, *args, **kwargs)-> None :
      '''setLayerOff( (EntityColor)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs)-> None :
      '''setNone( (EntityColor)arg1) -> None :

    C++ signature :
        void setNone(class AcCmEntityColor {lvalue})'''
    ...
    def setPenIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setPenIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPenIndex(class AcCmEntityColor {lvalue},unsigned short)'''
    ...
    def setRGB (self, *args, **kwargs)-> ErrorStatus :
      '''setRGB( (EntityColor)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned int)

setRGB( (EntityColor)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs)-> ErrorStatus :
      '''setRGBM( (EntityColor)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def white (self, *args, **kwargs)-> EntityColor :
      '''white() -> EntityColor :

    C++ signature :
        class AcCmEntityColor white()

white() -> EntityColor :

    C++ signature :
        class AcCmEntityColor white()'''
    ...

class ErrorStatus:
    def Ok (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def eAbortPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAllInSameRigidSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyHasRepresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInDb (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInGroup (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInactive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInferred (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAmbiguousInput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAmbiguousOutput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAnonymousEntry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAtMaxReaders (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBackgroundPlotInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadColorIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDwgHeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDxfFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDxfSequence (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLineWeightValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLinetypeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLinetypeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadMaterialName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPaperspaceView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleNameHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadUCS (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadVisibilityValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadlyNestedAppData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBinaryDataSizeExceeded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBlockDefInEntitySection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBrokenHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBufferTooSmall (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotBeErasedByCaller (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotBeResurrected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotChangeActiveViewport (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotChangeColumnType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotExplodeEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotNestBlockDefs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotPlotToFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotRestoreFromAcisFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotScaleNonUniformly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCantOpenFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eChangedAgainstAssociativity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseFailObjectDamaged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseModifyAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eClosePartialFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseWasNotifying (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCommandWasInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eContainerNotEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eConvertImageFormatFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyNameExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCreateFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCreateInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCustomSizeNotPossible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCyclicDependency (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkAdapterNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkBadConnectionString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkConnectionFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkExcelNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkInvalidAdapterId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkNotUpdatedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkOtherError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceIsWriteProtected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceUpdateNotAllowed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataTooLarge (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDatabaseObjectsOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDegenerateGeometry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelLastLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelUnableToFind (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelUnableToSetCurrent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelayMore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeleteEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeletedEntry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDependentOnObjectErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeviceNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDocumentSwitchDisabled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateBlockDefinition (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateDxfField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateKey (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateRecordName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgCRCDoesNotMatch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgNeedsAFullSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgNotRecoverable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgObjectImproperlyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgRecoveredOK (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgSentinelDoesNotMatch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareDemandLoad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareReadAccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareWriteAccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwkLockFileFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxbPartiallyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxbReadAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxfPartiallyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxfReadAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEmbeddedIntersections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEmptyOperand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndOfFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndOfObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEntityInInactiveLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEntityRestricedInDOF (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eExcessiveItemCount (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eExplodeBeforeTransform (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFSMError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedCurveCheck (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToBlend (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToEvaluate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToEvaluateDependents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetEdgeChamfers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetEdgeRounds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetVertexRounds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileAccessErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileInternalErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileLockedByACAD (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileMissingSections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileNotInCloud (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileSharingViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileSystemErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileTooManyOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFilerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFixedAllErrors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGeneralModelingFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetAdIntImgServicesFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetImageBytesFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetImageDIBFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetPreviewImageFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphContainsProxies (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphCyclesFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphEdgeAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphEdgeNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphNodeAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphNodeNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphicsNotGenerated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGuidNoAddress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHadMultipleReaders (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHandleExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHandleInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHatchTooDense (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIgnoredLinetypeRedef (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIllegalEntityType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIllegalReplacement (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInProcessOfCommitting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompatiblePlotSettings (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompleteBlockDefinition (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompleteComplexObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInconsistentConstraint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetBadPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetBase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetCreateInternetSessionFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetDirectoryFull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetDiskFull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileAccessDenied (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileGenericError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileOpenFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetGenericException (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHardwareError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpAccessDenied (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadGateway (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadMethod (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadRequest (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpConflict (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpGatewayTimeout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpLengthRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpNoAcceptableResponse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpObjectNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpOpenRequestFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpPaymentRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpPreconditionFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpProxyAuthorizationRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpRequestForbidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpRequestTooLarge (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpResourceGone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpServerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpServiceUnavailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpTimedOut (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpUnsupportedMedia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpUriTooLong (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpVersionNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInCache (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetSessionConnectFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetSessionOpenFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInvalidAccessType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInvalidFileHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNoAcadInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNoWinInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNotAnURL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNotImplemented (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetOk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetOldWinInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetProtocolNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetSharingViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetTooManyOpenFiles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetUnknownError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetUserCancelledTransfer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetValidURL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInsertAfter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidAdsName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidAxis (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDimStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDwgVersion (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxf2dPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxf3dPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxfCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxfSectionName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidEngineState (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFaceVertexIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFileExtension (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFix (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidIdMap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidInput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidKey (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidMeshVertexIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOpenState  (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOwnerObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidParameterName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPlotArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPlotInfo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPreviewImage (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidProfileName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidREFIID (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidResBuf (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidSymTableFlag (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidSymbolTableName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidTextStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidWindowArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidXrefObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsAnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsReading (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsWriteProtected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsWriting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsXRefObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eItemCountChanged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIteratorDone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eKeyNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLISPActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLayerGroupCodeMissing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLayoutNotCurrent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLeftErrorsUnfixed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLoadFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockChangeInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockConflict (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLongTransReferenceError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMakeMeProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMakeMeProxyAndResurrect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMaxLayouts (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMaxNodes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingDxfField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingDxfSection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingSymbolTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingSymbolTableRec (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eModifyingAssociativeEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eModifyingDimensionWithExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to3 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to15 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to6 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeInteger (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeNonNegative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeNonZero (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBePositive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBePositiveInteger (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustFirstAddBlockToDb (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustOpenThruOwner (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustPlotToFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNLSFileNotAvailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNearSizeLimit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNegativeValueNotAllowed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoAcDbHostApplication (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoActiveTransactions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoBlockBegin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoClassId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoConnectedBlendSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoCurrentConfig (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoDocument (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoEntitiesFromPersistentIds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoErrorHandler (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoFileName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInputFiler (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInputPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInternalSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoIntersections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoMatchingMedia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoNodeActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoOverride (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoPlotStyleTranslationTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoPreviewContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoRepresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoStoredOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoStoredReconcileStatus (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoThumbnailBitmap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoUnderlayHost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoWorkSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonCoplanarGeometry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonPlanarEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonePlotDevice (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAllowedForThisProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotApplicable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAssociative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotClonedPrimaryProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotConnected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotCurrentDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotDxfHeaderGroupCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotFromThisDocument (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotG1Continuous (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotHandled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotImplementedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInGroup (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInPaperspace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInitializedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotMultiPageCapable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotNewlyCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOnBoundary (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotShownInPropertyPalette (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotSupportedInDwgApi (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotThatKindOfClass (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotTopTransaction (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullEntityPointer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullIterator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullNodeId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullObjectPointer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullPtr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNumberOfCopiesNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObjectIsReferenced (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObjectToBeDeleted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObsoleteFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOnLockedLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOpenFileCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOtherObjectsBusy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfDisk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfMemory (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfPagerMemory (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfRange (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOverDefinedConstraint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotInDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerToBeTransformed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCCoordSysAssignFail (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCCoordSysReprojectFail (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCDiskSpaceTooSmall (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileDataSelectorInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotOpened (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotWritten (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileWrongFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCLargeData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCLastImporterUnfinished (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCNoEngineInfo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCThreadTerminated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCUnknownFileType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePageCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePagerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePagerWriteError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePermanentlyErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotAlreadyStarted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotStyleInColorDependentMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePointNotOnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePolyWidthLost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePreviewFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProfileDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProfileIsInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProperClassSeparatorExpected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eReadImageBufferFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRecordNotInTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eReferencedInEquation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegappIdNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegistryAccessError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegistryCreateError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameInvalidLayoutName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameLayoutAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRepeatEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRepeatedDwgRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRowsMustMatchColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorCipherNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorComputingSignature (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorDecryptingData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorEncryptingData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorGeneratingTimestamp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorReadingFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorWritingFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorWritingSignature (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecInitializationFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecInvalidDigitalID (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSelfIntersecting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSelfReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSetFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSilentOpenFileCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSingularPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSomeInputDataLeftUnread (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eStringNotAllowedInExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eStringTooLong (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSubSelectionSetEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSubentitiesStillOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTargetDocNotQuiescent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooFewLineTypeElements (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooFewVertices (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyActiveCommands (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyLineTypeElements (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyVertices (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTransactionOpenWhileCommandEnded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToGetLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToGetViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRemoveAssociation  (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRemoveOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRetrieveOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSetLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSetViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToStoreOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToStoreReconcileStatus (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSyncModelView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToTrimLastPiece (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToTrimSurface (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefineShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefinedDxfGroupCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefinedLineType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndoNoGroupBegin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndoOperationNotAvailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnknownDxfFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnknownHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnrecoverableErrors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnsupportedFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUserBreak (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUserUnloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSAPIOnlyValues (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSFalse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSIsAcadDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSIsInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSOneOffCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSTrue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVertexAfterFace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVetoed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotForwarding (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotifying (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForUndo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWriteImageBufferFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongCellType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongObjectType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongSubentityType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXRefDependent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXdataSizeExceeded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXrefReloadImpossibleAtThisTime (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXrefReloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class EvalVariant:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (EvalVariant)arg1) -> None :

    C++ signature :
        void clear(class PyDbEvalVariant {lvalue})'''
    ...
    def copyFrom (self, *args, **kwargs)-> None :
      '''copyFrom( (EvalVariant)arg1, (RxObject)arg2) -> None :

    C++ signature :
        void copyFrom(class PyDbEvalVariant {lvalue},class PyRxObject)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getDouble (self, *args, **kwargs)-> float :
      '''getDouble( (EvalVariant)arg1) -> float :

    C++ signature :
        double getDouble(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt16 (self, *args, **kwargs)-> int :
      '''getInt16( (EvalVariant)arg1) -> int :

    C++ signature :
        short getInt16(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt32 (self, *args, **kwargs)-> int :
      '''getInt32( (EvalVariant)arg1) -> int :

    C++ signature :
        int getInt32(class PyDbEvalVariant {lvalue})'''
    ...
    def getObjectId (self, *args, **kwargs)-> ObjectId :
      '''getObjectId( (EvalVariant)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getObjectId(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint2d (self, *args, **kwargs)-> Point2d :
      '''getPoint2d( (EvalVariant)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2d(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint3d (self, *args, **kwargs)-> Point3d :
      '''getPoint3d( (EvalVariant)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3d(class PyDbEvalVariant {lvalue})'''
    ...
    def getString (self, *args, **kwargs)-> str :
      '''getString( (EvalVariant)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getString(class PyDbEvalVariant {lvalue})'''
    ...
    def getType (self, *args, **kwargs)-> DwgDataType :
      '''getType( (EvalVariant)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType getType(class PyDbEvalVariant {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def setDouble (self, *args, **kwargs)-> None :
      '''setDouble( (EvalVariant)arg1, (DxfCode)arg2, (float)arg3) -> None :

    C++ signature :
        void setDouble(class PyDbEvalVariant {lvalue},short,double)'''
    ...
    def setInt16 (self, *args, **kwargs)-> None :
      '''setInt16( (EvalVariant)arg1, (DxfCode)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void setInt16(class PyDbEvalVariant {lvalue},short,short)'''
    ...
    def setInt32 (self, *args, **kwargs)-> None :
      '''setInt32( (EvalVariant)arg1, (DxfCode)arg2, (int)arg3) -> None :

    C++ signature :
        void setInt32(class PyDbEvalVariant {lvalue},short,int)'''
    ...
    def setObjectId (self, *args, **kwargs)-> None :
      '''setObjectId( (EvalVariant)arg1, (DxfCode)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setObjectId(class PyDbEvalVariant {lvalue},short,class PyDbObjectId)'''
    ...
    def setPoint2d (self, *args, **kwargs)-> None :
      '''setPoint2d( (EvalVariant)arg1, (DxfCode)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void setPoint2d(class PyDbEvalVariant {lvalue},short,class AcGePoint2d)'''
    ...
    def setPoint3d (self, *args, **kwargs)-> None :
      '''setPoint3d( (EvalVariant)arg1, (DxfCode)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setPoint3d(class PyDbEvalVariant {lvalue},short,class AcGePoint3d)'''
    ...
    def setString (self, *args, **kwargs)-> None :
      '''setString( (EvalVariant)arg1, (DxfCode)arg2, (str)arg3) -> None :

    C++ signature :
        void setString(class PyDbEvalVariant {lvalue},short,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

class Extents:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents)arg1, (Extents)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents {lvalue},class AcDbExtents)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents {lvalue},class AcGePoint3d)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents {lvalue},class AcGeVector3d)'''
    ...
    def maxPoint (self, *args, **kwargs)-> Point3d :
      '''maxPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d maxPoint(class AcDbExtents {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> Point3d :
      '''minPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d minPoint(class AcDbExtents {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> ErrorStatus :
      '''set( (Extents)arg1, (Point3d)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents {lvalue},class AcGePoint3d,class AcGePoint3d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents {lvalue},class AcGeMatrix3d)'''
    ...

class Extents2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents2d)

__init__( (object)arg1, (Point2d)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d,class AcGePoint2d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents2d)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents2d {lvalue},class AcDbExtents2d)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents2d)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents2d {lvalue},class AcGePoint2d)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents2d)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents2d {lvalue},class AcGeVector2d)'''
    ...
    def maxPoint (self, *args, **kwargs)-> Point2d :
      '''maxPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d maxPoint(class AcDbExtents2d {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> Point2d :
      '''minPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d minPoint(class AcDbExtents2d {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> ErrorStatus :
      '''set( (Extents2d)arg1, (Point2d)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents2d {lvalue},class AcGePoint2d,class AcGePoint2d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents2d)arg1, (Matrix2d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents2d {lvalue},class AcGeMatrix2d)'''
    ...

class ExtrudedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ExtrudedSurface :
      '''cast( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ExtrudedSurface :
      '''cloneFrom( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Face:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (bool)arg5, (bool)arg6, (bool)arg7, (bool)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (bool)arg6, (bool)arg7, (bool)arg8, (bool)arg9) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Face :
      '''cast( (RxObject)arg1) -> Face :

    C++ signature :
        class PyDbFace cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Face :
      '''cloneFrom( (RxObject)arg1) -> Face :

    C++ signature :
        class PyDbFace cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getVertexAt (self, *args, **kwargs)-> Point3d :
      '''getVertexAt( (Face)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertexAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs)-> bool :
      '''isEdgeVisibleAt( (Face)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs)-> None :
      '''makeEdgeInvisibleAt( (Face)arg1, (int)arg2) -> None :

    C++ signature :
        void makeEdgeInvisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs)-> None :
      '''makeEdgeVisibleAt( (Face)arg1, (int)arg2) -> None :

    C++ signature :
        void makeEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self, *args, **kwargs)-> None :
      '''setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)

setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class FaceRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (DxfCode)arg2, (DxfCode)arg3, (DxfCode)arg4, (DxfCode)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,short,short,short,short)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> FaceRecord :
      '''cast( (RxObject)arg1) -> FaceRecord :

    C++ signature :
        class PyDbFaceRecord cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> FaceRecord :
      '''cloneFrom( (RxObject)arg1) -> FaceRecord :

    C++ signature :
        class PyDbFaceRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getVertexAt (self, *args, **kwargs)-> int :
      '''getVertexAt( (FaceRecord)arg1, (int)arg2) -> int :

    C++ signature :
        short getVertexAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs)-> bool :
      '''isEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs)-> None :
      '''makeEdgeInvisibleAt( (FaceRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void makeEdgeInvisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs)-> None :
      '''makeEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void makeEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self, *args, **kwargs)-> None :
      '''setVertexAt( (FaceRecord)arg1, (int)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void setVertexAt(class PyDbFaceRecord {lvalue},unsigned short,short)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Fcf:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (str)arg2, (Point3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Fcf :
      '''cast( (RxObject)arg1) -> Fcf :

    C++ signature :
        class PyDbFcf cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Fcf :
      '''cloneFrom( (RxObject)arg1) -> Fcf :

    C++ signature :
        class PyDbFcf cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimclrd (self, *args, **kwargs)-> Color :
      '''dimclrd( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbFcf {lvalue})'''
    ...
    def dimclrt (self, *args, **kwargs)-> Color :
      '''dimclrt( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrt(class PyDbFcf {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> object :
      '''dimensionStyle( (Fcf)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbFcf {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs)-> float :
      '''dimgap( (Fcf)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbFcf {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs)-> float :
      '''dimscale( (Fcf)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbFcf {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs)-> ObjectId :
      '''dimtxsty( (Fcf)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbFcf {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs)-> float :
      '''dimtxt( (Fcf)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbFcf {lvalue})'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbFcf {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBoundingPline (self, *args, **kwargs)-> list :
      '''getBoundingPline( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPline(class PyDbFcf {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbFcf {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Fcf)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbFcf {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def location (self, *args, **kwargs)-> Point3d :
      '''location( (Fcf)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbFcf {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbFcf {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimVars (self, *args, **kwargs)-> None :
      '''setDimVars( (Fcf)arg1) -> None :

    C++ signature :
        void setDimVars(class PyDbFcf {lvalue})'''
    ...
    def setDimclrd (self, *args, **kwargs)-> None :
      '''setDimclrd( (Fcf)arg1, (Color)arg2) -> None :

    C++ signature :
        void setDimclrd(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimclrt (self, *args, **kwargs)-> None :
      '''setDimclrt( (Fcf)arg1, (Color)arg2) -> None :

    C++ signature :
        void setDimclrt(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Fcf)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbFcf {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs)-> None :
      '''setDimgap( (Fcf)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimgap(class PyDbFcf {lvalue},double)'''
    ...
    def setDimscale (self, *args, **kwargs)-> None :
      '''setDimscale( (Fcf)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimscale(class PyDbFcf {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Fcf)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbFcf {lvalue},class PyDbDimStyleTableRecord)

setDimstyleData( (Fcf)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbFcf {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxsty (self, *args, **kwargs)-> None :
      '''setDimtxsty( (Fcf)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimtxsty(class PyDbFcf {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDimtxt (self, *args, **kwargs)-> None :
      '''setDimtxt( (Fcf)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimtxt(class PyDbFcf {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setLocation (self, *args, **kwargs)-> None :
      '''setLocation( (Fcf)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbFcf {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOrientation (self, *args, **kwargs)-> None :
      '''setOrientation( (Fcf)arg1, (Vector3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setOrientation(class PyDbFcf {lvalue},class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setText (self, *args, **kwargs)-> None :
      '''setText( (Fcf)arg1, (str)arg2) -> None :

    C++ signature :
        void setText(class PyDbFcf {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self, *args, **kwargs)-> str :
      '''text( (Fcf)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbFcf {lvalue},int)'''
    ...
    def textAll (self, *args, **kwargs)-> str :
      '''textAll( (Fcf)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAll(class PyDbFcf {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Field:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Field :
      '''cast( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cast(class PyRxObject)'''
    ...
    def childCount (self, *args, **kwargs)-> int :
      '''childCount( (Field)arg1) -> int :

    C++ signature :
        int childCount(class PyDbField {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Field :
      '''cloneFrom( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def convertToTextField (self, *args, **kwargs)-> None :
      '''convertToTextField( (Field)arg1) -> None :

    C++ signature :
        void convertToTextField(class PyDbField {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def evaluate (self, *args, **kwargs)-> None :
      '''evaluate( (Field)arg1) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue})

evaluate( (Field)arg1, (FieldEvalContext)arg2) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext)

evaluate( (Field)arg1, (FieldEvalContext)arg2, (Database)arg3) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext,class PyDbDatabase {lvalue})'''
    ...
    def evaluationOption (self, *args, **kwargs)-> FieldEvalOption :
      '''evaluationOption( (Field)arg1) -> FieldEvalOption :

    C++ signature :
        enum AcDbField::EvalOption evaluationOption(class PyDbField {lvalue})'''
    ...
    def evaluationStatus (self, *args, **kwargs)-> FieldEvalStatus :
      '''evaluationStatus( (Field)arg1) -> FieldEvalStatus :

    C++ signature :
        enum AcDbField::EvalStatus evaluationStatus(class PyDbField {lvalue})'''
    ...
    def evaluatorId (self, *args, **kwargs)-> str :
      '''evaluatorId( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > evaluatorId(class PyDbField {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFormat (self, *args, **kwargs)-> str :
      '''getFormat( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormat(class PyDbField {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getValue (self, *args, **kwargs)-> str :
      '''getValue( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getValue(class PyDbField {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTextField (self, *args, **kwargs)-> bool :
      '''isTextField( (Field)arg1) -> bool :

    C++ signature :
        bool isTextField(class PyDbField {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postInDatabase (self, *args, **kwargs)-> None :
      '''postInDatabase( (Field)arg1, (Database)arg2) -> None :

    C++ signature :
        void postInDatabase(class PyDbField {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setEvaluationOption (self, *args, **kwargs)-> None :
      '''setEvaluationOption( (Field)arg1, (FieldEvalOption)arg2) -> None :

    C++ signature :
        void setEvaluationOption(class PyDbField {lvalue},enum AcDbField::EvalOption)'''
    ...
    def setEvaluatorId (self, *args, **kwargs)-> None :
      '''setEvaluatorId( (Field)arg1, (str)arg2) -> None :

    C++ signature :
        void setEvaluatorId(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (Field)arg1, (str)arg2) -> None :

    C++ signature :
        void setFormat(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setInObject (self, *args, **kwargs)-> None :
      '''setInObject( (Field)arg1, (DbObject)arg2, (str)arg3) -> None :

    C++ signature :
        void setInObject(class PyDbField {lvalue},class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def state (self, *args, **kwargs)-> FieldState :
      '''state( (Field)arg1) -> FieldState :

    C++ signature :
        enum AcDbField::State state(class PyDbField {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class FieldCodeFlag:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAddMarkers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kChildObjectReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDetachChildren (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEscapeBackslash (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluatedChildren (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluatedText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFieldCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kObjectReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreserveFields (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreserveOptions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStripOptions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalContext:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDemand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEtransmit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRegen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAutomatic (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDisable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnDemand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnEtransmit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnPlot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnRegen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalStatus:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEvaluatorNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNotYetEvaluated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOtherError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSuccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSyntaxError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldState:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCompiled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHasCache (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHasFormattedString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInitialized (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kModified (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FindFileHint:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kARXApplication (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCloudOrProjectFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCompiledShapeFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDataLinkFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEmbeddedImageFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFontMapFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMaterialMapFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPatternFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPhotometricWebFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTrueTypeFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnderlayFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXRefDrawing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGridLineStyleDouble (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridLineStyleSingle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzInside (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInnerGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidGridLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOuterGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertInside (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridProperty:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGridPropAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropDoubleLineSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLineStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLinetype (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Handle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned __int64)'''
    ...
    def high (self, *args, **kwargs)-> int :
      '''high( (Handle)arg1) -> int :

    C++ signature :
        unsigned int high(class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Handle)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbHandle {lvalue})'''
    ...
    def isOne (self, *args, **kwargs)-> bool :
      '''isOne( (Handle)arg1) -> bool :

    C++ signature :
        bool isOne(class PyDbHandle {lvalue})'''
    ...
    def low (self, *args, **kwargs)-> int :
      '''low( (Handle)arg1) -> int :

    C++ signature :
        unsigned int low(class PyDbHandle {lvalue})'''
    ...
    def setHigh (self, *args, **kwargs)-> None :
      '''setHigh( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setHigh(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setLow (self, *args, **kwargs)-> None :
      '''setLow( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setLow(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (Handle)arg1) -> None :

    C++ signature :
        void setNull(class PyDbHandle {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setValue(class PyDbHandle {lvalue},unsigned __int64)'''
    ...
    def toString (self, *args, **kwargs)-> str :
      '''toString( (Handle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > toString(class PyDbHandle {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> int :
      '''value( (Handle)arg1) -> int :

    C++ signature :
        unsigned __int64 value(class PyDbHandle {lvalue})'''
    ...

class Hatch:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendLoop (self, *args, **kwargs)-> None :
      '''appendLoop( (Hatch)arg1, (int)arg2, (list)arg3) -> None :

    C++ signature :
        void appendLoop(class PyDbHatch {lvalue},int,class boost::python::list)'''
    ...
    def appendLoopBulges (self, *args, **kwargs)-> None :
      '''appendLoopBulges( (Hatch)arg1, (int)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void appendLoopBulges(class PyDbHatch {lvalue},int,class boost::python::list,class boost::python::list)'''
    ...
    def appendLoopEdges (self, *args, **kwargs)-> None :
      '''appendLoopEdges( (Hatch)arg1, (int)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void appendLoopEdges(class PyDbHatch {lvalue},int,class boost::python::list,class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def associative (self, *args, **kwargs)-> bool :
      '''associative( (Hatch)arg1) -> bool :

    C++ signature :
        bool associative(class PyDbHatch {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (Hatch)arg1) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbHatch {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Hatch :
      '''cast( (RxObject)arg1) -> Hatch :

    C++ signature :
        class PyDbHatch cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Hatch :
      '''cloneFrom( (RxObject)arg1) -> Hatch :

    C++ signature :
        class PyDbHatch cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Hatch)arg1) -> float :

    C++ signature :
        double elevation(class PyDbHatch {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def evaluateGradientColorAt (self, *args, **kwargs)-> Color :
      '''evaluateGradientColorAt( (Hatch)arg1, (float)arg2) -> Color :

    C++ signature :
        class AcCmColor evaluateGradientColorAt(class PyDbHatch {lvalue},float)'''
    ...
    def evaluateHatch (self, *args, **kwargs)-> None :
      '''evaluateHatch( (Hatch)arg1) -> None :

    C++ signature :
        void evaluateHatch(class PyDbHatch {lvalue})

evaluateHatch( (Hatch)arg1, (bool)arg2) -> None :

    C++ signature :
        void evaluateHatch(class PyDbHatch {lvalue},bool)'''
    ...
    def evaluateHatchAllScales1 (self, *args, **kwargs)-> None :
      '''evaluateHatchAllScales1( (Hatch)arg1) -> None :

    C++ signature :
        void evaluateHatchAllScales1(class PyDbHatch {lvalue})'''
    ...
    def evaluateHatchAllScales2 (self, *args, **kwargs)-> None :
      '''evaluateHatchAllScales2( (Hatch)arg1, (bool)arg2) -> None :

    C++ signature :
        void evaluateHatchAllScales2(class PyDbHatch {lvalue},bool)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Hatch)arg1) -> float :

    C++ signature :
        double getArea(class PyDbHatch {lvalue})'''
    ...
    def getAssocObjIds (self, *args, **kwargs)-> list :
      '''getAssocObjIds( (Hatch)arg1) -> list :

    C++ signature :
        class boost::python::list getAssocObjIds(class PyDbHatch {lvalue})'''
    ...
    def getAssocObjIdsAt (self, *args, **kwargs)-> list :
      '''getAssocObjIdsAt( (Hatch)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getAssocObjIdsAt(class PyDbHatch {lvalue},int)'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getGradientColors (self, *args, **kwargs)-> tuple :
      '''getGradientColors( (Hatch)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getGradientColors(class PyDbHatch {lvalue})'''
    ...
    def getGradientOneColorMode (self, *args, **kwargs)-> bool :
      '''getGradientOneColorMode( (Hatch)arg1) -> bool :

    C++ signature :
        bool getGradientOneColorMode(class PyDbHatch {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getHatchLineDataAt (self, *args, **kwargs)-> tuple :
      '''getHatchLineDataAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getHatchLineDataAt(class PyDbHatch {lvalue},int)'''
    ...
    def getHatchLinesData (self, *args, **kwargs)-> tuple :
      '''getHatchLinesData( (Hatch)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getHatchLinesData(class PyDbHatch {lvalue})'''
    ...
    def getLoopBulgesAt (self, *args, **kwargs)-> tuple :
      '''getLoopBulgesAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getLoopBulgesAt(class PyDbHatch {lvalue},int)'''
    ...
    def getLoopEdgesAt (self, *args, **kwargs)-> tuple :
      '''getLoopEdgesAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getLoopEdgesAt(class PyDbHatch {lvalue},int)'''
    ...
    def getPatternDefinitionAt (self, *args, **kwargs)-> tuple :
      '''getPatternDefinitionAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getPatternDefinitionAt(class PyDbHatch {lvalue},int)'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getRegionArea (self, *args, **kwargs)-> Region :
      '''getRegionArea( (Hatch)arg1) -> Region :

    C++ signature :
        class PyDbRegion getRegionArea(class PyDbHatch {lvalue})'''
    ...
    def getShadeTintValue (self, *args, **kwargs)-> float :
      '''getShadeTintValue( (Hatch)arg1) -> float :

    C++ signature :
        float getShadeTintValue(class PyDbHatch {lvalue})'''
    ...
    def gradientAngle (self, *args, **kwargs)-> float :
      '''gradientAngle( (Hatch)arg1) -> float :

    C++ signature :
        double gradientAngle(class PyDbHatch {lvalue})'''
    ...
    def gradientName (self, *args, **kwargs)-> str :
      '''gradientName( (Hatch)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > gradientName(class PyDbHatch {lvalue})'''
    ...
    def gradientShift (self, *args, **kwargs)-> float :
      '''gradientShift( (Hatch)arg1) -> float :

    C++ signature :
        float gradientShift(class PyDbHatch {lvalue})'''
    ...
    def gradientType (self, *args, **kwargs)-> HatchGradientPatternType :
      '''gradientType( (Hatch)arg1) -> HatchGradientPatternType :

    C++ signature :
        enum AcDbHatch::GradientPatternType gradientType(class PyDbHatch {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hatchObjectType (self, *args, **kwargs)-> HatchObjectType :
      '''hatchObjectType( (Hatch)arg1) -> HatchObjectType :

    C++ signature :
        enum AcDbHatch::HatchObjectType hatchObjectType(class PyDbHatch {lvalue})'''
    ...
    def hatchStyle (self, *args, **kwargs)-> HatchStyle :
      '''hatchStyle( (Hatch)arg1) -> HatchStyle :

    C++ signature :
        enum AcDbHatch::HatchStyle hatchStyle(class PyDbHatch {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def insertLoopAt (self, *args, **kwargs)-> None :
      '''insertLoopAt( (Hatch)arg1, (int)arg2, (int)arg3, (list)arg4) -> None :

    C++ signature :
        void insertLoopAt(class PyDbHatch {lvalue},int,int,class boost::python::list)'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isGradient (self, *args, **kwargs)-> bool :
      '''isGradient( (Hatch)arg1) -> bool :

    C++ signature :
        bool isGradient(class PyDbHatch {lvalue})'''
    ...
    def isHatch (self, *args, **kwargs)-> bool :
      '''isHatch( (Hatch)arg1) -> bool :

    C++ signature :
        bool isHatch(class PyDbHatch {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSolidFill (self, *args, **kwargs)-> bool :
      '''isSolidFill( (Hatch)arg1) -> bool :

    C++ signature :
        bool isSolidFill(class PyDbHatch {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineGenerationEnabled (self, *args, **kwargs)-> bool :
      '''lineGenerationEnabled( (Hatch)arg1) -> bool :

    C++ signature :
        bool lineGenerationEnabled(class PyDbHatch {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Hatch)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbHatch {lvalue})'''
    ...
    def numHatchLines (self, *args, **kwargs)-> int :
      '''numHatchLines( (Hatch)arg1) -> int :

    C++ signature :
        int numHatchLines(class PyDbHatch {lvalue})'''
    ...
    def numLoops (self, *args, **kwargs)-> int :
      '''numLoops( (Hatch)arg1) -> int :

    C++ signature :
        int numLoops(class PyDbHatch {lvalue})'''
    ...
    def numPatternDefinitions (self, *args, **kwargs)-> int :
      '''numPatternDefinitions( (Hatch)arg1) -> int :

    C++ signature :
        int numPatternDefinitions(class PyDbHatch {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def originPoint (self, *args, **kwargs)-> Point2d :
      '''originPoint( (Hatch)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d originPoint(class PyDbHatch {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def patternAngle (self, *args, **kwargs)-> float :
      '''patternAngle( (Hatch)arg1) -> float :

    C++ signature :
        double patternAngle(class PyDbHatch {lvalue})'''
    ...
    def patternDouble (self, *args, **kwargs)-> bool :
      '''patternDouble( (Hatch)arg1) -> bool :

    C++ signature :
        bool patternDouble(class PyDbHatch {lvalue})'''
    ...
    def patternName (self, *args, **kwargs)-> str :
      '''patternName( (Hatch)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > patternName(class PyDbHatch {lvalue})'''
    ...
    def patternScale (self, *args, **kwargs)-> float :
      '''patternScale( (Hatch)arg1) -> float :

    C++ signature :
        double patternScale(class PyDbHatch {lvalue})'''
    ...
    def patternSpace (self, *args, **kwargs)-> float :
      '''patternSpace( (Hatch)arg1) -> float :

    C++ signature :
        double patternSpace(class PyDbHatch {lvalue})'''
    ...
    def patternType (self, *args, **kwargs)-> HatchPatternType :
      '''patternType( (Hatch)arg1) -> HatchPatternType :

    C++ signature :
        enum AcDbHatch::HatchPatternType patternType(class PyDbHatch {lvalue})'''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeAssocObjIds (self, *args, **kwargs)-> None :
      '''removeAssocObjIds( (Hatch)arg1) -> None :

    C++ signature :
        void removeAssocObjIds(class PyDbHatch {lvalue})'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeHatchLines (self, *args, **kwargs)-> None :
      '''removeHatchLines( (Hatch)arg1) -> None :

    C++ signature :
        void removeHatchLines(class PyDbHatch {lvalue})'''
    ...
    def removeLoopAt (self, *args, **kwargs)-> None :
      '''removeLoopAt( (Hatch)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLoopAt(class PyDbHatch {lvalue},int)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAssociative (self, *args, **kwargs)-> None :
      '''setAssociative( (Hatch)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAssociative(class PyDbHatch {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''setBackgroundColor( (Hatch)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbHatch {lvalue},class AcCmColor)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbHatch {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setGradient (self, *args, **kwargs)-> None :
      '''setGradient( (Hatch)arg1, (HatchGradientPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setGradient(class PyDbHatch {lvalue},enum AcDbHatch::GradientPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGradientAngle (self, *args, **kwargs)-> None :
      '''setGradientAngle( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setGradientAngle(class PyDbHatch {lvalue},double)'''
    ...
    def setGradientColors (self, *args, **kwargs)-> None :
      '''setGradientColors( (Hatch)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void setGradientColors(class PyDbHatch {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def setGradientOneColorMode (self, *args, **kwargs)-> None :
      '''setGradientOneColorMode( (Hatch)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGradientOneColorMode(class PyDbHatch {lvalue},bool)'''
    ...
    def setGradientShift (self, *args, **kwargs)-> None :
      '''setGradientShift( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setGradientShift(class PyDbHatch {lvalue},float)'''
    ...
    def setHatchObjectType (self, *args, **kwargs)-> None :
      '''setHatchObjectType( (Hatch)arg1, (HatchObjectType)arg2) -> None :

    C++ signature :
        void setHatchObjectType(class PyDbHatch {lvalue},enum AcDbHatch::HatchObjectType)'''
    ...
    def setHatchStyle (self, *args, **kwargs)-> None :
      '''setHatchStyle( (Hatch)arg1, (HatchStyle)arg2) -> None :

    C++ signature :
        void setHatchStyle(class PyDbHatch {lvalue},enum AcDbHatch::HatchStyle)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineGenerationEnabled (self, *args, **kwargs)-> bool :
      '''setLineGenerationEnabled( (Hatch)arg1, (bool)arg2) -> bool :

    C++ signature :
        bool setLineGenerationEnabled(class PyDbHatch {lvalue},bool)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Hatch)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbHatch {lvalue},class AcGeVector3d)'''
    ...
    def setOriginPoint (self, *args, **kwargs)-> None :
      '''setOriginPoint( (Hatch)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setOriginPoint(class PyDbHatch {lvalue},class AcGePoint2d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPattern (self, *args, **kwargs)-> None :
      '''setPattern( (Hatch)arg1, (HatchPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setPattern(class PyDbHatch {lvalue},enum AcDbHatch::HatchPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPatternAngle (self, *args, **kwargs)-> None :
      '''setPatternAngle( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternAngle(class PyDbHatch {lvalue},double)'''
    ...
    def setPatternDouble (self, *args, **kwargs)-> None :
      '''setPatternDouble( (Hatch)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPatternDouble(class PyDbHatch {lvalue},bool)'''
    ...
    def setPatternScale (self, *args, **kwargs)-> None :
      '''setPatternScale( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternScale(class PyDbHatch {lvalue},double)'''
    ...
    def setPatternSpace (self, *args, **kwargs)-> None :
      '''setPatternSpace( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternSpace(class PyDbHatch {lvalue},double)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShadeTintValue (self, *args, **kwargs)-> None :
      '''setShadeTintValue( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setShadeTintValue(class PyDbHatch {lvalue},float)'''
    ...
    def setShadeTintValueAndColor2 (self, *args, **kwargs)-> None :
      '''setShadeTintValueAndColor2( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setShadeTintValueAndColor2(class PyDbHatch {lvalue},float)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class HatchEdgeType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCirArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEllArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSpline (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchGradientPatternType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kPreDefinedGradient (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUserDefinedGradient (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchLoopType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDerived (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoesNotSupportScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDuplicate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExternal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForceAnnoAllVisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIsAnnotative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIsAnnotativeBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNotClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOrientToPaper (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOutermost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPolyline (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSelfIntersecting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextIsland (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextbox (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchObjectType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGradientObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHatchObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchPatternType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCustomDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUserDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kIgnore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOuter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HostApplicationServices:
    def LayoutManager (self, *args, **kwargs)-> LayoutManager :
      '''LayoutManager( (HostApplicationServices)arg1) -> LayoutManager :

    C++ signature :
        class PyDbLayoutManager LayoutManager(class PyDbHostApplicationServices {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def findFile (self, *args, **kwargs)-> str :
      '''findFile( (HostApplicationServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3, (FindFileHint)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase,enum AcDbHostApplicationServices::FindFileHint)'''
    ...
    def product (self, *args, **kwargs)-> str :
      '''product( (HostApplicationServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > product(class PyDbHostApplicationServices {lvalue})'''
    ...
    def setWorkingDatabase (self, *args, **kwargs)-> None :
      '''setWorkingDatabase( (HostApplicationServices)arg1, (Database)arg2) -> None :

    C++ signature :
        void setWorkingDatabase(class PyDbHostApplicationServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def workingDatabase (self, *args, **kwargs)-> Database :
      '''workingDatabase( (HostApplicationServices)arg1) -> Database :

    C++ signature :
        class PyDbDatabase workingDatabase(class PyDbHostApplicationServices {lvalue})'''
    ...

class IdMapping:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

class Image:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Image :
      '''cast( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Image :
      '''cloneFrom( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ImageDisplayOpt:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShowUnAligned (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTransparent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ImageUnits:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAngstroms (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAstronomical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCentimeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDecimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDekameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFoot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGigameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHectometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKilometer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLightYears (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMicroinches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMicrons (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMillimeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMils (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNanometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kParsecs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kYard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Intersect:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kExtendArg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendBoth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendThis (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnBothOperands (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class JoinStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kJnStylAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylFlat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LayerTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (LayerTable)arg1, (LayerTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLayerTable {lvalue},class PyDbLayerTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LayerTable :
      '''cast( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LayerTable :
      '''cloneFrom( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class LayerTableRecord:
    def VPDFLT (self, *args, **kwargs)-> bool :
      '''VPDFLT( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool VPDFLT(class PyDbLayerTableRecord {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LayerTableRecord :
      '''cast( (RxObject)arg1) -> LayerTableRecord :

    C++ signature :
        class PyDbLayerTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LayerTableRecord :
      '''cloneFrom( (RxObject)arg1) -> LayerTableRecord :

    C++ signature :
        class PyDbLayerTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (LayerTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue})

color( (LayerTableRecord)arg1, (ObjectId)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbLayerTableRecord {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (LayerTableRecord)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbLayerTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAnyOverrides (self, *args, **kwargs)-> bool :
      '''hasAnyOverrides( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAnyOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasOverrides (self, *args, **kwargs)-> bool :
      '''hasOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFrozen (self, *args, **kwargs)-> bool :
      '''isFrozen( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isFrozen(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isHidden (self, *args, **kwargs)-> bool :
      '''isHidden( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbLayerTableRecord {lvalue})

isHidden( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbObjectId)'''
    ...
    def isInUse (self, *args, **kwargs)-> bool :
      '''isInUse( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isInUse(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isLocked (self, *args, **kwargs)-> bool :
      '''isLocked( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isLocked(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOff (self, *args, **kwargs)-> bool :
      '''isOff( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isOff(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlottable (self, *args, **kwargs)-> bool :
      '''isPlottable( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isPlottable(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReconciled (self, *args, **kwargs)-> bool :
      '''isReconciled( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbLayerTableRecord {lvalue})

isReconciled( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbObjectId)'''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (LayerTableRecord)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue})

lineWeight( (LayerTableRecord)arg1, (ObjectId)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def linetypeObjectId (self, *args, **kwargs)-> ObjectId :
      '''linetypeObjectId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeObjectId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue})

plotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def plotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''plotStyleNameId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue})

plotStyleNameId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> None :
      '''removeAllOverrides( (LayerTableRecord)arg1) -> None :

    C++ signature :
        void removeAllOverrides(class PyDbLayerTableRecord {lvalue})

removeAllOverrides( (LayerTableRecord)arg1) -> None :

    C++ signature :
        void removeAllOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def removeColorOverride (self, *args, **kwargs)-> None :
      '''removeColorOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeColorOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLineWeightOverride (self, *args, **kwargs)-> None :
      '''removeLineWeightOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLineWeightOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLinetypeOverride (self, *args, **kwargs)-> None :
      '''removeLinetypeOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLinetypeOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removePlotStyleOverride (self, *args, **kwargs)-> None :
      '''removePlotStyleOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removePlotStyleOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeTransparencyOverride (self, *args, **kwargs)-> None :
      '''removeTransparencyOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeTransparencyOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeViewportOverrides (self, *args, **kwargs)-> None :
      '''removeViewportOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeViewportOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (LayerTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor)

setColor( (LayerTableRecord)arg1, (Color)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor,class PyDbObjectId)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsFrozen (self, *args, **kwargs)-> None :
      '''setIsFrozen( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsFrozen(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsHidden (self, *args, **kwargs)-> None :
      '''setIsHidden( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsHidden(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsLocked (self, *args, **kwargs)-> None :
      '''setIsLocked( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsLocked(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsOff (self, *args, **kwargs)-> None :
      '''setIsOff( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOff(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsPlottable (self, *args, **kwargs)-> None :
      '''setIsPlottable( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPlottable(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> None :
      '''setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight)

setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight,class PyDbObjectId)'''
    ...
    def setLinetypeObjectId (self, *args, **kwargs)-> None :
      '''setLinetypeObjectId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLinetypeObjectId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setMaterialId (self, *args, **kwargs)-> None :
      '''setMaterialId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMaterialId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId,class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (str)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def setTransparency (self, *args, **kwargs)-> None :
      '''setTransparency( (LayerTableRecord)arg1, (Transparency)arg2) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency)

setTransparency( (LayerTableRecord)arg1, (Transparency)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency,class PyDbObjectId)'''
    ...
    def setVPDFLT (self, *args, **kwargs)-> None :
      '''setVPDFLT( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVPDFLT(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transparency (self, *args, **kwargs)-> Transparency :
      '''transparency( (LayerTableRecord)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue})

transparency( (LayerTableRecord)arg1, (ObjectId)arg2) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Layout:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def addToLayoutDict (self, *args, **kwargs)-> None :
      '''addToLayoutDict( (Layout)arg1, (Database)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void addToLayoutDict(class PyDbLayout {lvalue},class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> None :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> None :

    C++ signature :
        void addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def annoAllVisible (self, *args, **kwargs)-> bool :
      '''annoAllVisible( (Layout)arg1) -> bool :

    C++ signature :
        bool annoAllVisible(class PyDbLayout {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Layout :
      '''cast( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Layout :
      '''cloneFrom( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBlockTableRecordId (self, *args, **kwargs)-> ObjectId :
      '''getBlockTableRecordId( (Layout)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getBlockTableRecordId(class PyDbLayout {lvalue})'''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getExtents (self, *args, **kwargs)-> tuple :
      '''getExtents( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getExtents(class PyDbLayout {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayoutName (self, *args, **kwargs)-> str :
      '''getLayoutName( (Layout)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayoutName(class PyDbLayout {lvalue})'''
    ...
    def getLimits (self, *args, **kwargs)-> tuple :
      '''getLimits( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getLimits(class PyDbLayout {lvalue})'''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getTabOrder (self, *args, **kwargs)-> int :
      '''getTabOrder( (Layout)arg1) -> int :

    C++ signature :
        int getTabOrder(class PyDbLayout {lvalue})'''
    ...
    def getTabSelected (self, *args, **kwargs)-> bool :
      '''getTabSelected( (Layout)arg1) -> bool :

    C++ signature :
        bool getTabSelected(class PyDbLayout {lvalue})'''
    ...
    def getViewportArray (self, *args, **kwargs)-> list :
      '''getViewportArray( (Layout)arg1) -> list :

    C++ signature :
        class boost::python::list getViewportArray(class PyDbLayout {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def initialize (self, *args, **kwargs)-> None :
      '''initialize( (Layout)arg1) -> None :

    C++ signature :
        void initialize(class PyDbLayout {lvalue})

initialize( (Layout)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void initialize(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setAnnoAllVisible (self, *args, **kwargs)-> None :
      '''setAnnoAllVisible( (Layout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAnnoAllVisible(class PyDbLayout {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> None :
      '''setBlockTableRecordId( (Layout)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayoutName (self, *args, **kwargs)-> None :
      '''setLayoutName( (Layout)arg1, (str)arg2) -> None :

    C++ signature :
        void setLayoutName(class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> None :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> None :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> None :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> None :

    C++ signature :
        void setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setTabOrder (self, *args, **kwargs)-> None :
      '''setTabOrder( (Layout)arg1, (int)arg2) -> None :

    C++ signature :
        void setTabOrder(class PyDbLayout {lvalue},int)'''
    ...
    def setTabSelected (self, *args, **kwargs)-> None :
      '''setTabSelected( (Layout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTabSelected(class PyDbLayout {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def stdScaleType (self, *args, **kwargs)-> StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class LayoutManager:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> None :
      '''clearSetupForLayouts( (int)arg1) -> None :

    C++ signature :
        void clearSetupForLayouts(unsigned __int64)'''
    ...
    def cloneLayout (self, *args, **kwargs)-> None :
      '''cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3, (int)arg4, (Database)arg5) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,class PyDbDatabase {lvalue})'''
    ...
    def copyLayout (self, *args, **kwargs)-> None :
      '''copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def countLayouts (self, *args, **kwargs)-> int :
      '''countLayouts( (LayoutManager)arg1) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue})

countLayouts( (LayoutManager)arg1, (Database)arg2) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def createLayout (self, *args, **kwargs)-> None :
      '''createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue})

createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4, (Database)arg5) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def deleteLayout (self, *args, **kwargs)-> None :
      '''deleteLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

deleteLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def findLayoutNamed (self, *args, **kwargs)-> ObjectId :
      '''findLayoutNamed( (LayoutManager)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findLayoutNamed( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getActiveLayoutBTRId (self, *args, **kwargs)-> ObjectId :
      '''getActiveLayoutBTRId( (LayoutManager)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue})

getActiveLayoutBTRId( (LayoutManager)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue},class PyDbDatabase)'''
    ...
    def getActiveLayoutName (self, *args, **kwargs)-> str :
      '''getActiveLayoutName( (LayoutManager)arg1, (bool)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool)

getActiveLayoutName( (LayoutManager)arg1, (bool)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool,class PyDbDatabase {lvalue})'''
    ...
    def getNonRectVPIdFromClipId (self, *args, **kwargs)-> ObjectId :
      '''getNonRectVPIdFromClipId( (LayoutManager)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getNonRectVPIdFromClipId(class PyDbLayoutManager {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isVpnumClipped (self, *args, **kwargs)-> bool :
      '''isVpnumClipped( (LayoutManager)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int)

isVpnumClipped( (LayoutManager)arg1, (int)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int,class PyDbDatabase)'''
    ...
    def layoutExists (self, *args, **kwargs)-> bool :
      '''layoutExists( (LayoutManager)arg1, (str)arg2) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

layoutExists( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def renameLayout (self, *args, **kwargs)-> None :
      '''renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayout (self, *args, **kwargs)-> None :
      '''setCurrentLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setCurrentLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayoutId (self, *args, **kwargs)-> None :
      '''setCurrentLayoutId( (LayoutManager)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setCurrentLayoutId(class PyDbLayoutManager {lvalue},class PyDbObjectId)'''
    ...
    def setupForLayouts (self, *args, **kwargs)-> int :
      '''setupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 setupForLayouts(class PyDbDatabase {lvalue})'''
    ...

class Leader:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def annoHeight (self, *args, **kwargs)-> float :
      '''annoHeight( (Leader)arg1) -> float :

    C++ signature :
        double annoHeight(class PyDbLeader {lvalue})'''
    ...
    def annoType (self, *args, **kwargs)-> AnnoType :
      '''annoType( (Leader)arg1) -> AnnoType :

    C++ signature :
        enum AcDbLeader::AnnoType annoType(class PyDbLeader {lvalue})'''
    ...
    def annoWidth (self, *args, **kwargs)-> float :
      '''annoWidth( (Leader)arg1) -> float :

    C++ signature :
        double annoWidth(class PyDbLeader {lvalue})'''
    ...
    def annotationObjId (self, *args, **kwargs)-> ObjectId :
      '''annotationObjId( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId annotationObjId(class PyDbLeader {lvalue})'''
    ...
    def annotationOffset (self, *args, **kwargs)-> Vector3d :
      '''annotationOffset( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d annotationOffset(class PyDbLeader {lvalue})'''
    ...
    def appendVertex (self, *args, **kwargs)-> bool :
      '''appendVertex( (Leader)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool appendVertex(class PyDbLeader {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachAnnotation (self, *args, **kwargs)-> None :
      '''attachAnnotation( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void attachAnnotation(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Leader :
      '''cast( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Leader :
      '''cloneFrom( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Leader)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbLeader {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def detachAnnotation (self, *args, **kwargs)-> None :
      '''detachAnnotation( (Leader)arg1) -> None :

    C++ signature :
        void detachAnnotation(class PyDbLeader {lvalue})'''
    ...
    def dimasz (self, *args, **kwargs)-> float :
      '''dimasz( (Leader)arg1) -> float :

    C++ signature :
        double dimasz(class PyDbLeader {lvalue})'''
    ...
    def dimclrd (self, *args, **kwargs)-> Color :
      '''dimclrd( (Leader)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbLeader {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> object :
      '''dimensionStyle( (Leader)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbLeader {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs)-> float :
      '''dimgap( (Leader)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbLeader {lvalue})'''
    ...
    def dimlwd (self, *args, **kwargs)-> LineWeight :
      '''dimlwd( (Leader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight dimlwd(class PyDbLeader {lvalue})'''
    ...
    def dimsah (self, *args, **kwargs)-> bool :
      '''dimsah( (Leader)arg1) -> bool :

    C++ signature :
        bool dimsah(class PyDbLeader {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs)-> float :
      '''dimscale( (Leader)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbLeader {lvalue})'''
    ...
    def dimtad (self, *args, **kwargs)-> int :
      '''dimtad( (Leader)arg1) -> int :

    C++ signature :
        int dimtad(class PyDbLeader {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs)-> ObjectId :
      '''dimtxsty( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbLeader {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs)-> float :
      '''dimtxt( (Leader)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbLeader {lvalue})'''
    ...
    def disableArrowHead (self, *args, **kwargs)-> None :
      '''disableArrowHead( (Leader)arg1) -> None :

    C++ signature :
        void disableArrowHead(class PyDbLeader {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject)

erased( (Leader)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject,bool)'''
    ...
    def evaluateLeader (self, *args, **kwargs)-> None :
      '''evaluateLeader( (Leader)arg1) -> None :

    C++ signature :
        void evaluateLeader(class PyDbLeader {lvalue})'''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def firstVertex (self, *args, **kwargs)-> Point3d :
      '''firstVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d firstVertex(class PyDbLeader {lvalue})'''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def goodbye (self, *args, **kwargs)-> None :
      '''goodbye( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void goodbye(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasArrowHead (self, *args, **kwargs)-> bool :
      '''hasArrowHead( (Leader)arg1) -> bool :

    C++ signature :
        bool hasArrowHead(class PyDbLeader {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasHookLine (self, *args, **kwargs)-> bool :
      '''hasHookLine( (Leader)arg1) -> bool :

    C++ signature :
        bool hasHookLine(class PyDbLeader {lvalue})'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSplined (self, *args, **kwargs)-> bool :
      '''isSplined( (Leader)arg1) -> bool :

    C++ signature :
        bool isSplined(class PyDbLeader {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lastVertex (self, *args, **kwargs)-> Point3d :
      '''lastVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d lastVertex(class PyDbLeader {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (Leader)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbLeader {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (Leader)arg1) -> None :

    C++ signature :
        void removeLastVertex(class PyDbLeader {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAnnotationObjId (self, *args, **kwargs)-> None :
      '''setAnnotationObjId( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setAnnotationObjId(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setAnnotationOffset (self, *args, **kwargs)-> None :
      '''setAnnotationOffset( (Leader)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setAnnotationOffset(class PyDbLeader {lvalue},class AcGeVector3d)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self, *args, **kwargs)-> None :
      '''setColorIndex( (Leader)arg1, (int)arg2) -> None :

    C++ signature :
        void setColorIndex(class PyDbLeader {lvalue},unsigned short)

setColorIndex( (Leader)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setColorIndex(class PyDbLeader {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimasz (self, *args, **kwargs)-> None :
      '''setDimasz( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimasz(class PyDbLeader {lvalue},double)'''
    ...
    def setDimclrd (self, *args, **kwargs)-> None :
      '''setDimclrd( (Leader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setDimclrd(class PyDbLeader {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Leader)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbLeader {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs)-> None :
      '''setDimgap( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimgap(class PyDbLeader {lvalue},double)'''
    ...
    def setDimldrblk (self, *args, **kwargs)-> None :
      '''setDimldrblk( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimldrblk(class PyDbLeader {lvalue},class PyDbObjectId)

setDimldrblk( (Leader)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimldrblk(class PyDbLeader {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimlwd (self, *args, **kwargs)-> None :
      '''setDimlwd( (Leader)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setDimlwd(class PyDbLeader {lvalue},enum AcDb::LineWeight)'''
    ...
    def setDimsah (self, *args, **kwargs)-> None :
      '''setDimsah( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDimsah(class PyDbLeader {lvalue},bool)'''
    ...
    def setDimscale (self, *args, **kwargs)-> None :
      '''setDimscale( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimscale(class PyDbLeader {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtad (self, *args, **kwargs)-> None :
      '''setDimtad( (Leader)arg1, (int)arg2) -> None :

    C++ signature :
        void setDimtad(class PyDbLeader {lvalue},int)'''
    ...
    def setDimtxsty (self, *args, **kwargs)-> None :
      '''setDimtxsty( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimtxsty(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxt (self, *args, **kwargs)-> None :
      '''setDimtxt( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimtxt(class PyDbLeader {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setHasArrowHead (self, *args, **kwargs)-> None :
      '''setHasArrowHead( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasArrowHead(class PyDbLeader {lvalue},bool)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (Leader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setSplined (self, *args, **kwargs)-> None :
      '''setSplined( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSplined(class PyDbLeader {lvalue},bool)'''
    ...
    def setToSplineLeader (self, *args, **kwargs)-> None :
      '''setToSplineLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToSplineLeader(class PyDbLeader {lvalue})'''
    ...
    def setToStraightLeader (self, *args, **kwargs)-> None :
      '''setToStraightLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToStraightLeader(class PyDbLeader {lvalue})'''
    ...
    def setVertexAt (self, *args, **kwargs)-> bool :
      '''setVertexAt( (Leader)arg1, (int)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool setVertexAt(class PyDbLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexAt (self, *args, **kwargs)-> Point3d :
      '''vertexAt( (Leader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbLeader {lvalue},int)'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Line:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Line :
      '''cast( (RxObject)arg1) -> Line :

    C++ signature :
        class PyDbLine cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Line :
      '''cloneFrom( (RxObject)arg1) -> Line :

    C++ signature :
        class PyDbLine cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def endPoint (self, *args, **kwargs)-> Point3d :
      '''endPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d endPoint(class PyDbLine {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Line)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbLine {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Line)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLine {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndPoint (self, *args, **kwargs)-> None :
      '''setEndPoint( (Line)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setEndPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Line)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbLine {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartPoint (self, *args, **kwargs)-> None :
      '''setStartPoint( (Line)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setStartPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Line)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbLine {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def startPoint (self, *args, **kwargs)-> Point3d :
      '''startPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d startPoint(class PyDbLine {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Line)arg1) -> float :

    C++ signature :
        double thickness(class PyDbLine {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class LineAngularDimension2:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LineAngularDimension2 :
      '''cast( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LineAngularDimension2 :
      '''cloneFrom( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (LineAngularDimension2)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs)-> None :
      '''setExtArcOn( (LineAngularDimension2)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtArcOn(class PyDb2LineAngularDimension {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1End (self, *args, **kwargs)-> None :
      '''setXLine1End( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine1Start (self, *args, **kwargs)-> None :
      '''setXLine1Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2End (self, *args, **kwargs)-> None :
      '''setXLine2End( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Start (self, *args, **kwargs)-> None :
      '''setXLine2Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xLine1End (self, *args, **kwargs)-> Point3d :
      '''xLine1End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine1Start (self, *args, **kwargs)-> Point3d :
      '''xLine1Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Start(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2End (self, *args, **kwargs)-> Point3d :
      '''xLine2End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2Start (self, *args, **kwargs)-> Point3d :
      '''xLine2Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Start(class PyDb2LineAngularDimension {lvalue})'''
    ...

class LineSpacingStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAtLeast (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExactly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LineWeight:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLnWt000 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt005 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt009 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt013 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt015 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt018 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt020 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt025 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt030 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt035 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt040 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt050 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt053 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt060 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt070 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt080 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt090 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt106 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt120 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt140 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt158 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt200 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt211 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByLwDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LinetypeTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (LinetypeTable)arg1, (LinetypeTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLinetypeTable {lvalue},class PyDbLinetypeTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LinetypeTable :
      '''cast( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LinetypeTable :
      '''cloneFrom( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class LinetypeTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LinetypeTableRecord :
      '''cast( (RxObject)arg1) -> LinetypeTableRecord :

    C++ signature :
        class PyDbLinetypeTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LinetypeTableRecord :
      '''cloneFrom( (RxObject)arg1) -> LinetypeTableRecord :

    C++ signature :
        class PyDbLinetypeTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def comments (self, *args, **kwargs)-> str :
      '''comments( (LinetypeTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > comments(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def dashLengthAt (self, *args, **kwargs)-> float :
      '''dashLengthAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double dashLengthAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isScaledToFit (self, *args, **kwargs)-> bool :
      '''isScaledToFit( (LinetypeTableRecord)arg1) -> bool :

    C++ signature :
        bool isScaledToFit(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def numDashes (self, *args, **kwargs)-> int :
      '''numDashes( (LinetypeTableRecord)arg1) -> int :

    C++ signature :
        int numDashes(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def patternLength (self, *args, **kwargs)-> float :
      '''patternLength( (LinetypeTableRecord)arg1) -> float :

    C++ signature :
        double patternLength(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setComments (self, *args, **kwargs)-> None :
      '''setComments( (LinetypeTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setComments(class PyDbLinetypeTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDashLengthAt (self, *args, **kwargs)-> None :
      '''setDashLengthAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDashLengthAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsScaledToFit (self, *args, **kwargs)-> None :
      '''setIsScaledToFit( (LinetypeTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsScaledToFit(class PyDbLinetypeTableRecord {lvalue},bool)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setNumDashes (self, *args, **kwargs)-> None :
      '''setNumDashes( (LinetypeTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setNumDashes(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPatternLength (self, *args, **kwargs)-> None :
      '''setPatternLength( (LinetypeTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternLength(class PyDbLinetypeTableRecord {lvalue},double)'''
    ...
    def setShapeIsUcsOrientedAt (self, *args, **kwargs)-> None :
      '''setShapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeIsUprightAt (self, *args, **kwargs)-> None :
      '''setShapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeNumberAt (self, *args, **kwargs)-> None :
      '''setShapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setShapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int,int)'''
    ...
    def setShapeOffsetAt (self, *args, **kwargs)-> None :
      '''setShapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2, (Vector2d)arg3) -> None :

    C++ signature :
        void setShapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int,class AcGeVector2d)'''
    ...
    def setShapeRotationAt (self, *args, **kwargs)-> None :
      '''setShapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeScaleAt (self, *args, **kwargs)-> None :
      '''setShapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeStyleAt (self, *args, **kwargs)-> None :
      '''setShapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int,class PyDbObjectId {lvalue})'''
    ...
    def setTextAt (self, *args, **kwargs)-> None :
      '''setTextAt( (LinetypeTableRecord)arg1, (int)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextAt(class PyDbLinetypeTableRecord {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shapeIsUcsOrientedAt (self, *args, **kwargs)-> bool :
      '''shapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeIsUprightAt (self, *args, **kwargs)-> bool :
      '''shapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeNumberAt (self, *args, **kwargs)-> int :
      '''shapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2) -> int :

    C++ signature :
        int shapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeOffsetAt (self, *args, **kwargs)-> Vector2d :
      '''shapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d shapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeRotationAt (self, *args, **kwargs)-> float :
      '''shapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeScaleAt (self, *args, **kwargs)-> float :
      '''shapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeStyleAt (self, *args, **kwargs)-> ObjectId :
      '''shapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId shapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAt (self, *args, **kwargs)-> str :
      '''textAt( (LinetypeTableRecord)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class LoftedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LoftedSurface :
      '''cast( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LoftedSurface :
      '''cloneFrom( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MInsertBlock:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3, (int)arg4, (int)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId,unsigned short,unsigned short,double,double)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MInsertBlock :
      '''cast( (RxObject)arg1) -> MInsertBlock :

    C++ signature :
        class PyDbMInsertBlock cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MInsertBlock :
      '''cloneFrom( (RxObject)arg1) -> MInsertBlock :

    C++ signature :
        class PyDbMInsertBlock cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def columnSpacing (self, *args, **kwargs)-> float :
      '''columnSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double columnSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def columns (self, *args, **kwargs)-> int :
      '''columns( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short columns(class PyDbMInsertBlock {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> None :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> None :

    C++ signature :
        void explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def rowSpacing (self, *args, **kwargs)-> float :
      '''rowSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double rowSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def rows (self, *args, **kwargs)-> int :
      '''rows( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short rows(class PyDbMInsertBlock {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> None :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> None :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setColumnSpacing (self, *args, **kwargs)-> None :
      '''setColumnSpacing( (MInsertBlock)arg1, (float)arg2) -> None :

    C++ signature :
        void setColumnSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setColumns (self, *args, **kwargs)-> None :
      '''setColumns( (MInsertBlock)arg1, (int)arg2) -> None :

    C++ signature :
        void setColumns(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (BlockReference)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (BlockReference)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (BlockReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setRowSpacing (self, *args, **kwargs)-> None :
      '''setRowSpacing( (MInsertBlock)arg1, (float)arg2) -> None :

    C++ signature :
        void setRowSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setRows (self, *args, **kwargs)-> None :
      '''setRows( (MInsertBlock)arg1, (int)arg2) -> None :

    C++ signature :
        void setRows(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> None :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MLeader:
    def MLeaderStyle (self, *args, **kwargs)-> ObjectId :
      '''MLeaderStyle( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId MLeaderStyle(class PyDbMLeader {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addFirstVertex (self, *args, **kwargs)-> None :
      '''addFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLastVertex (self, *args, **kwargs)-> None :
      '''addLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLeader (self, *args, **kwargs)-> int :
      '''addLeader( (MLeader)arg1) -> int :

    C++ signature :
        int addLeader(class PyDbMLeader {lvalue})'''
    ...
    def addLeaderLine (self, *args, **kwargs)-> int :
      '''addLeaderLine( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},int)

addLeaderLine( (MLeader)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeader)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeader {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''arrowSymbolId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeader {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockColor (self, *args, **kwargs)-> Color :
      '''blockColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeader {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeader)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeader {lvalue})'''
    ...
    def blockContentId (self, *args, **kwargs)-> ObjectId :
      '''blockContentId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockContentId(class PyDbMLeader {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeader)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeader {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> Scale3d :
      '''blockScale( (MLeader)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeader {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MLeader :
      '''cast( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MLeader :
      '''cloneFrom( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def connectionPoint (self, *args, **kwargs)-> Point3d :
      '''connectionPoint( (MLeader)arg1, (Vector3d)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d)

connectionPoint( (MLeader)arg1, (Vector3d)arg2, (MLeaderTextAttachmentDirection)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def contentType (self, *args, **kwargs)-> MLeaderContentType :
      '''contentType( (MLeader)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeader {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeader)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeader {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def enableAnnotationScale (self, *args, **kwargs)-> bool :
      '''enableAnnotationScale( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableAnnotationScale(class PyDbMLeader {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeader {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeader {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeader {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeader)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeader {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArrowSize (self, *args, **kwargs)-> float :
      '''getArrowSize( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getArrowSize(class PyDbMLeader {lvalue},int)'''
    ...
    def getArrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''getArrowSymbolId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getArrowSymbolId(class PyDbMLeader {lvalue},int)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> AttributeReference :
      '''getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> AttributeReference :

    C++ signature :
        class PyDbAttribute getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)

getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def getBlockPosition (self, *args, **kwargs)-> Point3d :
      '''getBlockPosition( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getBlockPosition(class PyDbMLeader {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getContentGeomExtents (self, *args, **kwargs)-> Extents :
      '''getContentGeomExtents( (MLeader)arg1) -> Extents :

    C++ signature :
        class AcDbExtents getContentGeomExtents(class PyDbMLeader {lvalue})'''
    ...
    def getDoglegDirection (self, *args, **kwargs)-> Vector3d :
      '''getDoglegDirection( (MLeader)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getDoglegDirection(class PyDbMLeader {lvalue},int)'''
    ...
    def getDoglegLength (self, *args, **kwargs)-> float :
      '''getDoglegLength( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getDoglegLength(class PyDbMLeader {lvalue},int)'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstVertex (self, *args, **kwargs)-> Point3d :
      '''getFirstVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLastVertex (self, *args, **kwargs)-> Point3d :
      '''getLastVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndex (self, *args, **kwargs)-> int :
      '''getLeaderIndex( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int getLeaderIndex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndexes (self, *args, **kwargs)-> list :
      '''getLeaderIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderIndexes(class PyDbMLeader {lvalue})'''
    ...
    def getLeaderLineColor (self, *args, **kwargs)-> Color :
      '''getLeaderLineColor( (MLeader)arg1, (int)arg2) -> Color :

    C++ signature :
        class AcCmColor getLeaderLineColor(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineIndexes (self, *args, **kwargs)-> list :
      '''getLeaderLineIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue})

getLeaderLineIndexes( (MLeader)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''getLeaderLineType( (MLeader)arg1, (int)arg2) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType getLeaderLineType(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''getLeaderLineTypeId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLeaderLineTypeId(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''getLeaderLineWeight( (MLeader)arg1, (int)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getLeaderLineWeight(class PyDbMLeader {lvalue},int)'''
    ...
    def getOverridedMLeaderStyle (self, *args, **kwargs)-> None :
      '''getOverridedMLeaderStyle( (MLeader)arg1, (MLeaderStyle)arg2) -> None :

    C++ signature :
        void getOverridedMLeaderStyle(class PyDbMLeader {lvalue},class PyDbMLeaderStyle {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getTextLocation (self, *args, **kwargs)-> Point3d :
      '''getTextLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getTextLocation(class PyDbMLeader {lvalue})'''
    ...
    def getToleranceLocation (self, *args, **kwargs)-> Point3d :
      '''getToleranceLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getToleranceLocation(class PyDbMLeader {lvalue})'''
    ...
    def getVertex (self, *args, **kwargs)-> Point3d :
      '''getVertex( (MLeader)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertex(class PyDbMLeader {lvalue},int,int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasContent (self, *args, **kwargs)-> bool :
      '''hasContent( (MLeader)arg1) -> bool :

    C++ signature :
        bool hasContent(class PyDbMLeader {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOverride (self, *args, **kwargs)-> bool :
      '''isOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> bool :

    C++ signature :
        bool isOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeader)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeader {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def leaderLineColor (self, *args, **kwargs)-> Color :
      '''leaderLineColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''leaderLineType( (MLeader)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''leaderLineTypeId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''leaderLineWeight( (MLeader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeader {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (MLeader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbMLeader {lvalue},class PyDbObject)'''
    ...
    def moveMLeader (self, *args, **kwargs)-> None :
      '''moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType)

moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3, (bool)arg4) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType,bool)'''
    ...
    def mtext (self, *args, **kwargs)-> MText :
      '''mtext( (MLeader)arg1) -> MText :

    C++ signature :
        class PyDbMText mtext(class PyDbMLeader {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (MLeader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMLeader {lvalue})'''
    ...
    def numLeaderLines (self, *args, **kwargs)-> int :
      '''numLeaderLines( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaderLines(class PyDbMLeader {lvalue})'''
    ...
    def numLeaders (self, *args, **kwargs)-> int :
      '''numLeaders( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaders(class PyDbMLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int numVertices(class PyDbMLeader {lvalue},int)'''
    ...
    def objectClosed (self, *args, **kwargs)-> None :
      '''objectClosed( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void objectClosed(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plane (self, *args, **kwargs)-> Plane :
      '''plane( (MLeader)arg1) -> Plane :

    C++ signature :
        class PyGePlane plane(class PyDbMLeader {lvalue})'''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def postMLeaderToDb (self, *args, **kwargs)-> None :
      '''postMLeaderToDb( (MLeader)arg1, (Database)arg2) -> None :

    C++ signature :
        void postMLeaderToDb(class PyDbMLeader {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeBreakPoints (self, *args, **kwargs)-> None :
      '''recomputeBreakPoints( (MLeader)arg1) -> None :

    C++ signature :
        void recomputeBreakPoints(class PyDbMLeader {lvalue})'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeFirstVertex (self, *args, **kwargs)-> None :
      '''removeFirstVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeader (self, *args, **kwargs)-> None :
      '''removeLeader( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeader(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLine (self, *args, **kwargs)-> None :
      '''removeLeaderLine( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLine(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLineRefAssoc (self, *args, **kwargs)-> None :
      '''removeLeaderLineRefAssoc( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLineRefAssoc(class PyDbMLeader {lvalue},int)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeader)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeader {lvalue})'''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},double)

setArrowSize( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},class PyDbObjectId)

setArrowSymbolId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (AttributeReference)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class PyDbAttribute)

setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (str)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeader)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockContentId (self, *args, **kwargs)-> None :
      '''setBlockContentId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockContentId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setBlockPosition (self, *args, **kwargs)-> None :
      '''setBlockPosition( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBlockPosition(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeader {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeader)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeader {lvalue},class AcGeScale3d)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeader)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDoglegDirection (self, *args, **kwargs)-> None :
      '''setDoglegDirection( (MLeader)arg1, (int)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setDoglegDirection(class PyDbMLeader {lvalue},int,class AcGeVector3d)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},double)

setDoglegLength( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setEnableAnnotationScale (self, *args, **kwargs)-> None :
      '''setEnableAnnotationScale( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableAnnotationScale(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeader {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFirstVertex (self, *args, **kwargs)-> None :
      '''setFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeader {lvalue},double)'''
    ...
    def setLastVertex (self, *args, **kwargs)-> None :
      '''setLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLeaderLineColor1 (self, *args, **kwargs)-> None :
      '''setLeaderLineColor1( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},class AcCmColor)

setLeaderLineColor1( (MLeader)arg1, (int)arg2, (Color)arg3) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},int,class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeader)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderType)

setLeaderLineType( (MLeader)arg1, (int)arg2, (MLeaderLeaderType)arg3) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},int,enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},class PyDbObjectId)

setLeaderLineTypeId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setLeaderLineWeight1 (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight1( (MLeader)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},enum AcDb::LineWeight)

setLeaderLineWeight1( (MLeader)arg1, (int)arg2, (LineWeight)arg3) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},int,enum AcDb::LineWeight)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMLeaderStyle (self, *args, **kwargs)-> None :
      '''setMLeaderStyle( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMLeaderStyle(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setMText (self, *args, **kwargs)-> None :
      '''setMText( (MLeader)arg1, (MText)arg2) -> None :

    C++ signature :
        void setMText(class PyDbMLeader {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOverride (self, *args, **kwargs)-> None :
      '''setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)

setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (MLeader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbMLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeader)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeader)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeader)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType)

setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2, (MLeaderLeaderDirectionType)arg3) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType,enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextLocation (self, *args, **kwargs)-> None :
      '''setTextLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setToleranceLocation (self, *args, **kwargs)-> None :
      '''setToleranceLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setToleranceLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setVertex (self, *args, **kwargs)-> None :
      '''setVertex( (MLeader)arg1, (int)arg2, (int)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void setVertex(class PyDbMLeader {lvalue},int,int,class AcGePoint3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignmentType (self, *args, **kwargs)-> MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeader)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeader {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> MLeaderTextAngleType :
      '''textAngleType( (MLeader)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeader)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeader)arg1) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue})

textAttachmentType( (MLeader)arg1, (MLeaderLeaderDirectionType)arg2) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def textColor (self, *args, **kwargs)-> Color :
      '''textColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeader {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeader)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeader {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> ObjectId :
      '''textStyleId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeader {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateLeaderLinePosition (self, *args, **kwargs)-> None :
      '''updateLeaderLinePosition( (MLeader)arg1) -> None :

    C++ signature :
        void updateLeaderLinePosition(class PyDbMLeader {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MLeaderBlockConnectionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kConnectBase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kConnectExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderContentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoneContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kToleranceContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderGsMarkType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArrowMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockAttribute (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoglegMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextUnderLineMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kToleranceMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderDirectionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInVisibleLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSplineLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStraightLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderMoveType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kMoveAllExceptArrowHeaderPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMoveAllPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMoveContentAndDoglegPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderPropertyOverrideType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArrowSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kArrowSymbolId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockConnectionType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockRotation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kContentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDefaultMText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoglegLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableDogleg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableFrameText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableLanding (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendLeaderToText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLandingGap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineTypeId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAngleType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAttachmentDirection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextBottomAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextLeftAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextRightAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextSwitchAlignmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextTopAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderSegmentAngleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k15 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k45 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k60 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k90 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAny (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorz (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def alignSpace (self, *args, **kwargs)-> float :
      '''alignSpace( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double alignSpace(class PyDbMLeaderStyle {lvalue})'''
    ...
    def annotative (self, *args, **kwargs)-> bool :
      '''annotative( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool annotative(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''arrowSymbolId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (MLeaderStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs)-> Color :
      '''blockColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeaderStyle)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> Scale3d :
      '''blockScale( (MLeaderStyle)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakSize (self, *args, **kwargs)-> float :
      '''breakSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double breakSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def contentType (self, *args, **kwargs)-> MLeaderContentType :
      '''contentType( (MLeaderStyle)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultMText (self, *args, **kwargs)-> MText :
      '''defaultMText( (MLeaderStyle)arg1) -> MText :

    C++ signature :
        class PyDbMText defaultMText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMLeaderStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeaderStyle {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawLeaderOrderType (self, *args, **kwargs)-> DrawLeaderOrderType :
      '''drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})

drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawMLeaderOrderType (self, *args, **kwargs)-> DrawMLeaderOrderType :
      '''drawMLeaderOrderType( (MLeaderStyle)arg1) -> DrawMLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawMLeaderOrderType drawMLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def enableBlockRotation (self, *args, **kwargs)-> bool :
      '''enableBlockRotation( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockScale (self, *args, **kwargs)-> bool :
      '''enableBlockScale( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeaderStyle {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def firstSegmentAngleConstraint (self, *args, **kwargs)-> MLeaderSegmentAngleType :
      '''firstSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType firstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbMLeaderStyle {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbMLeaderStyle {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs)-> Color :
      '''leaderLineColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''leaderLineType( (MLeaderStyle)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''leaderLineTypeId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''leaderLineWeight( (MLeaderStyle)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def maxLeaderSegmentsPoints (self, *args, **kwargs)-> int :
      '''maxLeaderSegmentsPoints( (MLeaderStyle)arg1) -> int :

    C++ signature :
        int maxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def overwritePropChanged (self, *args, **kwargs)-> bool :
      '''overwritePropChanged( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool overwritePropChanged(class PyDbMLeaderStyle {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postMLeaderStyleToDb (self, *args, **kwargs)-> ObjectId :
      '''postMLeaderStyleToDb( (MLeaderStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postMLeaderStyleToDb(class PyDbMLeaderStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def secondSegmentAngleConstraint (self, *args, **kwargs)-> MLeaderSegmentAngleType :
      '''secondSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType secondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def setAlignSpace (self, *args, **kwargs)-> None :
      '''setAlignSpace( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignSpace(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setAnnotative (self, *args, **kwargs)-> None :
      '''setAnnotative( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAnnotative(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setArrowSymbolId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBitFlags (self, *args, **kwargs)-> None :
      '''setBitFlags( (MLeaderStyle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setBitFlags(class PyDbMLeaderStyle {lvalue},unsigned int)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeaderStyle)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockId (self, *args, **kwargs)-> None :
      '''setBlockId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeaderStyle)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeaderStyle {lvalue},class AcGeScale3d)'''
    ...
    def setBreakSize (self, *args, **kwargs)-> None :
      '''setBreakSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBreakSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeaderStyle)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDefaultMText (self, *args, **kwargs)-> None :
      '''setDefaultMText( (MLeaderStyle)arg1, (MText)arg2) -> None :

    C++ signature :
        void setDefaultMText(class PyDbMLeaderStyle {lvalue},class PyDbMText)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setDrawLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)

setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)'''
    ...
    def setDrawMLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawMLeaderOrderType( (MLeaderStyle)arg1, (DrawMLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawMLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawMLeaderOrderType)'''
    ...
    def setEnableBlockRotation (self, *args, **kwargs)-> None :
      '''setEnableBlockRotation( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockRotation(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableBlockScale (self, *args, **kwargs)-> None :
      '''setEnableBlockScale( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockScale(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFirstSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setFirstSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setFirstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setLeaderLineColor (self, *args, **kwargs)-> None :
      '''setLeaderLineColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeaderStyle)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setLeaderLineWeight (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight( (MLeaderStyle)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight(class PyDbMLeaderStyle {lvalue},enum AcDb::LineWeight)'''
    ...
    def setMaxLeaderSegmentsPoints (self, *args, **kwargs)-> None :
      '''setMaxLeaderSegmentsPoints( (MLeaderStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void setMaxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue},int)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setSecondSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setSecondSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setSecondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setTextAlignAlwaysLeft (self, *args, **kwargs)-> None :
      '''setTextAlignAlwaysLeft( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTextAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeaderStyle)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeaderStyle)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeaderStyle)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeaderStyle)arg1, (MLeaderTextAttachmentType)arg2 [, (MLeaderLeaderDirectionType)arg3]) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentType [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignAlwaysLeft (self, *args, **kwargs)-> bool :
      '''textAlignAlwaysLeft( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool textAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAlignmentType (self, *args, **kwargs)-> MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeaderStyle)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> MLeaderTextAngleType :
      '''textAngleType( (MLeaderStyle)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeaderStyle)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeaderStyle)arg1 [, (MLeaderLeaderDirectionType)arg2]) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeaderStyle {lvalue} [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def textColor (self, *args, **kwargs)-> Color :
      '''textColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> ObjectId :
      '''textStyleId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MLeaderTextAlignmentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAngleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAlwaysRightReadingAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorizontalAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInsertAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentHorizontal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentVertical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentAllLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfTopLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentLinedCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddleOfBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddleOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentTopOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MText:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def actualHeight (self, *args, **kwargs)-> float :
      '''actualHeight( (MText)arg1) -> float :

    C++ signature :
        double actualHeight(class PyDbMText {lvalue})'''
    ...
    def actualWidth (self, *args, **kwargs)-> float :
      '''actualWidth( (MText)arg1) -> float :

    C++ signature :
        double actualWidth(class PyDbMText {lvalue})'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def ascent (self, *args, **kwargs)-> float :
      '''ascent( (MText)arg1) -> float :

    C++ signature :
        double ascent(class PyDbMText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''attachment( (MText)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint attachment(class PyDbMText {lvalue})'''
    ...
    def backgroundFillOn (self, *args, **kwargs)-> bool :
      '''backgroundFillOn( (MText)arg1) -> bool :

    C++ signature :
        bool backgroundFillOn(class PyDbMText {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MText :
      '''cast( (RxObject)arg1) -> MText :

    C++ signature :
        class PyDbMText cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MText :
      '''cloneFrom( (RxObject)arg1) -> MText :

    C++ signature :
        class PyDbMText cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def contents (self, *args, **kwargs)-> str :
      '''contents( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contents(class PyDbMText {lvalue})'''
    ...
    def contentsRTF (self, *args, **kwargs)-> str :
      '''contentsRTF( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contentsRTF(class PyDbMText {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs)-> None :
      '''convertFieldToText( (MText)arg1) -> None :

    C++ signature :
        void convertFieldToText(class PyDbMText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (MText)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbMText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def descent (self, *args, **kwargs)-> float :
      '''descent( (MText)arg1) -> float :

    C++ signature :
        double descent(class PyDbMText {lvalue})'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbMText {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def flowDirection (self, *args, **kwargs)-> MTextFlowDirection :
      '''flowDirection( (MText)arg1) -> MTextFlowDirection :

    C++ signature :
        enum AcDbMText::FlowDirection flowDirection(class PyDbMText {lvalue})'''
    ...
    def getBackgroundFillColor (self, *args, **kwargs)-> Color :
      '''getBackgroundFillColor( (MText)arg1) -> Color :

    C++ signature :
        class AcCmColor getBackgroundFillColor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundScaleFactor (self, *args, **kwargs)-> float :
      '''getBackgroundScaleFactor( (MText)arg1) -> float :

    C++ signature :
        double getBackgroundScaleFactor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundTransparency (self, *args, **kwargs)-> Transparency :
      '''getBackgroundTransparency( (MText)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency getBackgroundTransparency(class PyDbMText {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (MText)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbMText {lvalue})'''
    ...
    def getColumnAutoHeight (self, *args, **kwargs)-> bool :
      '''getColumnAutoHeight( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnAutoHeight(class PyDbMText {lvalue})'''
    ...
    def getColumnCount (self, *args, **kwargs)-> int :
      '''getColumnCount( (MText)arg1) -> int :

    C++ signature :
        int getColumnCount(class PyDbMText {lvalue})'''
    ...
    def getColumnFlowReversed (self, *args, **kwargs)-> bool :
      '''getColumnFlowReversed( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnFlowReversed(class PyDbMText {lvalue})'''
    ...
    def getColumnGutterWidth (self, *args, **kwargs)-> float :
      '''getColumnGutterWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnGutterWidth(class PyDbMText {lvalue})'''
    ...
    def getColumnHeight (self, *args, **kwargs)-> float :
      '''getColumnHeight( (MText)arg1, (int)arg2) -> float :

    C++ signature :
        double getColumnHeight(class PyDbMText {lvalue},int)'''
    ...
    def getColumnType (self, *args, **kwargs)-> MTextColumnType :
      '''getColumnType( (MText)arg1) -> MTextColumnType :

    C++ signature :
        enum AcDbMText::ColumnType getColumnType(class PyDbMText {lvalue})'''
    ...
    def getColumnWidth (self, *args, **kwargs)-> float :
      '''getColumnWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnWidth(class PyDbMText {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (MText)arg1) -> float :

    C++ signature :
        double height(class PyDbMText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (MText)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineSpacingFactor (self, *args, **kwargs)-> float :
      '''lineSpacingFactor( (MText)arg1) -> float :

    C++ signature :
        double lineSpacingFactor(class PyDbMText {lvalue})'''
    ...
    def lineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''lineSpacingStyle( (MText)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle lineSpacingStyle(class PyDbMText {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def location (self, *args, **kwargs)-> Point3d :
      '''location( (MText)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbMText {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (MText)arg1) -> float :

    C++ signature :
        double rotation(class PyDbMText {lvalue})'''
    ...
    def setAttachment (self, *args, **kwargs)-> None :
      '''setAttachment( (MText)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setAttachment(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttachmentMovingLocation (self, *args, **kwargs)-> None :
      '''setAttachmentMovingLocation( (MText)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setAttachmentMovingLocation(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundFill (self, *args, **kwargs)-> None :
      '''setBackgroundFill( (MText)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackgroundFill(class PyDbMText {lvalue},bool)'''
    ...
    def setBackgroundFillColor (self, *args, **kwargs)-> None :
      '''setBackgroundFillColor( (MText)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBackgroundFillColor(class PyDbMText {lvalue},class AcCmColor)'''
    ...
    def setBackgroundScaleFactor (self, *args, **kwargs)-> None :
      '''setBackgroundScaleFactor( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackgroundScaleFactor(class PyDbMText {lvalue},double)'''
    ...
    def setBackgroundTransparency (self, *args, **kwargs)-> None :
      '''setBackgroundTransparency( (MText)arg1, (Transparency)arg2) -> None :

    C++ signature :
        void setBackgroundTransparency(class PyDbMText {lvalue},class AcCmTransparency)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setColumnAutoHeight (self, *args, **kwargs)-> None :
      '''setColumnAutoHeight( (MText)arg1, (bool)arg2) -> None :

    C++ signature :
        void setColumnAutoHeight(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnCount (self, *args, **kwargs)-> None :
      '''setColumnCount( (MText)arg1, (int)arg2) -> None :

    C++ signature :
        void setColumnCount(class PyDbMText {lvalue},int)'''
    ...
    def setColumnFlowReversed (self, *args, **kwargs)-> None :
      '''setColumnFlowReversed( (MText)arg1, (bool)arg2) -> None :

    C++ signature :
        void setColumnFlowReversed(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnGutterWidth (self, *args, **kwargs)-> None :
      '''setColumnGutterWidth( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setColumnGutterWidth(class PyDbMText {lvalue},double)'''
    ...
    def setColumnHeight (self, *args, **kwargs)-> None :
      '''setColumnHeight( (MText)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setColumnHeight(class PyDbMText {lvalue},int,double)'''
    ...
    def setColumnType (self, *args, **kwargs)-> None :
      '''setColumnType( (MText)arg1, (MTextColumnType)arg2) -> None :

    C++ signature :
        void setColumnType(class PyDbMText {lvalue},enum AcDbMText::ColumnType)'''
    ...
    def setColumnWidth (self, *args, **kwargs)-> None :
      '''setColumnWidth( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setColumnWidth(class PyDbMText {lvalue},double)'''
    ...
    def setContents (self, *args, **kwargs)-> int :
      '''setContents( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContents(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setContentsRTF (self, *args, **kwargs)-> int :
      '''setContentsRTF( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContentsRTF(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDirection (self, *args, **kwargs)-> None :
      '''setDirection( (MText)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setDirection(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setDynamicColumns (self, *args, **kwargs)-> None :
      '''setDynamicColumns( (MText)arg1, (float)arg2, (float)arg3, (bool)arg4) -> None :

    C++ signature :
        void setDynamicColumns(class PyDbMText {lvalue},double,double,bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self, *args, **kwargs)-> None :
      '''setFlowDirection( (MText)arg1, (MTextFlowDirection)arg2) -> None :

    C++ signature :
        void setFlowDirection(class PyDbMText {lvalue},enum AcDbMText::FlowDirection)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbMText {lvalue},double)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setLineSpacingFactor( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setLineSpacingFactor(class PyDbMText {lvalue},double)'''
    ...
    def setLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setLineSpacingStyle( (MText)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setLineSpacingStyle(class PyDbMText {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setLocation (self, *args, **kwargs)-> None :
      '''setLocation( (MText)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (MText)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbMText {lvalue},double)'''
    ...
    def setStaticColumns (self, *args, **kwargs)-> None :
      '''setStaticColumns( (MText)arg1, (float)arg2, (float)arg3, (int)arg4) -> None :

    C++ signature :
        void setStaticColumns(class PyDbMText {lvalue},double,double,int)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMText {lvalue},double)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (MText)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyle(class PyDbMText {lvalue},class PyDbObjectId)'''
    ...
    def setUseBackgroundColor (self, *args, **kwargs)-> None :
      '''setUseBackgroundColor( (MText)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUseBackgroundColor(class PyDbMText {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (MText)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbMText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self, *args, **kwargs)-> str :
      '''text( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbMText {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MText)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (MText)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbMText {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useBackgroundColorOn (self, *args, **kwargs)-> bool :
      '''useBackgroundColorOn( (MText)arg1) -> bool :

    C++ signature :
        bool useBackgroundColorOn(class PyDbMText {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (MText)arg1) -> float :

    C++ signature :
        double width(class PyDbMText {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MTextAttachmentPoint:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBaseAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextColumnType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDynamicColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStaticColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBtoT (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLtoR (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRtoL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MeasurementValue:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEnglish (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMetric (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MergeCellStyleOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kMergeCellStyleConvertDuplicatesToOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleCopyDuplicates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleIgnoreNewStyles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleOverwriteDuplicates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Mline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendSeg (self, *args, **kwargs)-> None :
      '''appendSeg( (Mline)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void appendSeg(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def axisAt (self, *args, **kwargs)-> Vector3d :
      '''axisAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d axisAt(class PyDbMline {lvalue},int)'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Mline :
      '''cast( (RxObject)arg1) -> Mline :

    C++ signature :
        class PyDbMline cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Mline :
      '''cloneFrom( (RxObject)arg1) -> Mline :

    C++ signature :
        class PyDbMline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def closedMline (self, *args, **kwargs)-> bool :
      '''closedMline( (Mline)arg1) -> bool :

    C++ signature :
        bool closedMline(class PyDbMline {lvalue})'''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def element (self, *args, **kwargs)-> int :
      '''element( (Mline)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int element(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4, (bool)arg5) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool,bool)'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Mline)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbMline {lvalue})'''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> int :
      '''justification( (Mline)arg1) -> int :

    C++ signature :
        signed char justification(class PyDbMline {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def miterAt (self, *args, **kwargs)-> Vector3d :
      '''miterAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d miterAt(class PyDbMline {lvalue},int)'''
    ...
    def moveVertexAt (self, *args, **kwargs)-> None :
      '''moveVertexAt( (Mline)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void moveVertexAt(class PyDbMline {lvalue},int,class AcGePoint3d)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Mline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMline {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (Mline)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbMline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLastSeg (self, *args, **kwargs)-> None :
      '''removeLastSeg( (Mline)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void removeLastSeg(class PyDbMline {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (Mline)arg1) -> float :

    C++ signature :
        double scale(class PyDbMline {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosedMline (self, *args, **kwargs)-> None :
      '''setClosedMline( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosedMline(class PyDbMline {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setJustification (self, *args, **kwargs)-> None :
      '''setJustification( (Mline)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setJustification(class PyDbMline {lvalue},signed char)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Mline)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbMline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (Mline)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMline {lvalue},double)'''
    ...
    def setStyle (self, *args, **kwargs)-> None :
      '''setStyle( (Mline)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setStyle(class PyDbMline {lvalue},class PyDbObjectId)'''
    ...
    def setSupressEndCaps (self, *args, **kwargs)-> None :
      '''setSupressEndCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressEndCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setSupressStartCaps (self, *args, **kwargs)-> None :
      '''setSupressStartCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressStartCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def style (self, *args, **kwargs)-> ObjectId :
      '''style( (Mline)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId style(class PyDbMline {lvalue})'''
    ...
    def supressEndCaps (self, *args, **kwargs)-> bool :
      '''supressEndCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressEndCaps(class PyDbMline {lvalue})'''
    ...
    def supressStartCaps (self, *args, **kwargs)-> bool :
      '''supressStartCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressStartCaps(class PyDbMline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexAt (self, *args, **kwargs)-> Point3d :
      '''vertexAt( (Mline)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbMline {lvalue},int)'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class MlineJustification:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMerged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kZero (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MlineStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addElement (self, *args, **kwargs)-> int :
      '''addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})

addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4, (bool)arg5) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue},bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MlineStyle :
      '''cast( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MlineStyle :
      '''cloneFrom( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMlineStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def endInnerArcs (self, *args, **kwargs)-> bool :
      '''endInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def endRoundCap (self, *args, **kwargs)-> bool :
      '''endRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def endSquareCap (self, *args, **kwargs)-> bool :
      '''endSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fillColor (self, *args, **kwargs)-> Color :
      '''fillColor( (MlineStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor fillColor(class PyDbMlineStyle {lvalue})'''
    ...
    def filled (self, *args, **kwargs)-> bool :
      '''filled( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool filled(class PyDbMlineStyle {lvalue})'''
    ...
    def getElementAt (self, *args, **kwargs)-> tuple :
      '''getElementAt( (MlineStyle)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def initMlineStyle (self, *args, **kwargs)-> None :
      '''initMlineStyle( (MlineStyle)arg1) -> None :

    C++ signature :
        void initMlineStyle(class PyDbMlineStyle {lvalue})'''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbMlineStyle {lvalue})'''
    ...
    def numElements (self, *args, **kwargs)-> int :
      '''numElements( (MlineStyle)arg1) -> int :

    C++ signature :
        int numElements(class PyDbMlineStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeElementAt (self, *args, **kwargs)-> None :
      '''removeElementAt( (MlineStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void removeElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (MlineStyle)arg1, (MlineStyle)arg2) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle)

set( (MlineStyle)arg1, (MlineStyle)arg2, (bool)arg3) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle,bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setElement (self, *args, **kwargs)-> int :
      '''setElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int setElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})'''
    ...
    def setEndAngle (self, *args, **kwargs)-> None :
      '''setEndAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setEndInnerArcs (self, *args, **kwargs)-> None :
      '''setEndInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndRoundCap (self, *args, **kwargs)-> None :
      '''setEndRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndSquareCap (self, *args, **kwargs)-> None :
      '''setEndSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFillColor (self, *args, **kwargs)-> None :
      '''setFillColor( (MlineStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setFillColor(class PyDbMlineStyle {lvalue},class AcCmColor)'''
    ...
    def setFilled (self, *args, **kwargs)-> None :
      '''setFilled( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFilled(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setShowMiters (self, *args, **kwargs)-> None :
      '''setShowMiters( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowMiters(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs)-> None :
      '''setStartAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setStartInnerArcs (self, *args, **kwargs)-> None :
      '''setStartInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartRoundCap (self, *args, **kwargs)-> None :
      '''setStartRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartSquareCap (self, *args, **kwargs)-> None :
      '''setStartSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def showMiters (self, *args, **kwargs)-> bool :
      '''showMiters( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool showMiters(class PyDbMlineStyle {lvalue})'''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def startInnerArcs (self, *args, **kwargs)-> bool :
      '''startInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def startRoundCap (self, *args, **kwargs)-> bool :
      '''startRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def startSquareCap (self, *args, **kwargs)-> bool :
      '''startSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class NurbSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> NurbSurface :
      '''cast( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> NurbSurface :
      '''cloneFrom( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ObjectContext:
    def __init__ (self, *args, **kwargs)-> None:
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def collectionName (self, *args, **kwargs)-> str :
      '''collectionName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > collectionName(class PyDbObjectContext {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbObjectContext {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (ObjectContext)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbObjectContext {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def uniqueIdentifier (self, *args, **kwargs)-> int :
      '''uniqueIdentifier( (ObjectContext)arg1) -> int :

    C++ signature :
        __int64 uniqueIdentifier(class PyDbObjectContext {lvalue})'''
    ...

class ObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> Database :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> RxClass :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,val : int)-> ObjectId :
      '''                             '''
    ...

class OpenMode:
    def ForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OrdinateDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> OrdinateDimension :
      '''cast( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> OrdinateDimension :
      '''cloneFrom( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definingPoint (self, *args, **kwargs)-> Point3d :
      '''definingPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d definingPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isUsingXAxis (self, *args, **kwargs)-> bool :
      '''isUsingXAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isUsingYAxis (self, *args, **kwargs)-> bool :
      '''isUsingYAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def leaderEndPoint (self, *args, **kwargs)-> Point3d :
      '''leaderEndPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leaderEndPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbOrdinateDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefiningPoint (self, *args, **kwargs)-> None :
      '''setDefiningPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDefiningPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLeaderEndPoint (self, *args, **kwargs)-> None :
      '''setLeaderEndPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeaderEndPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOrigin (self, *args, **kwargs)-> None :
      '''setOrigin( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOrigin(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingXAxis (self, *args, **kwargs)-> None :
      '''setUsingXAxis( (OrdinateDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingXAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setUsingYAxis (self, *args, **kwargs)-> None :
      '''setUsingYAxis( (OrdinateDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingYAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useXAxis (self, *args, **kwargs)-> None :
      '''useXAxis( (OrdinateDimension)arg1) -> None :

    C++ signature :
        void useXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def useYAxis (self, *args, **kwargs)-> None :
      '''useYAxis( (OrdinateDimension)arg1) -> None :

    C++ signature :
        void useYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class OrthographicView:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBackView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFrontView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNonOrthoView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OsnapMask:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kOsMaskAllowTan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskApint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskCen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskCentroid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskDisablePerp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskEnd (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskImmediate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskIns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskInt (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskNear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskNode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskNoneOverride (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskPerp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskQuad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskQuick (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskRelCartesian (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskRelPolar (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsMaskTan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OsnapMode:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kOsModeCen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeCentroid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeEnd (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeIns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeNear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeNode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModePerp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeQuad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOsModeTan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PdfDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayDefinition :
      '''cast( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayDefinition :
      '''cloneFrom( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dictionaryKey (self, *args, **kwargs)-> str :
      '''dictionaryKey( (RxClass)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryKey(class PyRxClass)'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self, *args, **kwargs)-> str :
      '''getActiveFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getItemName (self, *args, **kwargs)-> str :
      '''getItemName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getItemName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getSourceFileName (self, *args, **kwargs)-> str :
      '''getSourceFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSourceFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (UnderlayDefinition)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> None :
      '''load( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void load(class PyDbUnderlayDefinition {lvalue})

load( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void load(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setItemName (self, *args, **kwargs)-> None :
      '''setItemName( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setItemName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, *args, **kwargs)-> None :
      '''setSourceFileName( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setSourceFileName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void unload(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class PdfReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PdfReference :
      '''cast( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (UnderlayReference)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbUnderlayReference {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PdfReference :
      '''cloneFrom( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char contrast(class PyDbUnderlayReference {lvalue})'''
    ...
    def contrastDefault (self, *args, **kwargs)-> int :
      '''contrastDefault() -> int :

    C++ signature :
        unsigned char contrastDefault()'''
    ...
    def contrastLowerLimit (self, *args, **kwargs)-> int :
      '''contrastLowerLimit() -> int :

    C++ signature :
        unsigned char contrastLowerLimit()'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definitionId (self, *args, **kwargs)-> ObjectId :
      '''definitionId( (UnderlayReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId definitionId(class PyDbUnderlayReference {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char fade(class PyDbUnderlayReference {lvalue})'''
    ...
    def fadeDefault (self, *args, **kwargs)-> int :
      '''fadeDefault() -> int :

    C++ signature :
        unsigned char fadeDefault()'''
    ...
    def fadeLowerLimit (self, *args, **kwargs)-> int :
      '''fadeLowerLimit() -> int :

    C++ signature :
        unsigned char fadeLowerLimit()'''
    ...
    def fadeUpperLimit (self, *args, **kwargs)-> int :
      '''fadeUpperLimit() -> int :

    C++ signature :
        unsigned char fadeUpperLimit()'''
    ...
    def generateClipBoundaryFromPline (self, *args, **kwargs)-> None :
      '''generateClipBoundaryFromPline( (UnderlayReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void generateClipBoundaryFromPline(class PyDbUnderlayReference {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getUnderlayLayer (self, *args, **kwargs)-> UnderlayLayer :
      '''getUnderlayLayer( (UnderlayReference)arg1, (int)arg2) -> UnderlayLayer :

    C++ signature :
        class PyUnderlayLayer getUnderlayLayer(class PyDbUnderlayReference {lvalue},int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (UnderlayReference)arg1) -> float :

    C++ signature :
        double height(class PyDbUnderlayReference {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self, *args, **kwargs)-> bool :
      '''isAdjustedForBackground( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isAdjustedForBackground(class PyDbUnderlayReference {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbUnderlayReference {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbUnderlayReference {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self, *args, **kwargs)-> bool :
      '''isFramePlottable( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFramePlottable(class PyDbUnderlayReference {lvalue})'''
    ...
    def isFrameVisible (self, *args, **kwargs)-> bool :
      '''isFrameVisible( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFrameVisible(class PyDbUnderlayReference {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self, *args, **kwargs)-> bool :
      '''isMonochrome( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isMonochrome(class PyDbUnderlayReference {lvalue})'''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbUnderlayReference {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (UnderlayReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbUnderlayReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (UnderlayReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbUnderlayReference {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (UnderlayReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbUnderlayReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (UnderlayReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbUnderlayReference {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self, *args, **kwargs)-> None :
      '''setClipBoundary( (UnderlayReference)arg1, (list)arg2) -> None :

    C++ signature :
        void setClipBoundary(class PyDbUnderlayReference {lvalue},class boost::python::list)'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (UnderlayReference)arg1, (int)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefinitionId (self, *args, **kwargs)-> None :
      '''setDefinitionId( (UnderlayReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDefinitionId(class PyDbUnderlayReference {lvalue},class PyDbObjectId)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (UnderlayReference)arg1, (int)arg2) -> None :

    C++ signature :
        void setFade(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setIsAdjustedForBackground (self, *args, **kwargs)-> None :
      '''setIsAdjustedForBackground( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsAdjustedForBackground(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsClipped (self, *args, **kwargs)-> None :
      '''setIsClipped( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsClipped(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsMonochrome (self, *args, **kwargs)-> None :
      '''setIsMonochrome( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsMonochrome(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsOn (self, *args, **kwargs)-> None :
      '''setIsOn( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOn(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (UnderlayReference)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbUnderlayReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (UnderlayReference)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbUnderlayReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> None :
      '''setScaleFactors( (UnderlayReference)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setScaleFactors(class PyDbUnderlayReference {lvalue},class AcGeScale3d)'''
    ...
    def setTransform (self, *args, **kwargs)-> None :
      '''setTransform( (UnderlayReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setTransform(class PyDbUnderlayReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setUnderlayLayer (self, *args, **kwargs)-> None :
      '''setUnderlayLayer( (UnderlayReference)arg1, (int)arg2, (UnderlayLayer)arg3) -> None :

    C++ signature :
        void setUnderlayLayer(class PyDbUnderlayReference {lvalue},int,class PyUnderlayLayer)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self, *args, **kwargs)-> Matrix3d :
      '''transform( (UnderlayReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d transform(class PyDbUnderlayReference {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self, *args, **kwargs)-> int :
      '''underlayLayerCount( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned int underlayLayerCount(class PyDbUnderlayReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (UnderlayReference)arg1) -> float :

    C++ signature :
        double width(class PyDbUnderlayReference {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Planarity:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLinear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNonPlanar (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlanar (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlaneSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PlaneSurface :
      '''cast( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PlaneSurface :
      '''cloneFrom( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class PlotPaperUnits:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMillimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPixels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotRotation:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k0degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k180degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k270degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k90degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotSettings:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (bool)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> None :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> None :

    C++ signature :
        void addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PlotSettings :
      '''cast( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PlotSettings :
      '''cloneFrom( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> None :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> None :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> None :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> None :

    C++ signature :
        void setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def stdScaleType (self, *args, **kwargs)-> StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class PlotStyleNameType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kPlotStyleNameByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameById (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameIsDictDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDisplay (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLimits (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWindow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Point:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue})

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Point :
      '''cast( (RxObject)arg1) -> Point :

    C++ signature :
        class PyDbPoint cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Point :
      '''cloneFrom( (RxObject)arg1) -> Point :

    C++ signature :
        class PyDbPoint cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def ecsRotation (self, *args, **kwargs)-> float :
      '''ecsRotation( (Point)arg1) -> float :

    C++ signature :
        double ecsRotation(class PyDbPoint {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Point)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPoint {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Point)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPoint {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEcsRotation (self, *args, **kwargs)-> None :
      '''setEcsRotation( (Point)arg1, (float)arg2) -> None :

    C++ signature :
        void setEcsRotation(class PyDbPoint {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Point)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbPoint {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Point)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbPoint {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Point)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbPoint {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Point)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPoint {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Point3AngularDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Point3AngularDimension :
      '''cast( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Point3AngularDimension :
      '''cloneFrom( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (Point3AngularDimension)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs)-> None :
      '''setExtArcOn( (Point3AngularDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtArcOn(class PyDb3PointAngularDimension {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDb3PointAngularDimension {lvalue})'''
    ...

class Poly2dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k2dCubicSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dFitCurvePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dQuadSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSimplePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Poly3dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k3dCubicSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3dQuadSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3dSimplePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PolyFaceMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PolyFaceMeshVertex :
      '''cast( (RxObject)arg1) -> PolyFaceMeshVertex :

    C++ signature :
        class PyDbPolyFaceMeshVertex cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PolyFaceMeshVertex :
      '''cloneFrom( (RxObject)arg1) -> PolyFaceMeshVertex :

    C++ signature :
        class PyDbPolyFaceMeshVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (PolyFaceMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolyFaceMeshVertex {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (PolyFaceMeshVertex)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbPolyFaceMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class PolygonMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PolygonMeshVertex :
      '''cast( (RxObject)arg1) -> PolygonMeshVertex :

    C++ signature :
        class PyDbPolygonMeshVertex cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PolygonMeshVertex :
      '''cloneFrom( (RxObject)arg1) -> PolygonMeshVertex :

    C++ signature :
        class PyDbPolygonMeshVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (PolygonMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (PolygonMeshVertex)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbPolygonMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexType (self, *args, **kwargs)-> object :
      '''vertexType( (PolygonMeshVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Polyline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def addVertexAt (self, *args, **kwargs)-> None :
      '''addVertexAt( (Polyline)arg1, (SubentType)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)

addVertexAt( (Polyline)arg1, (SubentType)arg2, (Point2d)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double,double,double)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline :
      '''cast( (RxObject)arg1) -> Polyline :

    C++ signature :
        class PyDbPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline :
      '''cloneFrom( (RxObject)arg1) -> Polyline :

    C++ signature :
        class PyDbPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Polyline)arg1) -> float :

    C++ signature :
        double elevation(class PyDbPolyline {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArcSeg2dAt (self, *args, **kwargs)-> CircArc2d :
      '''getArcSeg2dAt( (Polyline)arg1, (SubentType)arg2) -> CircArc2d :

    C++ signature :
        class PyGeCircArc2d getArcSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArcSeg3dAt (self, *args, **kwargs)-> CircArc3d :
      '''getArcSeg3dAt( (Polyline)arg1, (SubentType)arg2) -> CircArc3d :

    C++ signature :
        class PyGeCircArc3d getArcSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getBulgeAt (self, *args, **kwargs)-> float :
      '''getBulgeAt( (Polyline)arg1, (SubentType)arg2) -> float :

    C++ signature :
        double getBulgeAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getConstantWidth (self, *args, **kwargs)-> float :
      '''getConstantWidth( (Polyline)arg1) -> float :

    C++ signature :
        double getConstantWidth(class PyDbPolyline {lvalue})'''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})

getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getEndWidthAt (self, *args, **kwargs)-> float :
      '''getEndWidthAt( (Polyline)arg1, (SubentType)arg2) -> float :

    C++ signature :
        double getEndWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLineSeg2dAt (self, *args, **kwargs)-> LineSeg2d :
      '''getLineSeg2dAt( (Polyline)arg1, (SubentType)arg2) -> LineSeg2d :

    C++ signature :
        class PyGeLineSeg2d getLineSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getLineSeg3dAt (self, *args, **kwargs)-> LineSeg3d :
      '''getLineSeg3dAt( (Polyline)arg1, (SubentType)arg2) -> LineSeg3d :

    C++ signature :
        class PyGeLineSeg3d getLineSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPoint2dAt (self, *args, **kwargs)-> Point2d :
      '''getPoint2dAt( (Polyline)arg1, (SubentType)arg2) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPoint3dAt (self, *args, **kwargs)-> Point3d :
      '''getPoint3dAt( (Polyline)arg1, (SubentType)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getStartWidthAt (self, *args, **kwargs)-> float :
      '''getStartWidthAt( (Polyline)arg1, (SubentType)arg2) -> float :

    C++ signature :
        double getStartWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasBulges (self, *args, **kwargs)-> bool :
      '''hasBulges( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasBulges(class PyDbPolyline {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hasPlinegen (self, *args, **kwargs)-> bool :
      '''hasPlinegen( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasPlinegen(class PyDbPolyline {lvalue})'''
    ...
    def hasVertexIdentifiers (self, *args, **kwargs)-> bool :
      '''hasVertexIdentifiers( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasVertexIdentifiers(class PyDbPolyline {lvalue})'''
    ...
    def hasWidth (self, *args, **kwargs)-> bool :
      '''hasWidth( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasWidth(class PyDbPolyline {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOnlyLines (self, *args, **kwargs)-> bool :
      '''isOnlyLines( (Polyline)arg1) -> bool :

    C++ signature :
        bool isOnlyLines(class PyDbPolyline {lvalue})'''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs)-> None :
      '''makeClosedIfStartAndEndVertexCoincide( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void makeClosedIfStartAndEndVertexCoincide(class PyDbPolyline {lvalue},double)'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def maximizeMemory (self, *args, **kwargs)-> None :
      '''maximizeMemory( (Polyline)arg1) -> None :

    C++ signature :
        void maximizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def minimizeMemory (self, *args, **kwargs)-> None :
      '''minimizeMemory( (Polyline)arg1) -> None :

    C++ signature :
        void minimizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Polyline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPolyline {lvalue})'''
    ...
    def numVerts (self, *args, **kwargs)-> int :
      '''numVerts( (Polyline)arg1) -> int :

    C++ signature :
        unsigned int numVerts(class PyDbPolyline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def onSegAt (self, *args, **kwargs)-> bool :
      '''onSegAt( (Polyline)arg1, (SubentType)arg2, (Point2d)arg3, (float)arg4) -> bool :

    C++ signature :
        bool onSegAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeVertexAt (self, *args, **kwargs)-> None :
      '''removeVertexAt( (Polyline)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void removeVertexAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def reset (self, *args, **kwargs)-> None :
      '''reset( (Polyline)arg1, (bool)arg2, (SubentType)arg3) -> None :

    C++ signature :
        void reset(class PyDbPolyline {lvalue},bool,unsigned int)'''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def segType (self, *args, **kwargs)-> SegType :
      '''segType( (Polyline)arg1, (SubentType)arg2) -> SegType :

    C++ signature :
        enum AcDbPolyline::SegType segType(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulgeAt (self, *args, **kwargs)-> None :
      '''setBulgeAt( (Polyline)arg1, (SubentType)arg2, (float)arg3) -> None :

    C++ signature :
        void setBulgeAt(class PyDbPolyline {lvalue},unsigned int,double)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDbPolyline {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self, *args, **kwargs)-> None :
      '''setConstantWidth( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void setConstantWidth(class PyDbPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbPolyline {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Polyline)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlinegen (self, *args, **kwargs)-> None :
      '''setPlinegen( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlinegen(class PyDbPolyline {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointAt (self, *args, **kwargs)-> None :
      '''setPointAt( (Polyline)arg1, (SubentType)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void setPointAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbPolyline {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidthsAt (self, *args, **kwargs)-> None :
      '''setWidthsAt( (Polyline)arg1, (SubentType)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void setWidthsAt(class PyDbPolyline {lvalue},unsigned int,double,double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Polyline)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPolyline {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Polyline2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly2dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly2dType,class boost::python::list,bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''appendVertex( (Polyline2d)arg1, (Vertex2d)arg2) -> None :

    C++ signature :
        void appendVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex)

appendVertex( (Polyline2d)arg1, (ObjectId)arg2, (Vertex2d)arg3) -> None :

    C++ signature :
        void appendVertex(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb2dVertex)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline2d :
      '''cast( (RxObject)arg1) -> Polyline2d :

    C++ signature :
        class PyDb2dPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline2d :
      '''cloneFrom( (RxObject)arg1) -> Polyline2d :

    C++ signature :
        class PyDb2dPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def constantWidth (self, *args, **kwargs)-> float :
      '''constantWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double constantWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs)-> None :
      '''convertToPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void convertToPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultEndWidth (self, *args, **kwargs)-> float :
      '''defaultEndWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultEndWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def defaultStartWidth (self, *args, **kwargs)-> float :
      '''defaultStartWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultStartWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Polyline2d)arg1) -> float :

    C++ signature :
        double elevation(class PyDb2dPolyline {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''insertVertexAt( (Polyline2d)arg1, (Vertex2d)arg2, (Vertex2d)arg3) -> None :

    C++ signature :
        void insertVertexAt(class PyDb2dPolyline {lvalue},class PyDb2dVertex,class PyDb2dVertex {lvalue})

insertVertexAt( (Polyline2d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Vertex2d)arg4) -> None :

    C++ signature :
        void insertVertexAt(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb2dVertex {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLinetypeGenerationOn (self, *args, **kwargs)-> bool :
      '''isLinetypeGenerationOn( (Polyline2d)arg1) -> bool :

    C++ signature :
        bool isLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline2d)arg1) -> float :

    C++ signature :
        double length(class PyDb2dPolyline {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def makeClosed (self, *args, **kwargs)-> None :
      '''makeClosed( (Polyline2d)arg1) -> None :

    C++ signature :
        void makeClosed(class PyDb2dPolyline {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs)-> None :
      '''makeClosedIfStartAndEndVertexCoincide( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void makeClosedIfStartAndEndVertexCoincide(class PyDb2dPolyline {lvalue},double)'''
    ...
    def makeOpen (self, *args, **kwargs)-> None :
      '''makeOpen( (Polyline2d)arg1) -> None :

    C++ signature :
        void makeOpen(class PyDb2dPolyline {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Polyline2d)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDb2dPolyline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> None :
      '''openSequenceEnd( (Polyline2d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openSequenceEnd(class PyDb2dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> None :
      '''openVertex( (Polyline2d)arg1, (Vertex2d)arg2, (ObjectId)arg3, (OpenMode)arg4) -> None :

    C++ signature :
        void openVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def polyType (self, *args, **kwargs)-> Poly2dType :
      '''polyType( (Polyline2d)arg1) -> Poly2dType :

    C++ signature :
        enum AcDb::Poly2dType polyType(class PyDb2dPolyline {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline2d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDb2dPolyline {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self, *args, **kwargs)-> None :
      '''setConstantWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setConstantWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefaultEndWidth (self, *args, **kwargs)-> None :
      '''setDefaultEndWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setDefaultEndWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDefaultStartWidth (self, *args, **kwargs)-> None :
      '''setDefaultStartWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setDefaultStartWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeGenerationOff (self, *args, **kwargs)-> None :
      '''setLinetypeGenerationOff( (Polyline2d)arg1) -> None :

    C++ signature :
        void setLinetypeGenerationOff(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeGenerationOn (self, *args, **kwargs)-> None :
      '''setLinetypeGenerationOn( (Polyline2d)arg1) -> None :

    C++ signature :
        void setLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Polyline2d)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDb2dPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> None :
      '''setPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void setPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> None :
      '''splineFit( (Polyline2d)arg1) -> None :

    C++ signature :
        void splineFit(class PyDb2dPolyline {lvalue})

splineFit( (Polyline2d)arg1, (Poly2dType)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void splineFit(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> None :
      '''straighten( (Polyline2d)arg1) -> None :

    C++ signature :
        void straighten(class PyDb2dPolyline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Polyline2d)arg1) -> float :

    C++ signature :
        double thickness(class PyDb2dPolyline {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline2d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb2dPolyline {lvalue})'''
    ...
    def vertexPosition (self, *args, **kwargs)-> Point3d :
      '''vertexPosition( (Polyline2d)arg1, (object)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexPosition(class PyDb2dPolyline {lvalue},class AcDb2dVertex)'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Polyline3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly3dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly3dType,class boost::python::list,bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''appendVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2) -> None :

    C++ signature :
        void appendVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex)

appendVertex( (Polyline3d)arg1, (ObjectId)arg2, (Polyline3dVertex)arg3) -> None :

    C++ signature :
        void appendVertex(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb3dPolylineVertex)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline3d :
      '''cast( (RxObject)arg1) -> Polyline3d :

    C++ signature :
        class PyDb3dPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline3d :
      '''cloneFrom( (RxObject)arg1) -> Polyline3d :

    C++ signature :
        class PyDb3dPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def convertToPolyType (self, *args, **kwargs)-> None :
      '''convertToPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> None :

    C++ signature :
        void convertToPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromAcGeCurve (self, *args, **kwargs)-> Curve :
      '''createFromAcGeCurve( (Curve3d)arg1) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d)

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue})

createFromAcGeCurve( (Curve3d)arg1, (Vector3d)arg2, (Tol)arg3) -> Curve :

    C++ signature :
        class PyDbCurve createFromAcGeCurve(class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, *args, **kwargs)-> Curve3d :
      '''getAcGeCurve( (Curve)arg1) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue})

getAcGeCurve( (Curve)arg1, (Tol)arg2) -> Curve3d :

    C++ signature :
        class PyGeCurve3d getAcGeCurve(class PyDbCurve {lvalue},class AcGeTol)'''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,extend: bool=False)-> Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> Point3d :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> Vector3d :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> Point3d :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''insertVertexAt( (Polyline3d)arg1, (Polyline3dVertex)arg2, (Polyline3dVertex)arg3) -> None :

    C++ signature :
        void insertVertexAt(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex,class PyDb3dPolylineVertex {lvalue})

insertVertexAt( (Polyline3d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Polyline3dVertex)arg4) -> None :

    C++ signature :
        void insertVertexAt(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb3dPolylineVertex {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline3d)arg1) -> float :

    C++ signature :
        double length(class PyDb3dPolyline {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def makeClosed (self, *args, **kwargs)-> None :
      '''makeClosed( (Polyline3d)arg1) -> None :

    C++ signature :
        void makeClosed(class PyDb3dPolyline {lvalue})'''
    ...
    def makeOpen (self, *args, **kwargs)-> None :
      '''makeOpen( (Polyline3d)arg1) -> None :

    C++ signature :
        void makeOpen(class PyDb3dPolyline {lvalue})'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> None :
      '''openSequenceEnd( (Polyline3d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openSequenceEnd(class PyDb3dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> None :
      '''openVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2, (ObjectId)arg3, (OpenMode)arg4) -> None :

    C++ signature :
        void openVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def polyType (self, *args, **kwargs)-> Poly3dType :
      '''polyType( (Polyline3d)arg1) -> Poly3dType :

    C++ signature :
        enum AcDb::Poly3dType polyType(class PyDb3dPolyline {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDb3dPolyline {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self, *args, **kwargs)-> None :
      '''setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d)

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue})

setFromAcGeCurve( (Curve)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> None :

    C++ signature :
        void setFromAcGeCurve(class PyDbCurve {lvalue},class PyGeCurve3d,class AcGeVector3d {lvalue},class AcGeTol)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> None :
      '''setPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> None :

    C++ signature :
        void setPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> None :
      '''splineFit( (Polyline3d)arg1) -> None :

    C++ signature :
        void splineFit(class PyDb3dPolyline {lvalue})

splineFit( (Polyline3d)arg1, (Poly3dType)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void splineFit(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> None :
      '''straighten( (Polyline3d)arg1) -> None :

    C++ signature :
        void straighten(class PyDb3dPolyline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline3d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb3dPolyline {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Polyline3dVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline3dVertex :
      '''cast( (RxObject)arg1) -> Polyline3dVertex :

    C++ signature :
        class PyDb3dPolylineVertex cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline3dVertex :
      '''cloneFrom( (RxObject)arg1) -> Polyline3dVertex :

    C++ signature :
        class PyDb3dPolylineVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Polyline3dVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Polyline3dVertex)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDb3dPolylineVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertexType (self, *args, **kwargs)-> object :
      '''vertexType( (Polyline3dVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RadialDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RadialDimension :
      '''cast( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimension {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RadialDimension :
      '''cloneFrom( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (RadialDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbRadialDimension {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (RadialDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (RadialDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, *args, **kwargs)-> None :
      '''setLeaderLength( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setLeaderLength(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RadialDimensionLarge:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RadialDimensionLarge :
      '''cast( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RadialDimensionLarge :
      '''cloneFrom( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogAngle (self, *args, **kwargs)-> float :
      '''jogAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double jogAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def jogPoint (self, *args, **kwargs)-> Point3d :
      '''jogPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def overrideCenter (self, *args, **kwargs)-> Point3d :
      '''overrideCenter( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d overrideCenter(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogAngle (self, *args, **kwargs)-> None :
      '''setJogAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setJogAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setJogPoint (self, *args, **kwargs)-> None :
      '''setJogPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setJogPointPP (self, *args, **kwargs)-> None :
      '''setJogPointPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogPointPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOverrideCenter (self, *args, **kwargs)-> None :
      '''setOverrideCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOverrideCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOverrideCenterPP (self, *args, **kwargs)-> None :
      '''setOverrideCenterPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOverrideCenterPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextPositionPP (self, *args, **kwargs)-> None :
      '''setTextPositionPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPositionPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RasterImage:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> int :
      '''brightness( (RasterImage)arg1) -> int :

    C++ signature :
        signed char brightness(class PyDbRasterImage {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImage :
      '''cast( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbRasterImage {lvalue})'''
    ...
    def clipBoundaryType (self, *args, **kwargs)-> ClipBoundaryType :
      '''clipBoundaryType( (RasterImage)arg1) -> ClipBoundaryType :

    C++ signature :
        enum AcDbRasterImage::ClipBoundaryType clipBoundaryType(class PyDbRasterImage {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImage :
      '''cloneFrom( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (RasterImage)arg1) -> int :

    C++ signature :
        signed char contrast(class PyDbRasterImage {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (RasterImage)arg1) -> int :

    C++ signature :
        signed char fade(class PyDbRasterImage {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOrientation (self, *args, **kwargs)-> None :
      '''getOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def getPixelToModelTransform (self, *args, **kwargs)-> Matrix3d :
      '''getPixelToModelTransform( (RasterImage)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d getPixelToModelTransform(class PyDbRasterImage {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getVertices (self, *args, **kwargs)-> list :
      '''getVertices( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list getVertices(class PyDbRasterImage {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (RasterImage)arg1) -> float :

    C++ signature :
        double height(class PyDbRasterImage {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def imageDefId (self, *args, **kwargs)-> ObjectId :
      '''imageDefId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDefId(class PyDbRasterImage {lvalue})'''
    ...
    def imageHeight (self, *args, **kwargs)-> float :
      '''imageHeight( (RasterImage)arg1) -> float :

    C++ signature :
        double imageHeight(class PyDbRasterImage {lvalue})'''
    ...
    def imageSize (self, *args, **kwargs)-> Vector2d :
      '''imageSize( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue})

imageSize( (RasterImage)arg1, (bool)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue},bool)'''
    ...
    def imageWidth (self, *args, **kwargs)-> float :
      '''imageWidth( (RasterImage)arg1) -> float :

    C++ signature :
        double imageWidth(class PyDbRasterImage {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbRasterImage {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isImageShown (self, *args, **kwargs)-> bool :
      '''isImageShown( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageShown(class PyDbRasterImage {lvalue})'''
    ...
    def isImageTransparent (self, *args, **kwargs)-> bool :
      '''isImageTransparent( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageTransparent(class PyDbRasterImage {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, *args, **kwargs)-> bool :
      '''isSetDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2) -> bool :

    C++ signature :
        bool isSetDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt)'''
    ...
    def isShownClipped (self, *args, **kwargs)-> bool :
      '''isShownClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isShownClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (RasterImage)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbRasterImage {lvalue})'''
    ...
    def reactorId (self, *args, **kwargs)-> ObjectId :
      '''reactorId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId reactorId(class PyDbRasterImage {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RasterImage)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRasterImage {lvalue})'''
    ...
    def scale (self, *args, **kwargs)-> Vector2d :
      '''scale( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d scale(class PyDbRasterImage {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, *args, **kwargs)-> None :
      '''setClipBoundaryToWholeImage( (RasterImage)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setClipBoundaryToWholeImage(class PyDbRasterImage {lvalue},class AcGeVector2d {lvalue})'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, *args, **kwargs)-> None :
      '''setDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2, (bool)arg3) -> None :

    C++ signature :
        void setDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt,bool)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setFade(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbRasterImage {lvalue},double)'''
    ...
    def setImageDefId (self, *args, **kwargs)-> None :
      '''setImageDefId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setImageDefId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOrientation (self, *args, **kwargs)-> bool :
      '''setOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> bool :

    C++ signature :
        bool setOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReactorId (self, *args, **kwargs)-> None :
      '''setReactorId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setReactorId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRasterImage {lvalue},double)'''
    ...
    def setShowClipped (self, *args, **kwargs)-> None :
      '''setShowClipped( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowClipped(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setShowImage (self, *args, **kwargs)-> None :
      '''setShowImage( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowImage(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbRasterImage {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (RasterImage)arg1) -> float :

    C++ signature :
        double width(class PyDbRasterImage {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RasterImageDef:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def activeFileName (self, *args, **kwargs)-> str :
      '''activeFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > activeFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImageDef :
      '''cast( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImageDef :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createImageDictionary (self, *args, **kwargs)-> ObjectId :
      '''createImageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId createImageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def embed (self, *args, **kwargs)-> None :
      '''embed( (RasterImageDef)arg1) -> None :

    C++ signature :
        void embed(class PyDbRasterImageDef {lvalue})'''
    ...
    def entityCount (self, *args, **kwargs)-> int :
      '''entityCount( (RasterImageDef)arg1) -> int :

    C++ signature :
        int entityCount(class PyDbRasterImageDef {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fileType (self, *args, **kwargs)-> str :
      '''fileType( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileType(class PyDbRasterImageDef {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def imageDictionary (self, *args, **kwargs)-> ObjectId :
      '''imageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEmbedded (self, *args, **kwargs)-> bool :
      '''isEmbedded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isEmbedded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> None :
      '''load( (RasterImageDef)arg1) -> None :

    C++ signature :
        void load(class PyDbRasterImageDef {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def resolutionMMPerPixel (self, *args, **kwargs)-> Vector2d :
      '''resolutionMMPerPixel( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d resolutionMMPerPixel(class PyDbRasterImageDef {lvalue})'''
    ...
    def resolutionUnits (self, *args, **kwargs)-> ImageUnits :
      '''resolutionUnits( (RasterImageDef)arg1) -> ImageUnits :

    C++ signature :
        enum AcDbRasterImageDef::Units resolutionUnits(class PyDbRasterImageDef {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def searchForActivePath (self, *args, **kwargs)-> str :
      '''searchForActivePath( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > searchForActivePath(class PyDbRasterImageDef {lvalue})'''
    ...
    def setActiveFileName (self, *args, **kwargs)-> None :
      '''setActiveFileName( (RasterImageDef)arg1, (str)arg2) -> None :

    C++ signature :
        void setActiveFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setResolutionMMPerPixel (self, *args, **kwargs)-> None :
      '''setResolutionMMPerPixel( (RasterImageDef)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setResolutionMMPerPixel(class PyDbRasterImageDef {lvalue},class AcGeVector2d)'''
    ...
    def setResolutionUnits (self, *args, **kwargs)-> None :
      '''setResolutionUnits( (RasterImageDef)arg1, (ImageUnits)arg2) -> None :

    C++ signature :
        void setResolutionUnits(class PyDbRasterImageDef {lvalue},enum AcDbRasterImageDef::Units)'''
    ...
    def setSourceFileName (self, *args, **kwargs)-> None :
      '''setSourceFileName( (RasterImageDef)arg1, (str)arg2) -> None :

    C++ signature :
        void setSourceFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def size (self, *args, **kwargs)-> Vector2d :
      '''size( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d size(class PyDbRasterImageDef {lvalue})'''
    ...
    def sourceFileName (self, *args, **kwargs)-> str :
      '''sourceFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > sourceFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def suggestName (self, *args, **kwargs)-> str :
      '''suggestName( (Dictionary)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suggestName(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (RasterImageDef)arg1) -> None :

    C++ signature :
        void unload(class PyDbRasterImageDef {lvalue})

unload( (RasterImageDef)arg1, (bool)arg2) -> None :

    C++ signature :
        void unload(class PyDbRasterImageDef {lvalue},bool)'''
    ...
    def updateEntities (self, *args, **kwargs)-> None :
      '''updateEntities( (RasterImageDef)arg1) -> None :

    C++ signature :
        void updateEntities(class PyDbRasterImageDef {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RasterImageDefReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImageDefReactor :
      '''cast( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImageDefReactor :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setEnable (self, *args, **kwargs)-> None :
      '''setEnable( (bool)arg1) -> None :

    C++ signature :
        void setEnable(bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RegAppTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (RegAppTable)arg1, (RegAppTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbRegAppTable {lvalue},class PyDbRegAppTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RegAppTable :
      '''cast( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RegAppTable :
      '''cloneFrom( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RegAppTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RegAppTableRecord :
      '''cast( (RxObject)arg1) -> RegAppTableRecord :

    C++ signature :
        class PyDbRegAppTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RegAppTableRecord :
      '''cloneFrom( (RxObject)arg1) -> RegAppTableRecord :

    C++ signature :
        class PyDbRegAppTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Region:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Region :
      '''cast( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Region :
      '''cloneFrom( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createFromCurves (self, *args, **kwargs)-> list :
      '''createFromCurves( (list)arg1) -> list :

    C++ signature :
        class boost::python::list createFromCurves(class boost::python::list)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Region)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbRegion {lvalue})'''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RemapFileContext:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAfterXrefResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawingOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRasterResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrefResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class RevolveOptions:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def checkRevolveCurve (self, *args, **kwargs)-> tuple :
      '''checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d)

checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (bool)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def closeToAxis (self, *args, **kwargs)-> bool :
      '''closeToAxis( (RevolveOptions)arg1) -> bool :

    C++ signature :
        bool closeToAxis(class PyDbRevolveOptions {lvalue})'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbRevolveOptions {lvalue})'''
    ...
    def setCloseToAxis (self, *args, **kwargs)-> None :
      '''setCloseToAxis( (RevolveOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCloseToAxis(class PyDbRevolveOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbRevolveOptions {lvalue})'''
    ...

class RevolvedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RevolvedSurface :
      '''cast( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RevolvedSurface :
      '''cloneFrom( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class RotatedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RotatedDimension :
      '''cast( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RotatedDimension :
      '''cloneFrom( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs)-> Point3d :
      '''dimLinePoint( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbRotatedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> None :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> None :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> None :

    C++ signature :
        void fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Dimension)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (RotatedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbRotatedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> Point3d :
      '''jogSymbolPosition( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbRotatedDimension {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (RotatedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbRotatedDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> None :
      '''recomputeDimBlock( (Dimension)arg1) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> None :
      '''removeTextField( (Dimension)arg1) -> None :

    C++ signature :
        void removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RotatedDimension)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRotatedDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> None :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> None :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> None :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> None :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, *args, **kwargs)-> None :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> None :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> None :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> None :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> None :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> None :
      '''setDimLinePoint( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimLinePoint(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> None :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> None :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> None :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> None :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> None :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> None :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> None :
      '''setJogSymbolOn( (RotatedDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setJogSymbolOn(class PyDbRotatedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> None :
      '''setJogSymbolPosition( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogSymbolPosition(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (RotatedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> None :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RotatedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> None :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> None :

    C++ signature :
        void setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> None :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> None :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> None :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> None :

    C++ signature :
        void setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> None :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> None :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> None :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> None :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> None :
      '''useDefaultTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> None :
      '''useSetTextPosition( (Dimension)arg1) -> None :

    C++ signature :
        void useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbRotatedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbRotatedDimension {lvalue})'''
    ...

class RotationAngle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDegrees000 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees090 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees180 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees270 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegreesUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class RowType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllRowTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDataRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHeaderRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTitleRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SegType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCoincident (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SequenceEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SequenceEnd :
      '''cast( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SequenceEnd :
      '''cloneFrom( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ShadePlotResLevel:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCustom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMaximum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ShadePlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Solid3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def booleanOper (self, *args, **kwargs)-> None :
      '''booleanOper( (Solid3d)arg1, (BoolOperType)arg2, (Solid3d)arg3) -> None :

    C++ signature :
        void booleanOper(class PyDb3dSolid {lvalue},enum AcDb::BoolOperType,class PyDb3dSolid {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Solid3d :
      '''cast( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def chamferEdges (self, *args, **kwargs)-> None :
      '''chamferEdges( (Solid3d)arg1, (list)arg2, (SubentId)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void chamferEdges(class PyDb3dSolid {lvalue},class boost::python::list,class PyDbSubentId,double,double)'''
    ...
    def checkInterference (self, *args, **kwargs)-> tuple :
      '''checkInterference( (Solid3d)arg1, (Solid3d)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkInterference(class PyDb3dSolid {lvalue},class PyDb3dSolid,bool)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cleanBody (self, *args, **kwargs)-> None :
      '''cleanBody( (Solid3d)arg1) -> None :

    C++ signature :
        void cleanBody(class PyDb3dSolid {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Solid3d :
      '''cloneFrom( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def copyEdge (self, *args, **kwargs)-> Entity :
      '''copyEdge( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyEdge(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def copyFace (self, *args, **kwargs)-> Entity :
      '''copyFace( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyFace(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def createBox (self, *args, **kwargs)-> None :
      '''createBox( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createBox(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSolid (self, *args, **kwargs)-> None :
      '''createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Vector3d)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (float)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,double,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> None :
      '''createFrom( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void createFrom(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...
    def createFrustum (self, *args, **kwargs)-> None :
      '''createFrustum( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createFrustum(class PyDb3dSolid {lvalue},double,double,double,double)'''
    ...
    def createPyramid (self, *args, **kwargs)-> None :
      '''createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double)

createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double,double)'''
    ...
    def createRevolvedSolid (self, *args, **kwargs)-> None :
      '''createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (RevolveOptions)arg7) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})

createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Point3d)arg4, (Vector3d)arg5, (float)arg6, (float)arg7, (RevolveOptions)arg8) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})'''
    ...
    def createSculptedSolid (self, *args, **kwargs)-> None :
      '''createSculptedSolid( (Solid3d)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void createSculptedSolid(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def createSphere (self, *args, **kwargs)-> None :
      '''createSphere( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void createSphere(class PyDb3dSolid {lvalue},double)'''
    ...
    def createSweptSolid (self, *args, **kwargs)-> None :
      '''createSweptSolid( (Solid3d)arg1, (Entity)arg2, (Entity)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})

createSweptSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Entity)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})'''
    ...
    def createTorus (self, *args, **kwargs)-> None :
      '''createTorus( (Solid3d)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void createTorus(class PyDb3dSolid {lvalue},double,double)'''
    ...
    def createWedge (self, *args, **kwargs)-> None :
      '''createWedge( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createWedge(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def extrude (self, *args, **kwargs)-> None :
      '''extrude( (Solid3d)arg1, (Region)arg2, (float)arg3) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double)

extrude( (Solid3d)arg1, (Region)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double,double)'''
    ...
    def extrudeAlongPath (self, *args, **kwargs)-> None :
      '''extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve)

extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve,double)'''
    ...
    def extrudeFaces (self, *args, **kwargs)-> None :
      '''extrudeFaces( (Solid3d)arg1, (list)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeFaces(class PyDb3dSolid {lvalue},class boost::python::list,double,double)'''
    ...
    def extrudeFacesAlongPath (self, *args, **kwargs)-> None :
      '''extrudeFacesAlongPath( (Solid3d)arg1, (list)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeFacesAlongPath(class PyDb3dSolid {lvalue},class boost::python::list {lvalue},class PyDbCurve)'''
    ...
    def filletEdges (self, *args, **kwargs)-> None :
      '''filletEdges( (Solid3d)arg1, (list)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :

    C++ signature :
        void filletEdges(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Solid3d)arg1) -> float :

    C++ signature :
        double getArea(class PyDb3dSolid {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getMassProp (self, *args, **kwargs)-> tuple :
      '''getMassProp( (Solid3d)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getMassProp(class PyDb3dSolid {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getSection (self, *args, **kwargs)-> Region :
      '''getSection( (Solid3d)arg1, (Plane)arg2) -> Region :

    C++ signature :
        class PyDbRegion getSection(class PyDb3dSolid {lvalue},class PyGePlane)'''
    ...
    def getSlice (self, *args, **kwargs)-> Solid3d :
      '''getSlice( (Solid3d)arg1, (Plane)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyGePlane,bool)

getSlice( (Solid3d)arg1, (Surface)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyDbSurface,bool)'''
    ...
    def getSubentColor (self, *args, **kwargs)-> Color :
      '''getSubentColor( (Solid3d)arg1, (SubentId)arg2) -> Color :

    C++ signature :
        class AcCmColor getSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def getSubentMaterial (self, *args, **kwargs)-> ObjectId :
      '''getSubentMaterial( (Solid3d)arg1, (SubentId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def imprintEntity (self, *args, **kwargs)-> None :
      '''imprintEntity( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void imprintEntity(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Solid3d)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDb3dSolid {lvalue})'''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def numChanges (self, *args, **kwargs)-> int :
      '''numChanges( (Solid3d)arg1) -> int :

    C++ signature :
        unsigned int numChanges(class PyDb3dSolid {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def offsetBody (self, *args, **kwargs)-> None :
      '''offsetBody( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void offsetBody(class PyDb3dSolid {lvalue},double)'''
    ...
    def offsetFaces (self, *args, **kwargs)-> None :
      '''offsetFaces( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void offsetFaces(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def projectOnToSolid (self, *args, **kwargs)-> list :
      '''projectOnToSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSolid(class PyDb3dSolid {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def recordHistory (self, *args, **kwargs)-> bool :
      '''recordHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool recordHistory(class PyDb3dSolid {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeFaces (self, *args, **kwargs)-> None :
      '''removeFaces( (Solid3d)arg1, (list)arg2) -> None :

    C++ signature :
        void removeFaces(class PyDb3dSolid {lvalue},class boost::python::list)'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def separateBody (self, *args, **kwargs)-> list :
      '''separateBody( (Solid3d)arg1) -> list :

    C++ signature :
        class boost::python::list separateBody(class PyDb3dSolid {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRecordHistory (self, *args, **kwargs)-> None :
      '''setRecordHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecordHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setShowHistory (self, *args, **kwargs)-> None :
      '''setShowHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setSubentColor (self, *args, **kwargs)-> None :
      '''setSubentColor( (Solid3d)arg1, (SubentId)arg2, (Color)arg3) -> None :

    C++ signature :
        void setSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId,class AcCmColor)'''
    ...
    def setSubentMaterial (self, *args, **kwargs)-> None :
      '''setSubentMaterial( (Solid3d)arg1, (SubentId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId,class PyDbObjectId {lvalue})'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shellBody (self, *args, **kwargs)-> None :
      '''shellBody( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void shellBody(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def showHistory (self, *args, **kwargs)-> bool :
      '''showHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool showHistory(class PyDb3dSolid {lvalue})'''
    ...
    def stlOut (self, *args, **kwargs)-> None :
      '''stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,double)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def taperFaces (self, *args, **kwargs)-> None :
      '''taperFaces( (Solid3d)arg1, (list)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void taperFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def transformFaces (self, *args, **kwargs)-> None :
      '''transformFaces( (Solid3d)arg1, (list)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void transformFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def usesGraphicsCache (self, *args, **kwargs)-> bool :
      '''usesGraphicsCache( (Solid3d)arg1) -> bool :

    C++ signature :
        bool usesGraphicsCache(class PyDb3dSolid {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class StandardScaleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k100_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCustomScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class StdScaleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k1000_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k100_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SubentId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int,__int64)

__init__( (object)arg1, (RxClass)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyRxClass {lvalue},__int64)'''
    ...
    def index (self, *args, **kwargs)-> int :
      '''index( (SubentId)arg1) -> int :

    C++ signature :
        __int64 index(class PyDbSubentId {lvalue})'''
    ...
    def kNull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def setIndex (self, *args, **kwargs)-> None :
      '''setIndex( (SubentId)arg1, (int)arg2) -> None :

    C++ signature :
        void setIndex(class PyDbSubentId {lvalue},__int64)'''
    ...
    def setType (self, *args, **kwargs)-> None :
      '''setType( (SubentId)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setType(class PyDbSubentId {lvalue},unsigned int)'''
    ...
    def setTypeClass (self, *args, **kwargs)-> None :
      '''setTypeClass( (SubentId)arg1, (RxClass)arg2) -> None :

    C++ signature :
        void setTypeClass(class PyDbSubentId {lvalue},class PyRxClass {lvalue})'''
    ...
    def type (self, *args, **kwargs)-> int :
      '''type( (SubentId)arg1) -> int :

    C++ signature :
        unsigned int type(class PyDbSubentId {lvalue})'''
    ...
    def typeClass (self, *args, **kwargs)-> RxClass :
      '''typeClass( (SubentId)arg1) -> RxClass :

    C++ signature :
        class PyRxClass typeClass(class PyDbSubentId {lvalue})'''
    ...

class SubentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAxisSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kClassSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEdgeSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFaceSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMlineSubentCache (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNullSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSilhouetteSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertexSubentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Surface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Surface :
      '''cast( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Surface :
      '''cloneFrom( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class SweepAlignOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAlignSweepEntityToPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTranslatePathToSweepEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTranslateSweepEntityToPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SweepMiterOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBendMiter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCrimpMiter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDefaultMiter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNewMiter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOldMiter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SweepOptions:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def align (self, *args, **kwargs)-> SweepAlignOption :
      '''align( (SweepOptions)arg1) -> SweepAlignOption :

    C++ signature :
        enum AcDbSweepOptions::AlignOption align(class PyDbSweepOptions {lvalue})'''
    ...
    def alignAngle (self, *args, **kwargs)-> float :
      '''alignAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double alignAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def alignStart (self, *args, **kwargs)-> bool :
      '''alignStart( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool alignStart(class PyDbSweepOptions {lvalue})'''
    ...
    def bank (self, *args, **kwargs)-> bool :
      '''bank( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool bank(class PyDbSweepOptions {lvalue})'''
    ...
    def basePoint (self, *args, **kwargs)-> Point3d :
      '''basePoint( (SweepOptions)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d basePoint(class PyDbSweepOptions {lvalue})'''
    ...
    def checkIntersections (self, *args, **kwargs)-> bool :
      '''checkIntersections( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool checkIntersections(class PyDbSweepOptions {lvalue})'''
    ...
    def checkPathCurve (self, *args, **kwargs)-> None :
      '''checkPathCurve( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkPathCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def checkSweepCurve (self, *args, **kwargs)-> tuple :
      '''checkSweepCurve( (SweepOptions)arg1, (Entity)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkSweepCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def endDraftDist (self, *args, **kwargs)-> float :
      '''endDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double endDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def getPathEntityTransform (self, *args, **kwargs)-> bool :
      '''getPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getSweepEntityTransform (self, *args, **kwargs)-> bool :
      '''getSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def miterOption (self, *args, **kwargs)-> SweepMiterOption :
      '''miterOption( (SweepOptions)arg1) -> SweepMiterOption :

    C++ signature :
        enum AcDbSweepOptions::MiterOption miterOption(class PyDbSweepOptions {lvalue})'''
    ...
    def scaleFactor (self, *args, **kwargs)-> float :
      '''scaleFactor( (SweepOptions)arg1) -> float :

    C++ signature :
        double scaleFactor(class PyDbSweepOptions {lvalue})'''
    ...
    def setAlign (self, *args, **kwargs)-> None :
      '''setAlign( (SweepOptions)arg1, (SweepAlignOption)arg2) -> None :

    C++ signature :
        void setAlign(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::AlignOption)'''
    ...
    def setAlignAngle (self, *args, **kwargs)-> None :
      '''setAlignAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setAlignStart (self, *args, **kwargs)-> None :
      '''setAlignStart( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAlignStart(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBank (self, *args, **kwargs)-> None :
      '''setBank( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBank(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBasePoint (self, *args, **kwargs)-> None :
      '''setBasePoint( (SweepOptions)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBasePoint(class PyDbSweepOptions {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def setCheckIntersections (self, *args, **kwargs)-> None :
      '''setCheckIntersections( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCheckIntersections(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setEndDraftDist (self, *args, **kwargs)-> None :
      '''setEndDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setMiterOption (self, *args, **kwargs)-> None :
      '''setMiterOption( (SweepOptions)arg1, (SweepMiterOption)arg2) -> None :

    C++ signature :
        void setMiterOption(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::MiterOption)'''
    ...
    def setPathEntityTransform (self, *args, **kwargs)-> None :
      '''setPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def setScaleFactor (self, *args, **kwargs)-> None :
      '''setScaleFactor( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setScaleFactor(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setStartDraftDist (self, *args, **kwargs)-> None :
      '''setStartDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setSweepEntityTransform (self, *args, **kwargs)-> None :
      '''setSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue},bool)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setTwistRefVec (self, *args, **kwargs)-> None :
      '''setTwistRefVec( (SweepOptions)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setTwistRefVec(class PyDbSweepOptions {lvalue},class AcGeVector3d)'''
    ...
    def startDraftDist (self, *args, **kwargs)-> float :
      '''startDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double startDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def twistRefVec (self, *args, **kwargs)-> Vector3d :
      '''twistRefVec( (SweepOptions)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d twistRefVec(class PyDbSweepOptions {lvalue})'''
    ...

class SweptSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SweptSurface :
      '''cast( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SweptSurface :
      '''cloneFrom( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class SymUtilServices:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockModelSpaceId (self, *args, **kwargs)-> ObjectId :
      '''blockModelSpaceId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockModelSpaceId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def blockModelSpaceName (self, *args, **kwargs)-> str :
      '''blockModelSpaceName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > blockModelSpaceName(class PyDbSymUtilServices {lvalue})'''
    ...
    def blockPaperSpaceId (self, *args, **kwargs)-> ObjectId :
      '''blockPaperSpaceId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockPaperSpaceId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def blockPaperSpaceName (self, *args, **kwargs)-> str :
      '''blockPaperSpaceName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > blockPaperSpaceName(class PyDbSymUtilServices {lvalue})'''
    ...
    def compareSymbolName (self, *args, **kwargs)-> int :
      '''compareSymbolName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> int :

    C++ signature :
        int compareSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def compatibilityMode (self, *args, **kwargs)-> bool :
      '''compatibilityMode( (SymUtilServices)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool compatibilityMode(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def getBlockNameFromInsertPathName (self, *args, **kwargs)-> str :
      '''getBlockNameFromInsertPathName( (SymUtilServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockNameFromInsertPathName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getInsertPathNameFromBlockName (self, *args, **kwargs)-> str :
      '''getInsertPathNameFromBlockName( (SymUtilServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getInsertPathNameFromBlockName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getPathNameFromSymbolName (self, *args, **kwargs)-> str :
      '''getPathNameFromSymbolName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPathNameFromSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getSymbolNameFromPathName (self, *args, **kwargs)-> str :
      '''getSymbolNameFromPathName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSymbolNameFromPathName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasVerticalBar (self, *args, **kwargs)-> bool :
      '''hasVerticalBar( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasVerticalBar(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockLayoutName (self, *args, **kwargs)-> bool :
      '''isBlockLayoutName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockLayoutName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockModelSpaceName (self, *args, **kwargs)-> bool :
      '''isBlockModelSpaceName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockModelSpaceName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockPaperSpaceName (self, *args, **kwargs)-> bool :
      '''isBlockPaperSpaceName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockPaperSpaceName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLayerDefpointsName (self, *args, **kwargs)-> bool :
      '''isLayerDefpointsName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLayerDefpointsName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLayerZeroName (self, *args, **kwargs)-> bool :
      '''isLayerZeroName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLayerZeroName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeByBlockName (self, *args, **kwargs)-> bool :
      '''isLinetypeByBlockName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeByBlockName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeByLayerName (self, *args, **kwargs)-> bool :
      '''isLinetypeByLayerName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeByLayerName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeContinuousName (self, *args, **kwargs)-> bool :
      '''isLinetypeContinuousName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeContinuousName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isRegAppAcadName (self, *args, **kwargs)-> bool :
      '''isRegAppAcadName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isRegAppAcadName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isTextStyleStandardName (self, *args, **kwargs)-> bool :
      '''isTextStyleStandardName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isTextStyleStandardName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isViewportActiveName (self, *args, **kwargs)-> bool :
      '''isViewportActiveName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isViewportActiveName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def layerDefpointsId (self, *args, **kwargs)-> ObjectId :
      '''layerDefpointsId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerDefpointsId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def layerDefpointsName (self, *args, **kwargs)-> str :
      '''layerDefpointsName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layerDefpointsName(class PyDbSymUtilServices {lvalue})'''
    ...
    def layerZeroId (self, *args, **kwargs)-> ObjectId :
      '''layerZeroId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerZeroId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def layerZeroName (self, *args, **kwargs)-> str :
      '''layerZeroName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layerZeroName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeByBlockId (self, *args, **kwargs)-> ObjectId :
      '''linetypeByBlockId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeByBlockId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeByBlockName (self, *args, **kwargs)-> str :
      '''linetypeByBlockName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeByBlockName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeByLayerId (self, *args, **kwargs)-> ObjectId :
      '''linetypeByLayerId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeByLayerId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeByLayerName (self, *args, **kwargs)-> str :
      '''linetypeByLayerName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeByLayerName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeContinuousId (self, *args, **kwargs)-> ObjectId :
      '''linetypeContinuousId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeContinuousId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeContinuousName (self, *args, **kwargs)-> str :
      '''linetypeContinuousName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeContinuousName(class PyDbSymUtilServices {lvalue})'''
    ...
    def makeDependentName (self, *args, **kwargs)-> str :
      '''makeDependentName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > makeDependentName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def regAppAcadId (self, *args, **kwargs)-> ObjectId :
      '''regAppAcadId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId regAppAcadId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def regAppAcadName (self, *args, **kwargs)-> str :
      '''regAppAcadName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > regAppAcadName(class PyDbSymUtilServices {lvalue})'''
    ...
    def repairPreExtendedSymbolName (self, *args, **kwargs)-> str :
      '''repairPreExtendedSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > repairPreExtendedSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def repairSymbolName (self, *args, **kwargs)-> str :
      '''repairSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > repairSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def textStyleStandardId (self, *args, **kwargs)-> ObjectId :
      '''textStyleStandardId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleStandardId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def textStyleStandardName (self, *args, **kwargs)-> str :
      '''textStyleStandardName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textStyleStandardName(class PyDbSymUtilServices {lvalue})'''
    ...
    def validateCompatibleSymbolName (self, *args, **kwargs)-> ErrorStatus :
      '''validateCompatibleSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3, (bool)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validateCompatibleSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,bool)'''
    ...
    def validatePreExtendedSymbolName (self, *args, **kwargs)-> ErrorStatus :
      '''validatePreExtendedSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validatePreExtendedSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def validateSymbolName (self, *args, **kwargs)-> ErrorStatus :
      '''validateSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validateSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def viewportActiveName (self, *args, **kwargs)-> str :
      '''viewportActiveName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > viewportActiveName(class PyDbSymUtilServices {lvalue})'''
    ...

class SymbolTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (SymbolTable)arg1, (SymbolTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbSymbolTable {lvalue},class PyDbSymbolTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SymbolTable :
      '''cast( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SymbolTable :
      '''cloneFrom( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class SymbolTableRecord:
    def __init__ (self: SymbolTableRecord,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: PyRx.RxObject)-> SymbolTableRecord :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def cloneFrom (otherObject: PyRx.RxObject)-> SymbolTableRecord :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Table:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def alignment (self, *args, **kwargs)-> CellAlignment :
      '''alignment( (Table)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},enum AcDb::RowType)

alignment( (Table)arg1, (int)arg2, (int)arg3) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},int,int)'''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachmentPoint (self, *args, **kwargs)-> Point3d :
      '''attachmentPoint( (Table)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int)

attachmentPoint( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int,int)'''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},enum AcDb::RowType)

backgroundColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},int,int)'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def blockScale (self, *args, **kwargs)-> float :
      '''blockScale( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockScale(class PyDbTable {lvalue},int,int)'''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTableRecordId (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int)

blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakFlowDirection (self, *args, **kwargs)-> TableBreakFlowDirection :
      '''breakFlowDirection( (Table)arg1) -> TableBreakFlowDirection :

    C++ signature :
        enum AcDb::TableBreakFlowDirection breakFlowDirection(class PyDbTable {lvalue})'''
    ...
    def breakHeight (self, *args, **kwargs)-> float :
      '''breakHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double breakHeight(class PyDbTable {lvalue},int)'''
    ...
    def breakOffset (self, *args, **kwargs)-> Vector3d :
      '''breakOffset( (Table)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d breakOffset(class PyDbTable {lvalue},int)'''
    ...
    def breakOption (self, *args, **kwargs)-> TableBreakOption :
      '''breakOption( (Table)arg1) -> TableBreakOption :

    C++ signature :
        enum AcDb::TableBreakOption breakOption(class PyDbTable {lvalue})'''
    ...
    def breakSpacing (self, *args, **kwargs)-> float :
      '''breakSpacing( (Table)arg1) -> float :

    C++ signature :
        double breakSpacing(class PyDbTable {lvalue})'''
    ...
    def canDelete (self, *args, **kwargs)-> bool :
      '''canDelete( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> bool :

    C++ signature :
        bool canDelete(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def canInsert (self, *args, **kwargs)-> bool :
      '''canInsert( (Table)arg1, (int)arg2, (bool)arg3) -> bool :

    C++ signature :
        bool canInsert(class PyDbTable {lvalue},int,bool)'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Table :
      '''cast( (RxObject)arg1) -> Table :

    C++ signature :
        class PyDbTable cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def cellRange (self, *args, **kwargs)-> CellRange :
      '''cellRange( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange cellRange(class PyDbTable {lvalue})'''
    ...
    def cellState (self, *args, **kwargs)-> CellState :
      '''cellState( (Table)arg1, (int)arg2, (int)arg3) -> CellState :

    C++ signature :
        enum AcDb::CellState cellState(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyle (self, *args, **kwargs)-> str :
      '''cellStyle( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > cellStyle(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyleOverrides (self, *args, **kwargs)-> list :
      '''cellStyleOverrides( (Table)arg1, (int)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list cellStyleOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def cellType (self, *args, **kwargs)-> CellType :
      '''cellType( (Table)arg1, (int)arg2, (int)arg3) -> CellType :

    C++ signature :
        enum AcDb::CellType cellType(class PyDbTable {lvalue},int,int)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearCellOverrides (self, *args, **kwargs)-> None :
      '''clearCellOverrides( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void clearCellOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def clearSubSelection (self, *args, **kwargs)-> None :
      '''clearSubSelection( (Table)arg1) -> None :

    C++ signature :
        void clearSubSelection(class PyDbTable {lvalue})'''
    ...
    def clearTableStyleOverrides (self, *args, **kwargs)-> None :
      '''clearTableStyleOverrides( (Table)arg1) -> None :

    C++ signature :
        void clearTableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Table :
      '''cloneFrom( (RxObject)arg1) -> Table :

    C++ signature :
        class PyDbTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def columnWidth (self, *args, **kwargs)-> float :
      '''columnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double columnWidth(class PyDbTable {lvalue},int)'''
    ...
    def contentColor (self, *args, **kwargs)-> Color :
      '''contentColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},enum AcDb::RowType)

contentColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int)

contentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int,int)'''
    ...
    def contentLayout (self, *args, **kwargs)-> CellContentLayout :
      '''contentLayout( (Table)arg1, (int)arg2, (int)arg3) -> CellContentLayout :

    C++ signature :
        enum AcDb::CellContentLayout contentLayout(class PyDbTable {lvalue},int,int)'''
    ...
    def contentType (self, *args, **kwargs)-> CellContentType :
      '''contentType( (Table)arg1, (int)arg2, (int)arg3) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int)

contentType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createContent (self, *args, **kwargs)-> int :
      '''createContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> int :

    C++ signature :
        int createContent(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def dataFormat (self, *args, **kwargs)-> str :
      '''dataFormat( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int)

dataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int,int)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def deleteCellContent (self, *args, **kwargs)-> None :
      '''deleteCellContent( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteCellContent(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteColumns (self, *args, **kwargs)-> None :
      '''deleteColumns( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteColumns(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteContent (self, *args, **kwargs)-> None :
      '''deleteContent( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},int,int)

deleteContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},int,int,int)

deleteContent( (Table)arg1, (CellRange)arg2) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def deleteRows (self, *args, **kwargs)-> None :
      '''deleteRows( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteRows(class PyDbTable {lvalue},int,int)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (Table)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbTable {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def enableBreak (self, *args, **kwargs)-> None :
      '''enableBreak( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void enableBreak(class PyDbTable {lvalue},bool)'''
    ...
    def enableMergeAll (self, *args, **kwargs)-> None :
      '''enableMergeAll( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> None :

    C++ signature :
        void enableMergeAll(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> None :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> None :

    C++ signature :
        void explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldId (self, *args, **kwargs)-> ObjectId :
      '''fieldId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int)

fieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def flowDirection (self, *args, **kwargs)-> TableFlowDirection :
      '''flowDirection( (Table)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTable {lvalue})'''
    ...
    def generateLayout (self, *args, **kwargs)-> None :
      '''generateLayout( (Table)arg1) -> None :

    C++ signature :
        void generateLayout(class PyDbTable {lvalue})'''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> str :
      '''getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId)

getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def getCellExtents (self, *args, **kwargs)-> list :
      '''getCellExtents( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> list :

    C++ signature :
        class boost::python::list getCellExtents(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getDataLink (self, *args, **kwargs)-> ObjectId :
      '''getDataLink( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataLinkRange (self, *args, **kwargs)-> CellRange :
      '''getDataLinkRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getDataLinkRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (Table)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},enum AcDb::RowType)

getDataType( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int)

getDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFormula (self, *args, **kwargs)-> str :
      '''getFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getIterator (self, *args, **kwargs)-> list :
      '''getIterator( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue})

getIterator( (Table)arg1, (TableIteratorOption)arg2) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},enum AcDb::TableIteratorOption)

getIterator( (Table)arg1, (CellRange)arg2 [, (TableIteratorOption)arg3]) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},struct AcCellRange [,enum AcDb::TableIteratorOption])'''
    ...
    def getMergeRange (self, *args, **kwargs)-> CellRange :
      '''getMergeRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getMergeRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getOverride (self, *args, **kwargs)-> CellProperty :
      '''getOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellProperty :

    C++ signature :
        enum AcDb::CellProperty getOverride(class PyDbTable {lvalue},int,int,int)

getOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridProperty :

    C++ signature :
        enum AcDb::GridProperty getOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getSubSelection (self, *args, **kwargs)-> CellRange :
      '''getSubSelection( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange getSubSelection(class PyDbTable {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs)-> Color :
      '''gridColor( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineStyle (self, *args, **kwargs)-> GridLineStyle :
      '''gridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineWeight (self, *args, **kwargs)-> LineWeight :
      '''gridLineWeight( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLinetype (self, *args, **kwargs)-> ObjectId :
      '''gridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridVisibility (self, *args, **kwargs)-> Visibility :
      '''gridVisibility( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasFormula (self, *args, **kwargs)-> bool :
      '''hasFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool hasFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hasSubSelection (self, *args, **kwargs)-> bool :
      '''hasSubSelection( (Table)arg1) -> bool :

    C++ signature :
        bool hasSubSelection(class PyDbTable {lvalue})'''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Table)arg1) -> float :

    C++ signature :
        double height(class PyDbTable {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> tuple :
      '''hitTest( (Table)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple hitTest(class PyDbTable {lvalue},class AcGePoint3d,class AcGeVector3d,double,double)'''
    ...
    def horzCellMargin (self, *args, **kwargs)-> float :
      '''horzCellMargin( (Table)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTable {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def insertColumns (self, *args, **kwargs)-> None :
      '''insertColumns( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> None :

    C++ signature :
        void insertColumns(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertColumnsAndInherit (self, *args, **kwargs)-> None :
      '''insertColumnsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void insertColumnsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def insertRows (self, *args, **kwargs)-> None :
      '''insertRows( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> None :

    C++ signature :
        void insertRows(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertRowsAndInherit (self, *args, **kwargs)-> None :
      '''insertRowsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void insertRowsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAutoScale (self, *args, **kwargs)-> bool :
      '''isAutoScale( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int)

isAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (Table)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},enum AcDb::RowType)

isBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},int,int)'''
    ...
    def isBreakEnabled (self, *args, **kwargs)-> bool :
      '''isBreakEnabled( (Table)arg1) -> bool :

    C++ signature :
        bool isBreakEnabled(class PyDbTable {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isContentEditable (self, *args, **kwargs)-> bool :
      '''isContentEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isContentEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isEmpty (self, *args, **kwargs)-> bool :
      '''isEmpty( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isEmpty(class PyDbTable {lvalue},int,int)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFormatEditable (self, *args, **kwargs)-> bool :
      '''isFormatEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isFormatEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isHeaderSuppressed (self, *args, **kwargs)-> bool :
      '''isHeaderSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTable {lvalue})'''
    ...
    def isLinked (self, *args, **kwargs)-> bool :
      '''isLinked( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isLinked(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs)-> bool :
      '''isMergeAllEnabled( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergedCell (self, *args, **kwargs)-> tuple :
      '''isMergedCell( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple isMergedCell(class PyDbTable {lvalue},int,int)'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRegenerateTableSuppressed (self, *args, **kwargs)-> bool :
      '''isRegenerateTableSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isRegenerateTableSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTitleSuppressed (self, *args, **kwargs)-> bool :
      '''isTitleSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def margin (self, *args, **kwargs)-> float :
      '''margin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4) -> float :

    C++ signature :
        double margin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin)'''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def mergeCells (self, *args, **kwargs)-> None :
      '''mergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :

    C++ signature :
        void mergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def minimumColumnWidth (self, *args, **kwargs)-> float :
      '''minimumColumnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumColumnWidth(class PyDbTable {lvalue},int)'''
    ...
    def minimumRowHeight (self, *args, **kwargs)-> float :
      '''minimumRowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumRowHeight(class PyDbTable {lvalue},int)'''
    ...
    def minimumTableHeight (self, *args, **kwargs)-> float :
      '''minimumTableHeight( (Table)arg1) -> float :

    C++ signature :
        double minimumTableHeight(class PyDbTable {lvalue})'''
    ...
    def minimumTableWidth (self, *args, **kwargs)-> float :
      '''minimumTableWidth( (Table)arg1) -> float :

    C++ signature :
        double minimumTableWidth(class PyDbTable {lvalue})'''
    ...
    def moveContent (self, *args, **kwargs)-> None :
      '''moveContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :

    C++ signature :
        void moveContent(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def numColumns (self, *args, **kwargs)-> int :
      '''numColumns( (Table)arg1) -> int :

    C++ signature :
        unsigned int numColumns(class PyDbTable {lvalue})'''
    ...
    def numContents (self, *args, **kwargs)-> int :
      '''numContents( (Table)arg1, (int)arg2, (int)arg3) -> int :

    C++ signature :
        int numContents(class PyDbTable {lvalue},int,int)'''
    ...
    def numRows (self, *args, **kwargs)-> int :
      '''numRows( (Table)arg1) -> int :

    C++ signature :
        unsigned int numRows(class PyDbTable {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recomputeTableBlock (self, *args, **kwargs)-> None :
      '''recomputeTableBlock( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void recomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> None :
      '''removeAllOverrides( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void removeAllOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def removeDataLink (self, *args, **kwargs)-> None :
      '''removeDataLink( (Table)arg1) -> None :

    C++ signature :
        void removeDataLink(class PyDbTable {lvalue})

removeDataLink( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void removeDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Table)arg1) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue})

rotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue},int,int,int)'''
    ...
    def rowHeight (self, *args, **kwargs)-> float :
      '''rowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double rowHeight(class PyDbTable {lvalue},int)'''
    ...
    def rowType (self, *args, **kwargs)-> RowType :
      '''rowType( (Table)arg1, (int)arg2) -> RowType :

    C++ signature :
        enum AcDb::RowType rowType(class PyDbTable {lvalue},int)'''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double scale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''setAlignment( (Table)arg1, (CellAlignment)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTable {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (Table)arg1, (int)arg2, (int)arg3, (CellAlignment)arg4) -> None :

    C++ signature :
        void setAlignment(class PyDbTable {lvalue},int,int,enum AcDb::CellAlignment)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setAutoScale (self, *args, **kwargs)-> None :
      '''setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> None :

    C++ signature :
        void setAutoScale(class PyDbTable {lvalue},int,int,bool)

setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (bool)arg5) -> None :

    C++ signature :
        void setAutoScale(class PyDbTable {lvalue},int,int,int,bool)'''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''setBackgroundColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTable {lvalue},int,int,class AcCmColor)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> None :
      '''setBackgroundColorNone( (Table)arg1, (bool)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTable {lvalue},bool,enum AcDb::RowType)

setBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (str)arg5) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (str)arg6) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void setBlockRotation(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void setBlockScale(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> None :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> None :
      '''setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (bool)arg5) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbTable {lvalue},int,int,class PyDbObjectId,bool)

setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (bool)arg6) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,bool)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> None :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setBreakFlowDirection (self, *args, **kwargs)-> None :
      '''setBreakFlowDirection( (Table)arg1, (TableBreakFlowDirection)arg2) -> None :

    C++ signature :
        void setBreakFlowDirection(class PyDbTable {lvalue},enum AcDb::TableBreakFlowDirection)'''
    ...
    def setBreakHeight (self, *args, **kwargs)-> None :
      '''setBreakHeight( (Table)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setBreakHeight(class PyDbTable {lvalue},int,double)'''
    ...
    def setBreakOffset (self, *args, **kwargs)-> None :
      '''setBreakOffset( (Table)arg1, (int)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setBreakOffset(class PyDbTable {lvalue},int,class AcGeVector3d)'''
    ...
    def setBreakOption (self, *args, **kwargs)-> None :
      '''setBreakOption( (Table)arg1, (TableBreakOption)arg2) -> None :

    C++ signature :
        void setBreakOption(class PyDbTable {lvalue},enum AcDb::TableBreakOption)'''
    ...
    def setBreakSpacing (self, *args, **kwargs)-> None :
      '''setBreakSpacing( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setBreakSpacing(class PyDbTable {lvalue},double)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCellState (self, *args, **kwargs)-> None :
      '''setCellState( (Table)arg1, (int)arg2, (int)arg3, (CellState)arg4) -> None :

    C++ signature :
        void setCellState(class PyDbTable {lvalue},int,int,enum AcDb::CellState)'''
    ...
    def setCellStyle (self, *args, **kwargs)-> None :
      '''setCellStyle( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setCellStyle(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCellType (self, *args, **kwargs)-> None :
      '''setCellType( (Table)arg1, (int)arg2, (int)arg3, (CellType)arg4) -> None :

    C++ signature :
        void setCellType(class PyDbTable {lvalue},int,int,enum AcDb::CellType)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setColumnWidth (self, *args, **kwargs)-> None :
      '''setColumnWidth( (Table)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setColumnWidth(class PyDbTable {lvalue},int,double)

setColumnWidth( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setColumnWidth(class PyDbTable {lvalue},double)'''
    ...
    def setContentColor (self, *args, **kwargs)-> None :
      '''setContentColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},int,int,class AcCmColor)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (Color)arg5) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},int,int,int,class AcCmColor)'''
    ...
    def setContentLayout (self, *args, **kwargs)-> None :
      '''setContentLayout( (Table)arg1, (int)arg2, (int)arg3, (CellContentLayout)arg4) -> None :

    C++ signature :
        void setContentLayout(class PyDbTable {lvalue},int,int,enum AcDb::CellContentLayout)'''
    ...
    def setDataFormat (self, *args, **kwargs)-> None :
      '''setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setDataFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> None :

    C++ signature :
        void setDataFormat(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataLink (self, *args, **kwargs)-> None :
      '''setDataLink( (Table)arg1, (CellRange)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setDataLink(class PyDbTable {lvalue},struct AcCellRange,class PyDbObjectId,bool)'''
    ...
    def setDataType (self, *args, **kwargs)-> None :
      '''setDataType( (Table)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (object)arg4, (object)arg5) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},int,int,enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5, (object)arg6) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},int,int,int,enum AcValue::DataType,enum AcValue::UnitType)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDirection (self, *args, **kwargs)-> None :
      '''setDirection( (Table)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setDirection(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldId (self, *args, **kwargs)-> None :
      '''setFieldId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void setFieldId(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setFieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (object)arg6) -> None :

    C++ signature :
        void setFieldId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,enum AcDb::CellOption)'''
    ...
    def setFlowDirection (self, *args, **kwargs)-> None :
      '''setFlowDirection( (Table)arg1, (TableFlowDirection)arg2) -> None :

    C++ signature :
        void setFlowDirection(class PyDbTable {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFormula (self, *args, **kwargs)-> None :
      '''setFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> None :

    C++ signature :
        void setFormula(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''setGridColor( (Table)arg1, (Color)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTable {lvalue},class AcCmColor,int,int)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Color)arg5) -> None :

    C++ signature :
        void setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,class AcCmColor)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Color)arg5) -> None :

    C++ signature :
        void setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class AcCmColor)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''setGridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (float)arg5) -> None :

    C++ signature :
        void setGridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,double)'''
    ...
    def setGridLineStyle (self, *args, **kwargs)-> None :
      '''setGridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridLineStyle)arg5) -> None :

    C++ signature :
        void setGridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridLineStyle)'''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''setGridLineWeight( (Table)arg1, (LineWeight)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTable {lvalue},enum AcDb::LineWeight,int,int)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (LineWeight)arg5) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::LineWeight)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (LineWeight)arg5) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::LineWeight)'''
    ...
    def setGridLinetype (self, *args, **kwargs)-> None :
      '''setGridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void setGridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class PyDbObjectId)'''
    ...
    def setGridProperty (self, *args, **kwargs)-> None :
      '''setGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (object)arg5) -> None :

    C++ signature :
        void setGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,struct AcGridProperty)

setGridProperty( (Table)arg1, (CellRange)arg2, (GridLineType)arg3, (object)arg4) -> None :

    C++ signature :
        void setGridProperty(class PyDbTable {lvalue},struct AcCellRange,enum AcDb::GridLineType,struct AcGridProperty)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''setGridVisibility( (Table)arg1, (Visibility)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTable {lvalue},enum AcDb::Visibility,int,int)

setGridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Visibility)arg5) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::Visibility)'''
    ...
    def setGridVisibility3 (self, *args, **kwargs)-> None :
      '''setGridVisibility3( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Visibility)arg5) -> None :

    C++ signature :
        void setGridVisibility3(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::Visibility)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbTable {lvalue},double)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs)-> None :
      '''setHorzCellMargin( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorzCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMargin (self, *args, **kwargs)-> None :
      '''setMargin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4, (float)arg5) -> None :

    C++ signature :
        void setMargin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin,double)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Table)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setOverride (self, *args, **kwargs)-> None :
      '''setOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (CellProperty)arg5) -> None :

    C++ signature :
        void setOverride(class PyDbTable {lvalue},int,int,int,enum AcDb::CellProperty)

setOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridProperty)arg5) -> None :

    C++ signature :
        void setOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridProperty)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Table)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbTable {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRecomputeTableBlock (self, *args, **kwargs)-> None :
      '''setRecomputeTableBlock( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def setRegen (self, *args, **kwargs)-> None :
      '''setRegen( (Table)arg1) -> None :

    C++ signature :
        void setRegen(class PyDbTable {lvalue})'''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbTable {lvalue},double)

setRotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void setRotation(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setRowHeight (self, *args, **kwargs)-> None :
      '''setRowHeight( (Table)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setRowHeight(class PyDbTable {lvalue},int,double)

setRowHeight( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setRowHeight(class PyDbTable {lvalue},double)'''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void setScale(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> None :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setSize (self, *args, **kwargs)-> None :
      '''setSize( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setSize(class PyDbTable {lvalue},int,int)'''
    ...
    def setSubSelection (self, *args, **kwargs)-> None :
      '''setSubSelection( (Table)arg1, (CellRange)arg2) -> None :

    C++ signature :
        void setSubSelection(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def setTableStyle (self, *args, **kwargs)-> None :
      '''setTableStyle( (Table)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTableStyle(class PyDbTable {lvalue},class PyDbObjectId)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (Table)arg1, (float)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},double,enum AcDb::RowType)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},int,int,double)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Table)arg1, (int)arg2, (int)arg3, (RotationAngle)arg4) -> None :

    C++ signature :
        void setTextRotation(class PyDbTable {lvalue},int,int,enum AcDb::RotationAngle)'''
    ...
    def setTextString (self, *args, **kwargs)-> None :
      '''setTextString( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setTextString(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setTextString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> None :

    C++ signature :
        void setTextString(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (Table)arg1, (ObjectId)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def setVertCellMargin (self, *args, **kwargs)-> None :
      '''setVertCellMargin( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setVertCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbTable {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self, *args, **kwargs)-> None :
      '''suppressHeaderRow( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressHeaderRow(class PyDbTable {lvalue},bool)'''
    ...
    def suppressInvisibleGrid (self, *args, **kwargs)-> None :
      '''suppressInvisibleGrid( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressInvisibleGrid(class PyDbTable {lvalue},bool)'''
    ...
    def suppressRegenerateTable (self, *args, **kwargs)-> None :
      '''suppressRegenerateTable( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressRegenerateTable(class PyDbTable {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs)-> None :
      '''suppressTitleRow( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressTitleRow(class PyDbTable {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tableStyle (self, *args, **kwargs)-> ObjectId :
      '''tableStyle( (Table)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tableStyle(class PyDbTable {lvalue})'''
    ...
    def tableStyleOverrides (self, *args, **kwargs)-> list :
      '''tableStyleOverrides( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list tableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (Table)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},enum AcDb::RowType)

textHeight( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int)

textHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int,int)'''
    ...
    def textRotation (self, *args, **kwargs)-> RotationAngle :
      '''textRotation( (Table)arg1, (int)arg2, (int)arg3) -> RotationAngle :

    C++ signature :
        enum AcDb::RotationAngle textRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (object)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,enum AcValue::FormatOption)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int,enum AcValue::FormatOption)'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Table)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},enum AcDb::RowType)

textStyle( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int)

textStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int,int)'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def unmergeCells (self, *args, **kwargs)-> None :
      '''unmergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :

    C++ signature :
        void unmergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def updateDataLink (self, *args, **kwargs)-> None :
      '''updateDataLink( (Table)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> None :

    C++ signature :
        void updateDataLink(class PyDbTable {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)

updateDataLink( (Table)arg1, (int)arg2, (int)arg3, (UpdateDirection)arg4, (UpdateOption)arg5) -> None :

    C++ signature :
        void updateDataLink(class PyDbTable {lvalue},int,int,enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertCellMargin (self, *args, **kwargs)-> float :
      '''vertCellMargin( (Table)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTable {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (Table)arg1) -> float :

    C++ signature :
        double width(class PyDbTable {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class TableBreakFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakFlowDownOrUp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakFlowLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableBreakOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakAllowManualHeights (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakAllowManualPositions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakEnableBreaking (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakRepeatBottomLabels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakRepeatTopLabels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kExactly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableHitItem:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableHitCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitColumnIndicator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitGridLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitRowIndicator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableIteratorOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableIteratorIterateColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateDataLinks (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateRows (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateSelection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorReverseOrder (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipMerged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def alignment (self, *args, **kwargs)-> CellAlignment :
      '''alignment( (TableStyle)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},enum AcDb::RowType)

alignment( (TableStyle)arg1, (str)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},enum AcDb::RowType)

backgroundColor( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (TableStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbTableStyle {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> TableStyle :
      '''cast( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cast(class PyRxObject)'''
    ...
    def cellClass (self, *args, **kwargs)-> int :
      '''cellClass( (TableStyle)arg1, (str)arg2) -> int :

    C++ signature :
        int cellClass(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> TableStyle :
      '''cloneFrom( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},enum AcDb::RowType)

color( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def copyCellStyle (self, *args, **kwargs)-> None :
      '''copyCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void copyCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createCellStyle (self, *args, **kwargs)-> str :
      '''createCellStyle( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > createCellStyle(class PyDbTableStyle {lvalue})

createCellStyle( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

createCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def deleteCellStyle (self, *args, **kwargs)-> None :
      '''deleteCellStyle( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbTableStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def enableMergeAll (self, *args, **kwargs)-> None :
      '''enableMergeAll( (TableStyle)arg1, (bool)arg2, (str)arg3) -> None :

    C++ signature :
        void enableMergeAll(class PyDbTableStyle {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def flowDirection (self, *args, **kwargs)-> TableFlowDirection :
      '''flowDirection( (TableStyle)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTableStyle {lvalue})'''
    ...
    def format (self, *args, **kwargs)-> str :
      '''format( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue})

format( (TableStyle)arg1, (RowType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},enum AcDb::RowType)

format( (TableStyle)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getCellStyles (self, *args, **kwargs)-> list :
      '''getCellStyles( (TableStyle)arg1) -> list :

    C++ signature :
        class boost::python::list getCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (TableStyle)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},enum AcDb::RowType)

getDataType( (TableStyle)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbTableStyle {lvalue})'''
    ...
    def getTemplate (self, *args, **kwargs)-> ObjectId :
      '''getTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs)-> Color :
      '''gridColor( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineStyle (self, *args, **kwargs)-> GridLineStyle :
      '''gridLineStyle( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineWeight (self, *args, **kwargs)-> LineWeight :
      '''gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLinetype (self, *args, **kwargs)-> ObjectId :
      '''gridLinetype( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridVisibility (self, *args, **kwargs)-> Visibility :
      '''gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horzCellMargin (self, *args, **kwargs)-> float :
      '''horzCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (TableStyle)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTableStyle {lvalue},enum AcDb::RowType)'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCellStyleInUse (self, *args, **kwargs)-> bool :
      '''isCellStyleInUse( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isCellStyleInUse(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self, *args, **kwargs)-> bool :
      '''isHeaderSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs)-> bool :
      '''isMergeAllEnabled( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self, *args, **kwargs)-> bool :
      '''isTitleSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def margin (self, *args, **kwargs)-> float :
      '''margin( (TableStyle)arg1, (CellMargin)arg2, (str)arg3) -> float :

    C++ signature :
        double margin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def numCellStyles (self, *args, **kwargs)-> int :
      '''numCellStyles( (TableStyle)arg1) -> int :

    C++ signature :
        int numCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postTableStyleToDb (self, *args, **kwargs)-> ObjectId :
      '''postTableStyleToDb( (TableStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postTableStyleToDb(class PyDbTableStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeTemplate (self, *args, **kwargs)-> ObjectId :
      '''removeTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId removeTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def renameCellStyle (self, *args, **kwargs)-> None :
      '''renameCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void renameCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double rotation(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (str)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''setBackgroundColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> None :
      '''setBackgroundColorNone( (TableStyle)arg1, (bool)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTableStyle {lvalue},bool,enum AcDb::RowType)'''
    ...
    def setBitFlags (self, *args, **kwargs)-> None :
      '''setBitFlags( (TableStyle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setBitFlags(class PyDbTableStyle {lvalue},unsigned int)'''
    ...
    def setCellClass (self, *args, **kwargs)-> None :
      '''setCellClass( (TableStyle)arg1, (int)arg2, (str)arg3) -> None :

    C++ signature :
        void setCellClass(class PyDbTableStyle {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> None :

    C++ signature :
        void setColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataType (self, *args, **kwargs)-> None :
      '''setDataType( (TableStyle)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (str)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self, *args, **kwargs)-> None :
      '''setFlowDirection( (TableStyle)arg1, (TableFlowDirection)arg2) -> None :

    C++ signature :
        void setFlowDirection(class PyDbTableStyle {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setFormat( (TableStyle)arg1, (str)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDb::RowType)

setFormat( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,enum AcDb::RowType)

setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''setGridDoubleLineSpacing( (TableStyle)arg1, (float)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridDoubleLineSpacing(class PyDbTableStyle {lvalue},double,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineStyle (self, *args, **kwargs)-> None :
      '''setGridLineStyle( (TableStyle)arg1, (GridLineStyle)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineStyle,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,enum AcDb::RowType)

setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLinetype (self, *args, **kwargs)-> None :
      '''setGridLinetype( (TableStyle)arg1, (ObjectId)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLinetype(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridProperty (self, *args, **kwargs)-> None :
      '''setGridProperty( (TableStyle)arg1, (object)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridProperty(class PyDbTableStyle {lvalue},struct AcGridProperty,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,enum AcDb::RowType)

setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs)-> None :
      '''setHorzCellMargin( (TableStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorzCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setMargin (self, *args, **kwargs)-> None :
      '''setMargin( (TableStyle)arg1, (CellMargin)arg2, (float)arg3, (str)arg4) -> None :

    C++ signature :
        void setMargin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (TableStyle)arg1, (float)arg2, (str)arg3) -> None :

    C++ signature :
        void setRotation(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTemplate (self, *args, **kwargs)-> None :
      '''setTemplate( (TableStyle)arg1, (ObjectId)arg2, (MergeCellStyleOption)arg3) -> None :

    C++ signature :
        void setTemplate(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::MergeCellStyleOption)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (TableStyle)arg1, (float)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTableStyle {lvalue},double,enum AcDb::RowType)

setTextHeight( (TableStyle)arg1, (float)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVertCellMargin (self, *args, **kwargs)-> None :
      '''setVertCellMargin( (TableStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setVertCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self, *args, **kwargs)-> None :
      '''suppressHeaderRow( (TableStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressHeaderRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs)-> None :
      '''suppressTitleRow( (TableStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressTitleRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (TableStyle)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textHeight( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (TableStyle)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textStyle( (TableStyle)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def vertCellMargin (self, *args, **kwargs)-> float :
      '''vertCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Text:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (ObjectId)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},double,double)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> None :
      '''adjustAlignment( (Text)arg1, (Database)arg2) -> None :

    C++ signature :
        void adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Text :
      '''cast( (RxObject)arg1) -> Text :

    C++ signature :
        class PyDbText cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Text :
      '''cloneFrom( (RxObject)arg1) -> Text :

    C++ signature :
        class PyDbText cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def convertFieldToText (self, *args, **kwargs)-> None :
      '''convertFieldToText( (Text)arg1) -> None :

    C++ signature :
        void convertFieldToText(class PyDbText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, *args, **kwargs)-> None :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> None :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> None :

    C++ signature :
        void mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> None :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> None :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setJustification (self, *args, **kwargs)-> None :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> None :

    C++ signature :
        void setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTextString (self, *args, **kwargs)-> None :
      '''setTextString( (Text)arg1, (str)arg2) -> None :

    C++ signature :
        void setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> None :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> None :

    C++ signature :
        void setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, *args, **kwargs)-> None :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class TextAlignment:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTextAlignmentAligned (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextHorzMode:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTextAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextStyleTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (TextStyleTable)arg1, (TextStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbTextStyleTable {lvalue},class PyDbTextStyleTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> TextStyleTable :
      '''cast( (RxObject)arg1) -> TextStyleTable :

    C++ signature :
        class PyDbTextStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> TextStyleTable :
      '''cloneFrom( (RxObject)arg1) -> TextStyleTable :

    C++ signature :
        class PyDbTextStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class TextStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bigFontFileName (self, *args, **kwargs)-> str :
      '''bigFontFileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > bigFontFileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> TextStyleTableRecord :
      '''cast( (RxObject)arg1) -> TextStyleTableRecord :

    C++ signature :
        class PyDbTextStyleTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> TextStyleTableRecord :
      '''cloneFrom( (RxObject)arg1) -> TextStyleTableRecord :

    C++ signature :
        class PyDbTextStyleTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fileName (self, *args, **kwargs)-> str :
      '''fileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def flagBits (self, *args, **kwargs)-> int :
      '''flagBits( (TextStyleTableRecord)arg1) -> int :

    C++ signature :
        unsigned char flagBits(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def font (self, *args, **kwargs)-> tuple :
      '''font( (TextStyleTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple font(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isShapeFile (self, *args, **kwargs)-> bool :
      '''isShapeFile( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isShapeFile(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVertical (self, *args, **kwargs)-> bool :
      '''isVertical( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isVertical(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def obliquingAngle (self, *args, **kwargs)-> float :
      '''obliquingAngle( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double obliquingAngle(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def priorSize (self, *args, **kwargs)-> float :
      '''priorSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double priorSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBigFontFileName (self, *args, **kwargs)-> None :
      '''setBigFontFileName( (TextStyleTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setBigFontFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFileName (self, *args, **kwargs)-> None :
      '''setFileName( (TextStyleTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFlagBits (self, *args, **kwargs)-> None :
      '''setFlagBits( (TextStyleTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlagBits(class PyDbTextStyleTableRecord {lvalue},unsigned char)'''
    ...
    def setFont (self, *args, **kwargs)-> None :
      '''setFont( (TextStyleTableRecord)arg1, (str)arg2, (bool)arg3, (bool)arg4, (int)arg5, (int)arg6, (int)arg7, (bool)arg8) -> None :

    C++ signature :
        void setFont(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,int,int,int,bool)'''
    ...
    def setIsShapeFile (self, *args, **kwargs)-> None :
      '''setIsShapeFile( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsShapeFile(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setIsVertical (self, *args, **kwargs)-> None :
      '''setIsVertical( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsVertical(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setObliquingAngle (self, *args, **kwargs)-> None :
      '''setObliquingAngle( (TextStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setObliquingAngle(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPriorSize (self, *args, **kwargs)-> None :
      '''setPriorSize( (TextStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setPriorSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setTextSize (self, *args, **kwargs)-> None :
      '''setTextSize( (TextStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXScale (self, *args, **kwargs)-> None :
      '''setXScale( (TextStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setXScale(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textSize (self, *args, **kwargs)-> float :
      '''textSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double textSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def xScale (self, *args, **kwargs)-> float :
      '''xScale( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double xScale(class PyDbTextStyleTableRecord {lvalue})'''
    ...

class TimeZone:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAbuDhabi (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAdelaide (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAlaska (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAlmaty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kArizona (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAthens (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAtlanticCanada (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAzores (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaghdad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBangkok (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBeijing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBerlin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBogota (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBrasilia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBrisbane (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBuenosAires (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCairo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCapeVerde (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCaracas (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCaucasus (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCentral (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCentralAmerica (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDarwin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDhaka (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEastAfrica (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEastern (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEasternEurope (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEkaterinburg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFiji (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGMT (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGreenland (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGuam (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHarare (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHawaii (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHelsinki (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHobart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIndiana (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInternationalDateLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIrkutsk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIslamabad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJerusalem (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKabul (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKathmandu (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKolkata (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKrasnoyarsk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMagadan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMazatlan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMexicoCity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMidAtlantic (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMidwayIsland (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMonrovia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMoscow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMountain (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNewfoundland (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPacific (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kParis (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPerth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPrague (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRangoon (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRiyadh (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSantiago (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSarajevo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSaskatchewan (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSeoul (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSingapore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSriLanka (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSydney (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTaipei (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTehran (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTokyo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTonga (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUTC (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVladivostock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWellington (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWestCentralAfrica (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kYakutsk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Transaction:
    def __init__ (self, *args, **kwargs)-> None:
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getAllObjects (self, *args, **kwargs)-> list :
      '''getAllObjects( (Transaction)arg1) -> list :

    C++ signature :
        class boost::python::list getAllObjects(class PyTransaction {lvalue})'''
    ...
    def getObject (self, *args, **kwargs)-> DbObject :
      '''getObject( (Transaction)arg1, (ObjectId)arg2) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def numOpenedObjects (self, *args, **kwargs)-> int :
      '''numOpenedObjects( (TransactionManager)arg1) -> int :

    C++ signature :
        int numOpenedObjects(class PyDbTransactionManager {lvalue})'''
    ...

class TransactionManager:
    def __init__ (self: TransactionManager)-> None :
      '''                             '''
    ...
    def abortTransaction (self: TransactionManager)-> None :
      '''                             '''
    ...
    def addNewlyCreatedDBRObject (self: TransactionManager,obj: DbObject,add: bool=True)-> None :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def endTransaction (self: TransactionManager)-> None :
      '''                             '''
    ...
    def getAllObjects (self: TransactionManager)-> list :
      '''                             '''
    ...
    def getObject (self: TransactionManager,id: ObjectId,mode: OpenMode=OpenMode.kForRead,openErasedObject: bool=False)-> DbObject :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: RxObject)-> RxClass :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def numActiveTransactions (self: TransactionManager)-> int :
      '''                             '''
    ...
    def numOpenedObjects (self: TransactionManager)-> int :
      '''                             '''
    ...
    def queueForGraphicsFlush (self: TransactionManager)-> None :
      '''                             '''
    ...
    def startTransaction (self: TransactionManager)-> Transaction :
      '''                             '''
    ...
    def topTransaction (self: TransactionManager)-> Transaction :
      '''                             '''
    ...

class Transparency:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)'''
    ...
    def alpha (self, *args, **kwargs)-> int :
      '''alpha( (Transparency)arg1) -> int :

    C++ signature :
        unsigned char alpha(class AcCmTransparency {lvalue})'''
    ...
    def alphaPercent (self, *args, **kwargs)-> float :
      '''alphaPercent( (Transparency)arg1) -> float :

    C++ signature :
        double alphaPercent(class AcCmTransparency {lvalue})'''
    ...
    def isByAlpha (self, *args, **kwargs)-> bool :
      '''isByAlpha( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByAlpha(class AcCmTransparency {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmTransparency {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmTransparency {lvalue})'''
    ...
    def isClear (self, *args, **kwargs)-> bool :
      '''isClear( (Transparency)arg1) -> bool :

    C++ signature :
        bool isClear(class AcCmTransparency {lvalue})'''
    ...
    def isInvalid (self, *args, **kwargs)-> bool :
      '''isInvalid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isInvalid(class AcCmTransparency {lvalue})'''
    ...
    def isSolid (self, *args, **kwargs)-> bool :
      '''isSolid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isSolid(class AcCmTransparency {lvalue})'''
    ...
    def setAlpha (self, *args, **kwargs)-> None :
      '''setAlpha( (Transparency)arg1, (int)arg2) -> None :

    C++ signature :
        void setAlpha(class AcCmTransparency {lvalue},unsigned char)'''
    ...
    def setAlphaPercent (self, *args, **kwargs)-> None :
      '''setAlphaPercent( (Transparency)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlphaPercent(class AcCmTransparency {lvalue},double)'''
    ...

class TransparencyMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kByAlpha (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kErrorValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UCSTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (UCSTable)arg1, (UCSTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbUCSTable {lvalue},class PyDbUCSTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UCSTable :
      '''cast( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UCSTable :
      '''cloneFrom( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class UCSTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UCSTableRecord :
      '''cast( (RxObject)arg1) -> UCSTableRecord :

    C++ signature :
        class PyDbUCSTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UCSTableRecord :
      '''cloneFrom( (RxObject)arg1) -> UCSTableRecord :

    C++ signature :
        class PyDbUCSTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (UCSTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbUCSTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self, *args, **kwargs)-> None :
      '''setOrigin( (UCSTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOrigin(class PyDbUCSTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setUcsBaseOrigin (self, *args, **kwargs)-> None :
      '''setUcsBaseOrigin( (UCSTableRecord)arg1, (Point3d)arg2, (OrthographicView)arg3) -> None :

    C++ signature :
        void setUcsBaseOrigin(class PyDbUCSTableRecord {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setXAxis (self, *args, **kwargs)-> None :
      '''setXAxis( (UCSTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setXAxis(class PyDbUCSTableRecord {lvalue},class AcGeVector3d)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setYAxis (self, *args, **kwargs)-> None :
      '''setYAxis( (UCSTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setYAxis(class PyDbUCSTableRecord {lvalue},class AcGeVector3d)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def ucsBaseOrigin (self, *args, **kwargs)-> Point3d :
      '''ucsBaseOrigin( (UCSTableRecord)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d ucsBaseOrigin(class PyDbUCSTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xAxis (self, *args, **kwargs)-> Vector3d :
      '''xAxis( (UCSTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d xAxis(class PyDbUCSTableRecord {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...
    def yAxis (self, *args, **kwargs)-> Vector3d :
      '''yAxis( (UCSTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d yAxis(class PyDbUCSTableRecord {lvalue})'''
    ...

class UnderlayDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayDefinition :
      '''cast( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayDefinition :
      '''cloneFrom( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dictionaryKey (self, *args, **kwargs)-> str :
      '''dictionaryKey( (RxClass)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryKey(class PyRxClass)'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self, *args, **kwargs)-> str :
      '''getActiveFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getItemName (self, *args, **kwargs)-> str :
      '''getItemName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getItemName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getSourceFileName (self, *args, **kwargs)-> str :
      '''getSourceFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSourceFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (UnderlayDefinition)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> None :
      '''load( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void load(class PyDbUnderlayDefinition {lvalue})

load( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void load(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setItemName (self, *args, **kwargs)-> None :
      '''setItemName( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setItemName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, *args, **kwargs)-> None :
      '''setSourceFileName( (UnderlayDefinition)arg1, (str)arg2) -> None :

    C++ signature :
        void setSourceFileName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void unload(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class UnderlayLayer:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (UnderlayLayer)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyUnderlayLayer {lvalue})'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (UnderlayLayer)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyUnderlayLayer {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setState (self, *args, **kwargs)-> None :
      '''setState( (UnderlayLayer)arg1, (bool)arg2) -> None :

    C++ signature :
        void setState(class PyUnderlayLayer {lvalue},bool)'''
    ...
    def state (self, *args, **kwargs)-> bool :
      '''state( (UnderlayLayer)arg1) -> bool :

    C++ signature :
        bool state(class PyUnderlayLayer {lvalue})'''
    ...

class UnderlayReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayReference :
      '''cast( (RxObject)arg1) -> UnderlayReference :

    C++ signature :
        class PyDbUnderlayReference cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (UnderlayReference)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbUnderlayReference {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayReference :
      '''cloneFrom( (RxObject)arg1) -> UnderlayReference :

    C++ signature :
        class PyDbUnderlayReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char contrast(class PyDbUnderlayReference {lvalue})'''
    ...
    def contrastDefault (self, *args, **kwargs)-> int :
      '''contrastDefault() -> int :

    C++ signature :
        unsigned char contrastDefault()'''
    ...
    def contrastLowerLimit (self, *args, **kwargs)-> int :
      '''contrastLowerLimit() -> int :

    C++ signature :
        unsigned char contrastLowerLimit()'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definitionId (self, *args, **kwargs)-> ObjectId :
      '''definitionId( (UnderlayReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId definitionId(class PyDbUnderlayReference {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char fade(class PyDbUnderlayReference {lvalue})'''
    ...
    def fadeDefault (self, *args, **kwargs)-> int :
      '''fadeDefault() -> int :

    C++ signature :
        unsigned char fadeDefault()'''
    ...
    def fadeLowerLimit (self, *args, **kwargs)-> int :
      '''fadeLowerLimit() -> int :

    C++ signature :
        unsigned char fadeLowerLimit()'''
    ...
    def fadeUpperLimit (self, *args, **kwargs)-> int :
      '''fadeUpperLimit() -> int :

    C++ signature :
        unsigned char fadeUpperLimit()'''
    ...
    def generateClipBoundaryFromPline (self, *args, **kwargs)-> None :
      '''generateClipBoundaryFromPline( (UnderlayReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void generateClipBoundaryFromPline(class PyDbUnderlayReference {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getUnderlayLayer (self, *args, **kwargs)-> UnderlayLayer :
      '''getUnderlayLayer( (UnderlayReference)arg1, (int)arg2) -> UnderlayLayer :

    C++ signature :
        class PyUnderlayLayer getUnderlayLayer(class PyDbUnderlayReference {lvalue},int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (UnderlayReference)arg1) -> float :

    C++ signature :
        double height(class PyDbUnderlayReference {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self, *args, **kwargs)-> bool :
      '''isAdjustedForBackground( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isAdjustedForBackground(class PyDbUnderlayReference {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbUnderlayReference {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbUnderlayReference {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self, *args, **kwargs)-> bool :
      '''isFramePlottable( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFramePlottable(class PyDbUnderlayReference {lvalue})'''
    ...
    def isFrameVisible (self, *args, **kwargs)-> bool :
      '''isFrameVisible( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFrameVisible(class PyDbUnderlayReference {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self, *args, **kwargs)-> bool :
      '''isMonochrome( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isMonochrome(class PyDbUnderlayReference {lvalue})'''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbUnderlayReference {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (UnderlayReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbUnderlayReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (UnderlayReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbUnderlayReference {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (UnderlayReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbUnderlayReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (UnderlayReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbUnderlayReference {lvalue})'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self, *args, **kwargs)-> None :
      '''setClipBoundary( (UnderlayReference)arg1, (list)arg2) -> None :

    C++ signature :
        void setClipBoundary(class PyDbUnderlayReference {lvalue},class boost::python::list)'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (UnderlayReference)arg1, (int)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefinitionId (self, *args, **kwargs)-> None :
      '''setDefinitionId( (UnderlayReference)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDefinitionId(class PyDbUnderlayReference {lvalue},class PyDbObjectId)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (UnderlayReference)arg1, (int)arg2) -> None :

    C++ signature :
        void setFade(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setIsAdjustedForBackground (self, *args, **kwargs)-> None :
      '''setIsAdjustedForBackground( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsAdjustedForBackground(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsClipped (self, *args, **kwargs)-> None :
      '''setIsClipped( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsClipped(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsMonochrome (self, *args, **kwargs)-> None :
      '''setIsMonochrome( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsMonochrome(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsOn (self, *args, **kwargs)-> None :
      '''setIsOn( (UnderlayReference)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOn(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (UnderlayReference)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDbUnderlayReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (UnderlayReference)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDbUnderlayReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> None :
      '''setScaleFactors( (UnderlayReference)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setScaleFactors(class PyDbUnderlayReference {lvalue},class AcGeScale3d)'''
    ...
    def setTransform (self, *args, **kwargs)-> None :
      '''setTransform( (UnderlayReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setTransform(class PyDbUnderlayReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setUnderlayLayer (self, *args, **kwargs)-> None :
      '''setUnderlayLayer( (UnderlayReference)arg1, (int)arg2, (UnderlayLayer)arg3) -> None :

    C++ signature :
        void setUnderlayLayer(class PyDbUnderlayReference {lvalue},int,class PyUnderlayLayer)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (UnderlayReference)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self, *args, **kwargs)-> Matrix3d :
      '''transform( (UnderlayReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d transform(class PyDbUnderlayReference {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self, *args, **kwargs)-> int :
      '''underlayLayerCount( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned int underlayLayerCount(class PyDbUnderlayReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (UnderlayReference)arg1) -> float :

    C++ signature :
        double width(class PyDbUnderlayReference {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class UnitsValue:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kUnitsAngstroms (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsAstronomical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsCentimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsDecimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsDekameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsFeet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsGigameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsHectometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsInches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsKilometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsLightYears (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMax (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMicroinches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMicrons (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMiles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMillimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMils (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsNanometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsParsecs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyFeet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyInch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyMile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyYard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUndefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsYards (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kUpdateDirDataToSource (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateDirSourceToData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kSkipFormatAfterFirstUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionAllowSourceUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionForPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionForceFullSourceUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionIncludeXrefs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionOverwriteContentModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionOverwriteFormatModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionSkipFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionUpdateColumnWidth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionUpdateRowHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Vertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Vertex :
      '''cast( (RxObject)arg1) -> Vertex :

    C++ signature :
        class PyDbVertex cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Vertex :
      '''cloneFrom( (RxObject)arg1) -> Vertex :

    C++ signature :
        class PyDbVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Vertex2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (int)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double,double,int)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def bulge (self, *args, **kwargs)-> float :
      '''bulge( (Vertex2d)arg1) -> float :

    C++ signature :
        double bulge(class PyDb2dVertex {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Vertex2d :
      '''cast( (RxObject)arg1) -> Vertex2d :

    C++ signature :
        class PyDb2dVertex cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Vertex2d :
      '''cloneFrom( (RxObject)arg1) -> Vertex2d :

    C++ signature :
        class PyDb2dVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def endWidth (self, *args, **kwargs)-> float :
      '''endWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double endWidth(class PyDb2dVertex {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def ignoreTangent (self, *args, **kwargs)-> None :
      '''ignoreTangent( (Vertex2d)arg1) -> None :

    C++ signature :
        void ignoreTangent(class PyDb2dVertex {lvalue})'''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTangentUsed (self, *args, **kwargs)-> bool :
      '''isTangentUsed( (Vertex2d)arg1) -> bool :

    C++ signature :
        bool isTangentUsed(class PyDb2dVertex {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Vertex2d)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb2dVertex {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulge (self, *args, **kwargs)-> None :
      '''setBulge( (Vertex2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setBulge(class PyDb2dVertex {lvalue},double)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndWidth (self, *args, **kwargs)-> None :
      '''setEndWidth( (Vertex2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> None :
      '''setPosition( (Vertex2d)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPosition(class PyDb2dVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartWidth (self, *args, **kwargs)-> None :
      '''setStartWidth( (Vertex2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangent (self, *args, **kwargs)-> None :
      '''setTangent( (Vertex2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setTangent(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangentUsed (self, *args, **kwargs)-> None :
      '''setTangentUsed( (Vertex2d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTangentUsed(class PyDb2dVertex {lvalue},bool)'''
    ...
    def setVertexIdentifier (self, *args, **kwargs)-> None :
      '''setVertexIdentifier( (Vertex2d)arg1, (int)arg2) -> None :

    C++ signature :
        void setVertexIdentifier(class PyDb2dVertex {lvalue},int)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def startWidth (self, *args, **kwargs)-> float :
      '''startWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double startWidth(class PyDb2dVertex {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tangent (self, *args, **kwargs)-> float :
      '''tangent( (Vertex2d)arg1) -> float :

    C++ signature :
        double tangent(class PyDb2dVertex {lvalue})'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def useTangent (self, *args, **kwargs)-> None :
      '''useTangent( (Vertex2d)arg1) -> None :

    C++ signature :
        void useTangent(class PyDb2dVertex {lvalue})'''
    ...
    def vertexIdentifier (self, *args, **kwargs)-> int :
      '''vertexIdentifier( (Vertex2d)arg1) -> int :

    C++ signature :
        int vertexIdentifier(class PyDb2dVertex {lvalue})'''
    ...
    def vertexType (self, *args, **kwargs)-> Vertex2dType :
      '''vertexType( (Vertex2d)arg1) -> Vertex2dType :

    C++ signature :
        enum AcDb::Vertex2dType vertexType(class PyDb2dVertex {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Vertex2dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k2dCurveFitVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSplineCtlVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSplineFitVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def annotationScale (self, *args, **kwargs)-> AnnotationScale :
      '''annotationScale( (ViewTableRecord)arg1) -> AnnotationScale :

    C++ signature :
        class PyDbAnnotationScale annotationScale(class PyDbViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def camera (self, *args, **kwargs)-> ObjectId :
      '''camera( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId camera(class PyDbViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ViewTableRecord :
      '''cast( (RxObject)arg1) -> ViewTableRecord :

    C++ signature :
        class PyDbViewTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ViewTableRecord :
      '''cloneFrom( (RxObject)arg1) -> ViewTableRecord :

    C++ signature :
        class PyDbViewTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def disassociateUcsFromView (self, *args, **kwargs)-> None :
      '''disassociateUcsFromView( (ViewTableRecord)arg1) -> None :

    C++ signature :
        void disassociateUcsFromView(class PyDbViewTableRecord {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getCategoryName (self, *args, **kwargs)-> str :
      '''getCategoryName( (ViewTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCategoryName(class PyDbViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayerState (self, *args, **kwargs)-> str :
      '''getLayerState( (ViewTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayerState(class PyDbViewTableRecord {lvalue})'''
    ...
    def getLayout (self, *args, **kwargs)-> ObjectId :
      '''getLayout( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayout(class PyDbViewTableRecord {lvalue})'''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self, *args, **kwargs)-> None :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCameraPlottable (self, *args, **kwargs)-> bool :
      '''isCameraPlottable( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isCameraPlottable(class PyDbViewTableRecord {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPaperspaceView (self, *args, **kwargs)-> bool :
      '''isPaperspaceView( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isPaperspaceView(class PyDbViewTableRecord {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsAssociatedToView (self, *args, **kwargs)-> bool :
      '''isUcsAssociatedToView( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isUcsAssociatedToView(class PyDbViewTableRecord {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewAssociatedToViewport (self, *args, **kwargs)-> bool :
      '''isViewAssociatedToViewport( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isViewAssociatedToViewport(class PyDbViewTableRecord {lvalue})'''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def liveSection (self, *args, **kwargs)-> ObjectId :
      '''liveSection( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId liveSection(class PyDbViewTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> None :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (ViewTableRecord)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewTableRecord {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> None :
      '''setBackground( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBackground(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCamera (self, *args, **kwargs)-> None :
      '''setCamera( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setCamera(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setCategoryName (self, *args, **kwargs)-> None :
      '''setCategoryName( (ViewTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setCategoryName(class PyDbViewTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> None :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setIsCameraPlottable (self, *args, **kwargs)-> None :
      '''setIsCameraPlottable( (ViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsCameraPlottable(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setIsPaperspaceView (self, *args, **kwargs)-> None :
      '''setIsPaperspaceView( (ViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPaperspaceView(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setLayerState (self, *args, **kwargs)-> None :
      '''setLayerState( (ViewTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setLayerState(class PyDbViewTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayout (self, *args, **kwargs)-> None :
      '''setLayout( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLayout(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLiveSection (self, *args, **kwargs)-> None :
      '''setLiveSection( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLiveSection(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setParametersFromViewport (self, *args, **kwargs)-> None :
      '''setParametersFromViewport( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setParametersFromViewport(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setSun (self, *args, **kwargs)-> None :
      '''setSun( (ViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void setSun(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (ViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> None :

    C++ signature :
        void setSun(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> None :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> None :

    C++ signature :
        void setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setViewAssociatedToViewport (self, *args, **kwargs)-> None :
      '''setViewAssociatedToViewport( (ViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setViewAssociatedToViewport(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> None :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Viewport:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (Viewport)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbViewport {lvalue})'''
    ...
    def annotationScale (self, *args, **kwargs)-> AnnotationScale :
      '''annotationScale( (Viewport)arg1) -> AnnotationScale :

    C++ signature :
        class PyDbAnnotationScale annotationScale(class PyDbViewport {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (Viewport)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbViewport {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbViewport {lvalue})'''
    ...
    def blockId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (Viewport)arg1) -> float :

    C++ signature :
        double brightness(class PyDbViewport {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Viewport :
      '''cast( (RxObject)arg1) -> Viewport :

    C++ signature :
        class PyDbViewport cast(class PyRxObject)'''
    ...
    def castShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (Viewport)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbViewport {lvalue})'''
    ...
    def circleSides (self, *args, **kwargs)-> int :
      '''circleSides( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short circleSides(class PyDbViewport {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Viewport :
      '''cloneFrom( (RxObject)arg1) -> Viewport :

    C++ signature :
        class PyDbViewport cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: Entity)-> CollisionType :
      '''                             '''
    ...
    def color (self: Entity)-> Color :
      '''                             '''
    ...
    def colorIndex (self: Entity)-> int :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (Viewport)arg1) -> float :

    C++ signature :
        double contrast(class PyDbViewport {lvalue})'''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def customScale (self, *args, **kwargs)-> float :
      '''customScale( (Viewport)arg1) -> float :

    C++ signature :
        double customScale(class PyDbViewport {lvalue})'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (Viewport)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbViewport {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def effectivePlotStyleSheet (self, *args, **kwargs)-> str :
      '''effectivePlotStyleSheet( (Viewport)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > effectivePlotStyleSheet(class PyDbViewport {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Viewport)arg1) -> float :

    C++ signature :
        double elevation(class PyDbViewport {lvalue})'''
    ...
    def entityColor (self: Entity)-> EntityColor :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Viewport)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbViewport {lvalue},class PyDbObject,bool)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def freezeLayersInViewport (self, *args, **kwargs)-> None :
      '''freezeLayersInViewport( (Viewport)arg1, (list)arg2) -> None :

    C++ signature :
        void freezeLayersInViewport(class PyDbViewport {lvalue},class boost::python::list)'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (Viewport)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbViewport {lvalue})'''
    ...
    def getCompoundObjectTransform (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getEcs (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFrozenLayerList (self, *args, **kwargs)-> list :
      '''getFrozenLayerList( (Viewport)arg1) -> list :

    C++ signature :
        class boost::python::list getFrozenLayerList(class PyDbViewport {lvalue})'''
    ...
    def getGeomExtents (self: Entity,extents: Extents)-> None :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLabelBlock (self, *args, **kwargs)-> ObjectId :
      '''getLabelBlock( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLabelBlock(class PyDbViewport {lvalue})'''
    ...
    def getModelView (self, *args, **kwargs)-> XrefObjectId :
      '''getModelView( (Viewport)arg1) -> XrefObjectId :

    C++ signature :
        class PyDbXrefObjectId getModelView(class PyDbViewport {lvalue})'''
    ...
    def getPlane (self: Entity)-> Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def getSheetView (self, *args, **kwargs)-> ObjectId :
      '''getSheetView( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSheetView(class PyDbViewport {lvalue})'''
    ...
    def getUcs (self, *args, **kwargs)-> None :
      '''getUcs( (Viewport)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getUcs(class PyDbViewport {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def gridIncrement (self, *args, **kwargs)-> Vector2d :
      '''gridIncrement( (Viewport)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d gridIncrement(class PyDbViewport {lvalue})'''
    ...
    def gridMajor (self, *args, **kwargs)-> int :
      '''gridMajor( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short gridMajor(class PyDbViewport {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Viewport)arg1) -> float :

    C++ signature :
        double height(class PyDbViewport {lvalue})'''
    ...
    def hiddenLinesRemoved (self, *args, **kwargs)-> bool :
      '''hiddenLinesRemoved( (Viewport)arg1) -> bool :

    C++ signature :
        bool hiddenLinesRemoved(class PyDbViewport {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: Entity,entity: Entity,inter: Intersect,points: list)-> None :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isBackClipOn (self, *args, **kwargs)-> bool :
      '''isBackClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isBackClipOn(class PyDbViewport {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbViewport {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFastZoomOn (self, *args, **kwargs)-> bool :
      '''isFastZoomOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFastZoomOn(class PyDbViewport {lvalue})'''
    ...
    def isFrontClipAtEyeOn (self, *args, **kwargs)-> bool :
      '''isFrontClipAtEyeOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFrontClipAtEyeOn(class PyDbViewport {lvalue})'''
    ...
    def isFrontClipOn (self, *args, **kwargs)-> bool :
      '''isFrontClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFrontClipOn(class PyDbViewport {lvalue})'''
    ...
    def isGridAdaptive (self, *args, **kwargs)-> bool :
      '''isGridAdaptive( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridAdaptive(class PyDbViewport {lvalue})'''
    ...
    def isGridBoundToLimits (self, *args, **kwargs)-> bool :
      '''isGridBoundToLimits( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridBoundToLimits(class PyDbViewport {lvalue})'''
    ...
    def isGridFollow (self, *args, **kwargs)-> bool :
      '''isGridFollow( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridFollow(class PyDbViewport {lvalue})'''
    ...
    def isGridOn (self, *args, **kwargs)-> bool :
      '''isGridOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridOn(class PyDbViewport {lvalue})'''
    ...
    def isGridSubdivisionRestricted (self, *args, **kwargs)-> bool :
      '''isGridSubdivisionRestricted( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridSubdivisionRestricted(class PyDbViewport {lvalue})'''
    ...
    def isLayerFrozenInViewport (self, *args, **kwargs)-> bool :
      '''isLayerFrozenInViewport( (Viewport)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool isLayerFrozenInViewport(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def isLocked (self, *args, **kwargs)-> bool :
      '''isLocked( (Viewport)arg1) -> bool :

    C++ signature :
        bool isLocked(class PyDbViewport {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNonRectClipOn (self, *args, **kwargs)-> bool :
      '''isNonRectClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isNonRectClipOn(class PyDbViewport {lvalue})'''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbViewport {lvalue})'''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isPerspectiveOn (self, *args, **kwargs)-> bool :
      '''isPerspectiveOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isPerspectiveOn(class PyDbViewport {lvalue})'''
    ...
    def isPlanar (self: Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSnapIsometric (self, *args, **kwargs)-> bool :
      '''isSnapIsometric( (Viewport)arg1) -> bool :

    C++ signature :
        bool isSnapIsometric(class PyDbViewport {lvalue})'''
    ...
    def isSnapOn (self, *args, **kwargs)-> bool :
      '''isSnapOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isSnapOn(class PyDbViewport {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransparent (self, *args, **kwargs)-> bool :
      '''isTransparent( (Viewport)arg1) -> bool :

    C++ signature :
        bool isTransparent(class PyDbViewport {lvalue})'''
    ...
    def isUcsFollowModeOn (self, *args, **kwargs)-> bool :
      '''isUcsFollowModeOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsFollowModeOn(class PyDbViewport {lvalue})'''
    ...
    def isUcsIconAtOrigin (self, *args, **kwargs)-> bool :
      '''isUcsIconAtOrigin( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsIconAtOrigin(class PyDbViewport {lvalue})'''
    ...
    def isUcsIconVisible (self, *args, **kwargs)-> bool :
      '''isUcsIconVisible( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsIconVisible(class PyDbViewport {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (Viewport)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbViewport {lvalue})'''
    ...
    def isUcsSavedWithViewport (self, *args, **kwargs)-> bool :
      '''isUcsSavedWithViewport( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsSavedWithViewport(class PyDbViewport {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (Viewport)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbViewport {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self: Entity)-> str :
      '''                             '''
    ...
    def layerId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (Viewport)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbViewport {lvalue})'''
    ...
    def lineWeight (self: Entity)-> LineWeight :
      '''                             '''
    ...
    def linetype (self: Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: Entity)-> float :
      '''                             '''
    ...
    def list (self: Entity)-> None :
      '''                             '''
    ...
    def material (self: Entity)-> str :
      '''                             '''
    ...
    def materialId (self: Entity)-> ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Viewport)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbViewport {lvalue},class PyDbObject)'''
    ...
    def nonRectClipEntityId (self, *args, **kwargs)-> ObjectId :
      '''nonRectClipEntityId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId nonRectClipEntityId(class PyDbViewport {lvalue})'''
    ...
    def number (self, *args, **kwargs)-> int :
      '''number( (Viewport)arg1) -> int :

    C++ signature :
        short number(class PyDbViewport {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (Viewport)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbViewport {lvalue})'''
    ...
    def plotStyleName (self: Entity)-> str :
      '''                             '''
    ...
    def plotStyleSheet (self, *args, **kwargs)-> str :
      '''plotStyleSheet( (Viewport)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleSheet(class PyDbViewport {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (Viewport)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbViewport {lvalue})'''
    ...
    def previousBackground (self, *args, **kwargs)-> ObjectId :
      '''previousBackground( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue})

previousBackground( (Viewport)arg1, (GiDrawableType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self, *args, **kwargs)-> bool :
      '''previousBackgroundForcedSwitch( (Viewport)arg1) -> bool :

    C++ signature :
        bool previousBackgroundForcedSwitch(class PyDbViewport {lvalue})'''
    ...
    def receiveShadows (self: Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeHiddenLines (self, *args, **kwargs)-> None :
      '''removeHiddenLines( (Viewport)arg1) -> None :

    C++ signature :
        void removeHiddenLines(class PyDbViewport {lvalue})

removeHiddenLines( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void removeHiddenLines(class PyDbViewport {lvalue},bool)'''
    ...
    def removeLabelBlock (self, *args, **kwargs)-> None :
      '''removeLabelBlock( (Viewport)arg1) -> None :

    C++ signature :
        void removeLabelBlock(class PyDbViewport {lvalue})'''
    ...
    def removeModelView (self, *args, **kwargs)-> None :
      '''removeModelView( (Viewport)arg1) -> None :

    C++ signature :
        void removeModelView(class PyDbViewport {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def removeSheetView (self, *args, **kwargs)-> None :
      '''removeSheetView( (Viewport)arg1) -> None :

    C++ signature :
        void removeSheetView(class PyDbViewport {lvalue})'''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> None :
      '''setAmbientLightColor( (Viewport)arg1, (Color)arg2) -> None :

    C++ signature :
        void setAmbientLightColor(class PyDbViewport {lvalue},class AcCmColor)'''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (Viewport)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewport {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setBackClipOff (self, *args, **kwargs)-> None :
      '''setBackClipOff( (Viewport)arg1) -> None :

    C++ signature :
        void setBackClipOff(class PyDbViewport {lvalue})'''
    ...
    def setBackClipOn (self, *args, **kwargs)-> None :
      '''setBackClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setBackClipOn(class PyDbViewport {lvalue})

setBackClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> None :
      '''setBackground( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbViewport {lvalue},double)'''
    ...
    def setCastShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (Viewport)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbViewport {lvalue},class AcGePoint3d)'''
    ...
    def setCircleSides (self, *args, **kwargs)-> None :
      '''setCircleSides( (Viewport)arg1, (int)arg2) -> None :

    C++ signature :
        void setCircleSides(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setColor (self: Entity,clr: AcCmColor,dosubents = True,db = current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: Entity,clr: int16,dosubents = True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbViewport {lvalue},double)'''
    ...
    def setCustomScale (self, *args, **kwargs)-> None :
      '''setCustomScale( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setCustomScale(class PyDbViewport {lvalue},double)'''
    ...
    def setDatabaseDefaults (self: Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> None :
      '''setDefaultLightingOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDefaultLightingOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (Viewport)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbViewport {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbViewport {lvalue},double)'''
    ...
    def setFastZoomOff (self, *args, **kwargs)-> None :
      '''setFastZoomOff( (Viewport)arg1) -> None :

    C++ signature :
        void setFastZoomOff(class PyDbViewport {lvalue})'''
    ...
    def setFastZoomOn (self, *args, **kwargs)-> None :
      '''setFastZoomOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFastZoomOn(class PyDbViewport {lvalue})

setFastZoomOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFastZoomOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEyeOff (self, *args, **kwargs)-> None :
      '''setFrontClipAtEyeOff( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipAtEyeOff(class PyDbViewport {lvalue})'''
    ...
    def setFrontClipAtEyeOn (self, *args, **kwargs)-> None :
      '''setFrontClipAtEyeOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipAtEyeOn(class PyDbViewport {lvalue})

setFrontClipAtEyeOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEyeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setFrontClipOff (self, *args, **kwargs)-> None :
      '''setFrontClipOff( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipOff(class PyDbViewport {lvalue})'''
    ...
    def setFrontClipOn (self, *args, **kwargs)-> None :
      '''setFrontClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue})

setFrontClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridAdaptive (self, *args, **kwargs)-> None :
      '''setGridAdaptive( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridAdaptive(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridBoundToLimits (self, *args, **kwargs)-> None :
      '''setGridBoundToLimits( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridBoundToLimits(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridFollow (self, *args, **kwargs)-> None :
      '''setGridFollow( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridFollow(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridIncrement (self, *args, **kwargs)-> None :
      '''setGridIncrement( (Viewport)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setGridIncrement(class PyDbViewport {lvalue},class AcGeVector2d)'''
    ...
    def setGridMajor (self, *args, **kwargs)-> None :
      '''setGridMajor( (Viewport)arg1, (int)arg2) -> None :

    C++ signature :
        void setGridMajor(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setGridOff (self, *args, **kwargs)-> None :
      '''setGridOff( (Viewport)arg1) -> None :

    C++ signature :
        void setGridOff(class PyDbViewport {lvalue})'''
    ...
    def setGridOn (self, *args, **kwargs)-> None :
      '''setGridOn( (Viewport)arg1) -> None :

    C++ signature :
        void setGridOn(class PyDbViewport {lvalue})

setGridOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridSubdivisionRestricted (self, *args, **kwargs)-> None :
      '''setGridSubdivisionRestricted( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridSubdivisionRestricted(class PyDbViewport {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbViewport {lvalue},double)'''
    ...
    def setIsOn (self, *args, **kwargs)-> None :
      '''setIsOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setLabelBlock (self, *args, **kwargs)-> None :
      '''setLabelBlock( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLabelBlock(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLayer (self: Entity,val: str|ObjectId,dosubents = True,allowHiddenLayer = false)-> None :
      '''                             '''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbViewport {lvalue},double)'''
    ...
    def setLineWeight (self: Entity,val: LineWeight,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetype (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: Entity,val: float,dosubents = True)-> None :
      '''                             '''
    ...
    def setLocked (self, *args, **kwargs)-> None :
      '''setLocked( (Viewport)arg1) -> None :

    C++ signature :
        void setLocked(class PyDbViewport {lvalue})

setLocked( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLocked(class PyDbViewport {lvalue},bool)'''
    ...
    def setMaterial (self: Entity,val: str|ObjectId,dosubents = True)-> None :
      '''                             '''
    ...
    def setModelView (self, *args, **kwargs)-> None :
      '''setModelView( (Viewport)arg1, (XrefObjectId)arg2) -> None :

    C++ signature :
        void setModelView(class PyDbViewport {lvalue},class PyDbXrefObjectId)'''
    ...
    def setNonRectClipEntityId (self, *args, **kwargs)-> None :
      '''setNonRectClipEntityId( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setNonRectClipEntityId(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setNonRectClipOff (self, *args, **kwargs)-> None :
      '''setNonRectClipOff( (Viewport)arg1) -> None :

    C++ signature :
        void setNonRectClipOff(class PyDbViewport {lvalue})'''
    ...
    def setNonRectClipOn (self, *args, **kwargs)-> None :
      '''setNonRectClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setNonRectClipOn(class PyDbViewport {lvalue})

setNonRectClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setNonRectClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setOff (self, *args, **kwargs)-> None :
      '''setOff( (Viewport)arg1) -> None :

    C++ signature :
        void setOff(class PyDbViewport {lvalue})

setOff( (Viewport)arg1) -> None :

    C++ signature :
        void setOff(class PyDbViewport {lvalue})'''
    ...
    def setOn (self, *args, **kwargs)-> None :
      '''setOn( (Viewport)arg1) -> None :

    C++ signature :
        void setOn(class PyDbViewport {lvalue})'''
    ...
    def setOpaque (self, *args, **kwargs)-> None :
      '''setOpaque( (Viewport)arg1) -> None :

    C++ signature :
        void setOpaque(class PyDbViewport {lvalue})'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveOff (self, *args, **kwargs)-> None :
      '''setPerspectiveOff( (Viewport)arg1) -> None :

    C++ signature :
        void setPerspectiveOff(class PyDbViewport {lvalue})'''
    ...
    def setPerspectiveOn (self, *args, **kwargs)-> None :
      '''setPerspectiveOn( (Viewport)arg1) -> None :

    C++ signature :
        void setPerspectiveOn(class PyDbViewport {lvalue})

setPerspectiveOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPlotStyleSheet (self, *args, **kwargs)-> None :
      '''setPlotStyleSheet( (Viewport)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotStyleSheet(class PyDbViewport {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> None :
      '''setPreviousBackground( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (GiDrawableType)arg3) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType)

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (GiDrawableType)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> None :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self: Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType)

setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType,class PyDbObjectId)'''
    ...
    def setSheetView (self, *args, **kwargs)-> None :
      '''setSheetView( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setSheetView(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setSnapAngle (self, *args, **kwargs)-> None :
      '''setSnapAngle( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setSnapAngle(class PyDbViewport {lvalue},double)'''
    ...
    def setSnapBasePoint (self, *args, **kwargs)-> None :
      '''setSnapBasePoint( (Viewport)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setSnapBasePoint(class PyDbViewport {lvalue},class AcGePoint2d)'''
    ...
    def setSnapIncrement (self, *args, **kwargs)-> None :
      '''setSnapIncrement( (Viewport)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setSnapIncrement(class PyDbViewport {lvalue},class AcGeVector2d)'''
    ...
    def setSnapIsoPair (self, *args, **kwargs)-> None :
      '''setSnapIsoPair( (Viewport)arg1, (int)arg2) -> None :

    C++ signature :
        void setSnapIsoPair(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setSnapIsometric (self, *args, **kwargs)-> None :
      '''setSnapIsometric( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapIsometric(class PyDbViewport {lvalue})

setSnapIsometric( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapIsometric(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapOff (self, *args, **kwargs)-> None :
      '''setSnapOff( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapOff(class PyDbViewport {lvalue})'''
    ...
    def setSnapOn (self, *args, **kwargs)-> None :
      '''setSnapOn( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapOn(class PyDbViewport {lvalue})

setSnapOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapStandard (self, *args, **kwargs)-> None :
      '''setSnapStandard( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapStandard(class PyDbViewport {lvalue})'''
    ...
    def setStandardScale (self, *args, **kwargs)-> None :
      '''setStandardScale( (Viewport)arg1, (StandardScaleType)arg2) -> None :

    C++ signature :
        void setStandardScale(class PyDbViewport {lvalue},enum AcDbViewport::StandardScaleType)'''
    ...
    def setSun (self, *args, **kwargs)-> None :
      '''setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> None :

    C++ signature :
        void setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTransparent (self, *args, **kwargs)-> None :
      '''setTransparent( (Viewport)arg1) -> None :

    C++ signature :
        void setTransparent(class PyDbViewport {lvalue})

setTransparent( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTransparent(class PyDbViewport {lvalue},bool)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbViewport {lvalue},double)'''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (Viewport)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (Viewport)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},enum AcDb::OrthographicView)

setUcs( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowModeOff (self, *args, **kwargs)-> None :
      '''setUcsFollowModeOff( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsFollowModeOff(class PyDbViewport {lvalue})'''
    ...
    def setUcsFollowModeOn (self, *args, **kwargs)-> None :
      '''setUcsFollowModeOn( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsFollowModeOn(class PyDbViewport {lvalue})

setUcsFollowModeOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsFollowModeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconAtCorner (self, *args, **kwargs)-> None :
      '''setUcsIconAtCorner( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconAtCorner(class PyDbViewport {lvalue})'''
    ...
    def setUcsIconAtOrigin (self, *args, **kwargs)-> None :
      '''setUcsIconAtOrigin( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconAtOrigin(class PyDbViewport {lvalue})

setUcsIconAtOrigin( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsIconAtOrigin(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconInvisible (self, *args, **kwargs)-> None :
      '''setUcsIconInvisible( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconInvisible(class PyDbViewport {lvalue})'''
    ...
    def setUcsIconVisible (self, *args, **kwargs)-> None :
      '''setUcsIconVisible( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconVisible(class PyDbViewport {lvalue})

setUcsIconVisible( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsIconVisible(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsPerViewport (self, *args, **kwargs)-> None :
      '''setUcsPerViewport( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsPerViewport(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> None :
      '''setUcsToWorld( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsToWorld(class PyDbViewport {lvalue})'''
    ...
    def setUnlocked (self, *args, **kwargs)-> None :
      '''setUnlocked( (Viewport)arg1) -> None :

    C++ signature :
        void setUnlocked(class PyDbViewport {lvalue})'''
    ...
    def setViewCenter (self, *args, **kwargs)-> None :
      '''setViewCenter( (Viewport)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setViewCenter(class PyDbViewport {lvalue},class AcGePoint2d)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (Viewport)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbViewport {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewDirection1 (self, *args, **kwargs)-> None :
      '''setViewDirection1( (Viewport)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection1(class PyDbViewport {lvalue},class AcGeVector3d)'''
    ...
    def setViewHeight (self, *args, **kwargs)-> None :
      '''setViewHeight( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewHeight(class PyDbViewport {lvalue},double)'''
    ...
    def setViewTarget (self, *args, **kwargs)-> None :
      '''setViewTarget( (Viewport)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setViewTarget(class PyDbViewport {lvalue},class AcGePoint3d)'''
    ...
    def setVisibility (self: Entity,val: Visibility,dosubents = True)-> None :
      '''                             '''
    ...
    def setVisualStyle (self, *args, **kwargs)-> None :
      '''setVisualStyle( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setVisualStyle(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbViewport {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> VpShadePlotType :
      '''shadePlot( (Viewport)arg1) -> VpShadePlotType :

    C++ signature :
        enum AcDbViewport::ShadePlotType shadePlot(class PyDbViewport {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbViewport {lvalue})'''
    ...
    def showHiddenLines (self, *args, **kwargs)-> None :
      '''showHiddenLines( (Viewport)arg1) -> None :

    C++ signature :
        void showHiddenLines(class PyDbViewport {lvalue})'''
    ...
    def snapAngle (self, *args, **kwargs)-> float :
      '''snapAngle( (Viewport)arg1) -> float :

    C++ signature :
        double snapAngle(class PyDbViewport {lvalue})'''
    ...
    def snapBasePoint (self, *args, **kwargs)-> Point2d :
      '''snapBasePoint( (Viewport)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapBasePoint(class PyDbViewport {lvalue})'''
    ...
    def snapIncrement (self, *args, **kwargs)-> Vector2d :
      '''snapIncrement( (Viewport)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d snapIncrement(class PyDbViewport {lvalue})'''
    ...
    def snapIsoPair (self, *args, **kwargs)-> int :
      '''snapIsoPair( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short snapIsoPair(class PyDbViewport {lvalue})'''
    ...
    def standardScale (self, *args, **kwargs)-> StandardScaleType :
      '''standardScale( (Viewport)arg1) -> StandardScaleType :

    C++ signature :
        enum AcDbViewport::StandardScaleType standardScale(class PyDbViewport {lvalue})'''
    ...
    def subObjModified (self, *args, **kwargs)-> None :
      '''subObjModified( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void subObjModified(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbViewport {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def syncModelView (self, *args, **kwargs)-> None :
      '''syncModelView( (Viewport)arg1) -> None :

    C++ signature :
        void syncModelView(class PyDbViewport {lvalue})'''
    ...
    def thawAllLayersInViewport (self, *args, **kwargs)-> None :
      '''thawAllLayersInViewport( (Viewport)arg1) -> None :

    C++ signature :
        void thawAllLayersInViewport(class PyDbViewport {lvalue})'''
    ...
    def thawLayersInViewport (self, *args, **kwargs)-> None :
      '''thawLayersInViewport( (Viewport)arg1, (list)arg2) -> None :

    C++ signature :
        void thawLayersInViewport(class PyDbViewport {lvalue},class boost::python::list)'''
    ...
    def transformBy (self: Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (Viewport)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbViewport {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbViewport {lvalue})'''
    ...
    def updateDisplay (self, *args, **kwargs)-> None :
      '''updateDisplay( (Viewport)arg1) -> None :

    C++ signature :
        void updateDisplay(class PyDbViewport {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewCenter (self, *args, **kwargs)-> Point2d :
      '''viewCenter( (Viewport)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d viewCenter(class PyDbViewport {lvalue})'''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (Viewport)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbViewport {lvalue})'''
    ...
    def viewHeight (self, *args, **kwargs)-> float :
      '''viewHeight( (Viewport)arg1) -> float :

    C++ signature :
        double viewHeight(class PyDbViewport {lvalue})'''
    ...
    def viewTarget (self, *args, **kwargs)-> Point3d :
      '''viewTarget( (Viewport)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d viewTarget(class PyDbViewport {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: Entity)-> Visibility :
      '''                             '''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbViewport {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (Viewport)arg1) -> float :

    C++ signature :
        double width(class PyDbViewport {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class ViewportTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ViewportTableRecord :
      '''cast( (RxObject)arg1) -> ViewportTableRecord :

    C++ signature :
        class PyDbViewportTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def circleSides (self, *args, **kwargs)-> int :
      '''circleSides( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        unsigned short circleSides(class PyDbViewportTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ViewportTableRecord :
      '''cloneFrom( (RxObject)arg1) -> ViewportTableRecord :

    C++ signature :
        class PyDbViewportTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fastZoomsEnabled (self, *args, **kwargs)-> bool :
      '''fastZoomsEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool fastZoomsEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self, *args, **kwargs)-> None :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def gridEnabled (self, *args, **kwargs)-> bool :
      '''gridEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool gridEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def gridIncrements (self, *args, **kwargs)-> Point2d :
      '''gridIncrements( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d gridIncrements(class PyDbViewportTableRecord {lvalue})'''
    ...
    def gridMajor (self, *args, **kwargs)-> int :
      '''gridMajor( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short gridMajor(class PyDbViewportTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def iconAtOrigin (self, *args, **kwargs)-> bool :
      '''iconAtOrigin( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool iconAtOrigin(class PyDbViewportTableRecord {lvalue})'''
    ...
    def iconEnabled (self, *args, **kwargs)-> bool :
      '''iconEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool iconEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self, *args, **kwargs)-> bool :
      '''isGridAdaptive( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridAdaptive(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridBoundToLimits (self, *args, **kwargs)-> bool :
      '''isGridBoundToLimits( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridBoundToLimits(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridFollow (self, *args, **kwargs)-> bool :
      '''isGridFollow( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridFollow(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridSubdivisionRestricted (self, *args, **kwargs)-> bool :
      '''isGridSubdivisionRestricted( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridSubdivisionRestricted(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUcsSavedWithViewport (self, *args, **kwargs)-> bool :
      '''isUcsSavedWithViewport( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isUcsSavedWithViewport(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isometricSnapEnabled (self, *args, **kwargs)-> bool :
      '''isometricSnapEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isometricSnapEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def lowerLeftCorner (self, *args, **kwargs)-> Point2d :
      '''lowerLeftCorner( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d lowerLeftCorner(class PyDbViewportTableRecord {lvalue})'''
    ...
    def number (self, *args, **kwargs)-> int :
      '''number( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short number(class PyDbViewportTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def previousBackground (self, *args, **kwargs)-> ObjectId :
      '''previousBackground( (ViewportTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue})

previousBackground( (ViewportTableRecord)arg1, (GiDrawableType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self, *args, **kwargs)-> bool :
      '''previousBackgroundForcedSwitch( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool previousBackgroundForcedSwitch(class PyDbViewportTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> None :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> None :
      '''setBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setCircleSides (self, *args, **kwargs)-> None :
      '''setCircleSides( (ViewportTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setCircleSides(class PyDbViewportTableRecord {lvalue},unsigned short)'''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> None :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFastZoomsEnabled (self, *args, **kwargs)-> None :
      '''setFastZoomsEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFastZoomsEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setGridAdaptive (self, *args, **kwargs)-> None :
      '''setGridAdaptive( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridAdaptive(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridBoundToLimits (self, *args, **kwargs)-> None :
      '''setGridBoundToLimits( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridBoundToLimits(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridEnabled (self, *args, **kwargs)-> None :
      '''setGridEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridFollow (self, *args, **kwargs)-> None :
      '''setGridFollow( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridFollow(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridIncrements (self, *args, **kwargs)-> None :
      '''setGridIncrements( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setGridIncrements(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setGridMajor (self, *args, **kwargs)-> None :
      '''setGridMajor( (ViewportTableRecord)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setGridMajor(class PyDbViewportTableRecord {lvalue},short)'''
    ...
    def setGridSubdivisionRestricted (self, *args, **kwargs)-> None :
      '''setGridSubdivisionRestricted( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridSubdivisionRestricted(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setIconAtOrigin (self, *args, **kwargs)-> None :
      '''setIconAtOrigin( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIconAtOrigin(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setIconEnabled (self, *args, **kwargs)-> None :
      '''setIconEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIconEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setIsometricSnapEnabled (self, *args, **kwargs)-> None :
      '''setIsometricSnapEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsometricSnapEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLowerLeftCorner (self, *args, **kwargs)-> None :
      '''setLowerLeftCorner( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setLowerLeftCorner(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> None :
      '''setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2, (GiDrawableType)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setSnapAngle (self, *args, **kwargs)-> None :
      '''setSnapAngle( (ViewportTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setSnapAngle(class PyDbViewportTableRecord {lvalue},double)'''
    ...
    def setSnapBase (self, *args, **kwargs)-> None :
      '''setSnapBase( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setSnapBase(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setSnapEnabled (self, *args, **kwargs)-> None :
      '''setSnapEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setSnapIncrements (self, *args, **kwargs)-> None :
      '''setSnapIncrements( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setSnapIncrements(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setSnapPair (self, *args, **kwargs)-> None :
      '''setSnapPair( (ViewportTableRecord)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setSnapPair(class PyDbViewportTableRecord {lvalue},short)'''
    ...
    def setSun (self, *args, **kwargs)-> None :
      '''setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> None :

    C++ signature :
        void setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowMode (self, *args, **kwargs)-> None :
      '''setUcsFollowMode( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsFollowMode(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setUcsPerViewport (self, *args, **kwargs)-> None :
      '''setUcsPerViewport( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsPerViewport(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> None :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> None :

    C++ signature :
        void setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setUpperRightCorner (self, *args, **kwargs)-> None :
      '''setUpperRightCorner( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setUpperRightCorner(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> None :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snapAngle (self, *args, **kwargs)-> float :
      '''snapAngle( (ViewportTableRecord)arg1) -> float :

    C++ signature :
        double snapAngle(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapBase (self, *args, **kwargs)-> Point2d :
      '''snapBase( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapBase(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapEnabled (self, *args, **kwargs)-> bool :
      '''snapEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool snapEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapIncrements (self, *args, **kwargs)-> Point2d :
      '''snapIncrements( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapIncrements(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapPair (self, *args, **kwargs)-> int :
      '''snapPair( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short snapPair(class PyDbViewportTableRecord {lvalue})'''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsFollowMode (self, *args, **kwargs)-> bool :
      '''ucsFollowMode( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool ucsFollowMode(class PyDbViewportTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def upperRightCorner (self, *args, **kwargs)-> Point2d :
      '''upperRightCorner( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d upperRightCorner(class PyDbViewportTableRecord {lvalue})'''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class Visibility:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInvisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class VpFreezeOps:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kFreeze (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kReset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kThaw (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class VpShadePlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Xrecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: DbObject)-> None :
      '''                             '''
    ...
    def cast (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (otherObject: PyRx.RxObject)-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: Drawable)-> GiDrawableType :
      '''                             '''
    ...
    def erase (self: DbObject)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject,prop: str=TEXT)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def id (self: Drawable)-> ObjectId :
      '''                             '''
    ...
    def implRefCount (self: RxObject)-> int :
      '''                             '''
    ...
    def isA (self: Drawable)-> RxClass :
      '''                             '''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isXlateReferences (self, *args, **kwargs)-> bool :
      '''isXlateReferences( (Xrecord)arg1) -> bool :

    C++ signature :
        bool isXlateReferences(class PyDbXrecord {lvalue})'''
    ...
    def mergeStyle (self, *args, **kwargs)-> DuplicateRecordCloning :
      '''mergeStyle( (Xrecord)arg1) -> DuplicateRecordCloning :

    C++ signature :
        enum AcDb::DuplicateRecordCloning mergeStyle(class PyDbXrecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def rbChain (self, *args, **kwargs)-> list :
      '''rbChain( (Xrecord)arg1) -> list :

    C++ signature :
        class boost::python::list rbChain(class PyDbXrecord {lvalue})

rbChain( (Xrecord)arg1, (Database)arg2) -> list :

    C++ signature :
        class boost::python::list rbChain(class PyDbXrecord {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> None :
      '''                             '''
    ...
    def removeField (self: DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> None :
      '''                             '''
    ...
    def rolloverHit (self: Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self: Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: DbObject,prop: str=TEXT,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromRbChain (self, *args, **kwargs)-> None :
      '''setFromRbChain( (Xrecord)arg1, (list)arg2) -> None :

    C++ signature :
        void setFromRbChain(class PyDbXrecord {lvalue},class boost::python::list)

setFromRbChain( (Xrecord)arg1, (list)arg2, (Database)arg3) -> None :

    C++ signature :
        void setFromRbChain(class PyDbXrecord {lvalue},class boost::python::list,class PyDbDatabase {lvalue})'''
    ...
    def setMergeStyle (self, *args, **kwargs)-> None :
      '''setMergeStyle( (Xrecord)arg1, (DuplicateRecordCloning)arg2) -> None :

    C++ signature :
        void setMergeStyle(class PyDbXrecord {lvalue},enum AcDb::DuplicateRecordCloning)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXlateReferences (self, *args, **kwargs)-> None :
      '''setXlateReferences( (Xrecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setXlateReferences(class PyDbXrecord {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def worldDraw (self: Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> None :
      '''                             '''
    ...

class XrefObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def getLocalId (self, *args, **kwargs)-> None :
      '''getLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void getLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getXrefId (self, *args, **kwargs)-> None :
      '''getXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void getXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbXrefObjectId {lvalue})'''
    ...
    def isXref (self, *args, **kwargs)-> bool :
      '''isXref( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isXref(class PyDbXrefObjectId {lvalue})'''
    ...
    def resolveObjectId (self, *args, **kwargs)-> None :
      '''resolveObjectId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void resolveObjectId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLocalId (self, *args, **kwargs)-> None :
      '''setLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (XrefObjectId)arg1) -> None :

    C++ signature :
        void setNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def setXrefId (self, *args, **kwargs)-> None :
      '''setXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void setXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle)'''
    ...

class XrefStatus:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kXrfFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfNotAnXref (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfResolved (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnreferenced (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnresolved (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class __loader__:
    def _ORIGIN (self, *args, **kwargs)-> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict':
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def create_module (spec):
      '''Create a built-in module'''
    ...
    def exec_module (module):
      '''Exec a built-in module'''
    ...
    def find_module (fullname, path=None):
      '''Find the built-in module.

        If 'path' is ever specified then the search is considered a failure.

        This method is deprecated.  Use find_spec() instead.

        '''
    ...
    def find_spec (fullname, path=None, target=None):
      '''None'''
    ...
    def get_code (fullname):
      '''Return None as built-in modules do not have code objects.'''
    ...
    def get_source (fullname):
      '''Return None as built-in modules do not have source code.'''
    ...
    def is_package (fullname):
      '''Return False as built-in modules are never packages.'''
    ...
    def load_module (fullname):
      '''Load the specified module into sys.modules and return it.

    This method is deprecated.  Use loader.exec_module() instead.

    '''
    ...
    def module_repr (module):
      '''Return repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        '''
    ...

function curDb:
    def curDb (*args, **kwargs)-> Database :
      '''curDb() -> Database :

    C++ signature :
        class PyDbDatabase curDb()'''
    ...
