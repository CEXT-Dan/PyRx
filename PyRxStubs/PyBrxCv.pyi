import PyRx
import PyGe
import PyGi
import PyGs
import PyDb
import PyAp
import PyEd
import PyPl
import PyBrxCv
from typing import overload

class ArcParameterType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eChordLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCurveAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCurveLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCurveThroughPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDegreeOfCurve (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eExternalDist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMiddleOrdinate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRadius (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTangentLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ArcType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eCompound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eReverse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Civil3dAlignmentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eCenterline (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCurbReturn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMiscellaneous (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRail (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Civil3dEntityType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfileView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTinSurface (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Civil3dLabels:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eAlignmentsLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAllLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDefaultLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSurfaceLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnattachedLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Civil3dProfileType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eDynamicSurface (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotProfile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eQuick (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eStaticSurface (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CvCivil3dConverter:
    def __init__ (self, sourceDb: PyDb.Database=None, targetDb: PyDb.Database=None, doLabels: PyBrxCv.Civil3dLabels=eDefaultLabels)-> None :
      '''                             '''
    ...
    def attachedLabels (self, civilEntity: PyBrxCv.CvCivil3dEntityInfo)-> list :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def convert (self, entitiesToConvert : list)-> list :
      '''                             '''
    ...
    def getCivilEntities (self, *args, **kwargs)-> list :
      '''getCivilEntities( (CvCivil3dConverter)arg1) -> list :

    C++ signature :
        class boost::python::list getCivilEntities(class PyBrxCvCivil3dConverter {lvalue})'''
    ...
    def getInsertedEntities (self, *args, **kwargs)-> list :
      '''getInsertedEntities( (CvCivil3dConverter)arg1) -> list :

    C++ signature :
        class boost::python::list getInsertedEntities(class PyBrxCvCivil3dConverter {lvalue})

getInsertedEntities( (CvCivil3dConverter)arg1) -> list :

    C++ signature :
        class boost::python::list getInsertedEntities(class PyBrxCvCivil3dConverter {lvalue})'''
    ...
    def unattachedLabels (self, *args, **kwargs)-> list :
      '''unattachedLabels( (CvCivil3dConverter)arg1) -> list :

    C++ signature :
        class boost::python::list unattachedLabels(class PyBrxCvCivil3dConverter {lvalue})'''
    ...

class CvCivil3dEntityInfo:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def alignmentType (self, *args, **kwargs)-> PyBrxCv.Civil3dAlignmentType :
      '''alignmentType( (CvCivil3dEntityInfo)arg1) -> Civil3dAlignmentType :

    C++ signature :
        enum BrxCvCivil3dEntityInfo::Civil3dAlignmentType alignmentType(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def baseAlignment (self, *args, **kwargs)-> PyBrxCv.CvCivil3dEntityInfo :
      '''baseAlignment( (CvCivil3dEntityInfo)arg1) -> CvCivil3dEntityInfo :

    C++ signature :
        class PyBrxCvCivil3dEntityInfo baseAlignment(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def baseSurface (self, *args, **kwargs)-> PyBrxCv.CvCivil3dEntityInfo :
      '''baseSurface( (CvCivil3dEntityInfo)arg1) -> CvCivil3dEntityInfo :

    C++ signature :
        class PyBrxCvCivil3dEntityInfo baseSurface(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (CvCivil3dEntityInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (CvCivil3dEntityInfo)arg1) -> bool :

    C++ signature :
        bool isNull(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (CvCivil3dEntityInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def objectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''objectId( (CvCivil3dEntityInfo)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def profileType (self, *args, **kwargs)-> PyBrxCv.Civil3dProfileType :
      '''profileType( (CvCivil3dEntityInfo)arg1) -> Civil3dProfileType :

    C++ signature :
        enum BrxCvCivil3dEntityInfo::Civil3dProfileType profileType(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def profiles (self, *args, **kwargs)-> list :
      '''profiles( (CvCivil3dEntityInfo)arg1) -> list :

    C++ signature :
        class boost::python::list profiles(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...
    def type (self, *args, **kwargs)-> PyBrxCv.Civil3dEntityType :
      '''type( (CvCivil3dEntityInfo)arg1) -> Civil3dEntityType :

    C++ signature :
        enum BrxCvCivil3dEntityInfo::Civil3dEntityType type(class PyBrxCvCivil3dEntityInfo {lvalue})'''
    ...

class CvDb3dAlignment(CvDbCurve):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def baseHAlignment (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDb3dAlignment :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDb3dAlignment :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},int,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointsArray (self)-> list :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isClosed (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> int :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBaseHAlignment (self, id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVAlignment (self, id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def vAlignment (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbCurve(PyDb.Curve):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbCurve :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbCurve :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},int,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isClosed (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> int :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbEntity(PyDb.Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbEntity :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbEntity :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbFileFormatManager(CvDbObjectManager):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def allFileFormats (self)-> list :
      '''                             '''
    ...
    def applicableFileFormats (self, val : str)-> list :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbFileFormatManager :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbFileFormatManager :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elementCount (self)-> int :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...

    @staticmethod
    def getManager (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has1 (self, *args, **kwargs)-> bool :
      '''has1( (CvDbObjectManager)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has1(class PyBrxCvDbObjectManager {lvalue},class PyDbObjectId)'''
    ...
    def has2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def idAt (self, val : int|str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ids (self)-> list :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nameAt (self, val : int)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def openManager (db: PyDb.Database,mode: PyDb.OpenMode)-> PyBrxCv.CvDbFileFormatManager :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def remove1 (self)-> bool :
      '''                             '''
    ...
    def remove2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbGrading(CvDbEntity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbGrading :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbGrading :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCalculationCurve (self)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getCalculationMethod (self)-> PyBrxCv.GradingCalculationMethod :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGradingVisualStyle (self)-> PyBrxCv.GradingVisualStyle :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getInputEntityId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getIsAssociative (self)-> bool :
      '''                             '''
    ...
    def getIsDrawInfill (self)-> bool :
      '''                             '''
    ...
    def getMidOrdinateDist (self)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getRegionEnd (self)-> float :
      '''                             '''
    ...
    def getRegionStart (self)-> float :
      '''                             '''
    ...
    def getSegmentMaxAngle (self)-> float :
      '''                             '''
    ...
    def getSegmentMaxLength (self)-> float :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def resultDayLight (self)-> list :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def rule (self)-> PyBrxCv.CvGradingRule :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCalculationMethod (self, val : PyBrxCv.GradingCalculationMethod)-> bool :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setDrawInfill (self, val : bool)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setGradingVisualStyle (self, val : PyBrxCv.GradingVisualStyle)-> bool :
      '''                             '''
    ...
    def setInputData (self, curve: PyGe.Curve3d)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setInputDataId (self, id : PyDb.ObjectId)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setIsAssociative (self, val : bool)-> bool :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMidOrdinateDist (self, val : float)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRegionEnd (self, val : float)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setRegionStart (self, val : float)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setRule (self, val : PyBrxCv.CvGradingRule)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setSegmentMaxAngle (self, val : float)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setSegmentMaxLength (self, val : float)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def targetSurface (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def update (self, val : bool)-> PyBrxCv.GradingStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbHAlignment(CvDbCurve):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addArcAuto (self, prevId: int, nextId: int)-> int :
      '''                             '''
    ...

    @overload
    def addArcBetween (self, prevId: int, nextId: int, passThroughPoint: PyGe.Point2d)-> int : ...
    @overload
    def addArcBetween (self, prevId: int, nextId: int, parameter: float, paramType: PyBrxCv.EArcParameterType, isGreaterThan180: bool, arcType: PyBrxCv.ArcType)-> int : ...
    def addArcBetween (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId: int, nextId: int, passThroughPoint: PyGe.Point2d
    - prevId: int, nextId: int, parameter: float, paramType: PyBrxCv.EArcParameterType, isGreaterThan180: bool, arcType: PyBrxCv.ArcType
    '''
    ...

    @overload
    def addArcFixed (self, center: PyGe.Point2d, radius: float, clockwise: bool)-> int : ...
    @overload
    def addArcFixed (self, startPoint: PyGe.Point2d, midPoint: PyGe.Point2d, endPoint: PyGe.Point2d)-> int : ...
    def addArcFixed (self, *args, **kwargs)-> int :
      '''Overloads:
    - center: PyGe.Point2d, radius: float, clockwise: bool
    - startPoint: PyGe.Point2d, midPoint: PyGe.Point2d, endPoint: PyGe.Point2d
    '''
    ...

    @overload
    def addArcFrom (self, prevId: int, passThroughPoint: PyGe.Point2d)-> int : ...
    @overload
    def addArcFrom (self, prevId: int, passThroughPoint: PyGe.Point2d, direction: PyGe.Vector2d)-> int : ...
    @overload
    def addArcFrom (self, prevId: int, passThroughPoint: PyGe.Point2d, radius: float, isGreaterThan180: bool, arcType: PyBrxCv.ArcType)-> int : ...
    @overload
    def addArcFrom (self, prevId: int, radius: float, paramValue: float, paramType: PyBrxCv.ArcType, isClockwise: bool)-> int : ...
    def addArcFrom (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId: int, passThroughPoint: PyGe.Point2d
    - prevId: int, passThroughPoint: PyGe.Point2d, direction: PyGe.Vector2d
    - prevId: int, passThroughPoint: PyGe.Point2d, radius: float, isGreaterThan180: bool, arcType: PyBrxCv.ArcType
    - prevId: int, radius: float, paramValue: float, paramType: PyBrxCv.ArcType, isClockwise: bool
    '''
    ...

    @overload
    def addArcTo (self, nextId: int, passThroughPoint: PyGe.Point2d)-> int : ...
    @overload
    def addArcTo (self, nextId: int, passThroughPoint: PyGe.Point2d, direction: PyGe.Vector2d)-> int : ...
    @overload
    def addArcTo (self, nextId: int, passThroughPoint: PyGe.Point2d, radius: float, isGreaterThan180: bool, arcType: PyBrxCv.ArcType)-> int : ...
    @overload
    def addArcTo (self, nextId: int, radius: float, paramValue: float, paramType: PyBrxCv.ArcType, isClockwise: bool)-> int : ...
    def addArcTo (self, *args, **kwargs)-> int :
      '''Overloads:
    - nextId: int, passThroughPoint: PyGe.Point2d
    - nextId: int, passThroughPoint: PyGe.Point2d, direction: PyGe.Vector2d
    - nextId: int, passThroughPoint: PyGe.Point2d, radius: float, isGreaterThan180: bool, arcType: PyBrxCv.ArcType
    - nextId: int, radius: float, paramValue: float, paramType: PyBrxCv.ArcType, isClockwise: bool
    '''
    ...
    def addCSSTo (self, nextId: int, spiral1Param: float, spiral2Param: float, spiralParamType, radius: float, passThroughPoint: PyGe.Point2d, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...

    @overload
    def addCSTo (self, nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  passThroughPoint: PyGe.Point2d, isGreaterThan180: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    @overload
    def addCSTo (self, nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  arcLength: float, isClockwise: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    def addCSTo (self, *args, **kwargs)-> int :
      '''Overloads:
    - nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  passThroughPoint: PyGe.Point2d, isGreaterThan180: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType
    - nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  arcLength: float, isClockwise: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addLineBetween (self, prevId: int, nextId: int)-> int :
      '''                             '''
    ...

    @overload
    def addLineFixed (self, prevId : int, length: float)-> int : ...
    @overload
    def addLineFixed (self, start: PyGe.Point2d, end: PyGe.Point2d)-> int : ...
    def addLineFixed (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId : int, length: float
    - start: PyGe.Point2d, end: PyGe.Point2d
    '''
    ...

    @overload
    def addLineFrom (self, prevId : int, length: float)-> int : ...
    @overload
    def addLineFrom (self, prevId : int, to: PyGe.Point2d)-> int : ...
    def addLineFrom (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId : int, length: float
    - prevId : int, to: PyGe.Point2d
    '''
    ...

    @overload
    def addLineTo (self, nextId : int, length: float)-> int : ...
    @overload
    def addLineTo (self, nextId : int, to: PyGe.Point2d)-> int : ...
    def addLineTo (self, *args, **kwargs)-> int :
      '''Overloads:
    - nextId : int, length: float
    - nextId : int, to: PyGe.Point2d
    '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...

    @overload
    def addSCFrom (self, prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  passThroughPoint: PyGe.Point2d, isGreaterThan180: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    @overload
    def addSCFrom (self, prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  arcLength: float, isClockwise: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    def addSCFrom (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  passThroughPoint: PyGe.Point2d, isGreaterThan180: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType
    - prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, radius: float,  arcLength: float, isClockwise: bool, spiralDefinition: PyBrxCv.SpiralDefinitionType
    '''
    ...
    def addSCSAuto (self, prevId: int, nextId: int)-> int :
      '''                             '''
    ...
    def addSCSBetween (self, prevId: int, nextId: int, spiral1: float, spiral2: float, spiralType: PyBrxCv.SpiralParameterType, radius: float, spiralDef: PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSSBetween (self, prevId: int, nextId: int, spiralRatio: float, spiralParamType : PyBrxCv.SpiralParameterType, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSSCFrom (self, prevId: int, spiral1Param: float, spiral2Param: float, spiralParamType, radius: float, passThroughPoint: PyGe.Point2d, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...

    @overload
    def addSTFrom (self, prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, passThroughPoint: PyGe.Point2d,  spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    @overload
    def addSTFrom (self, prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, tangentLength: float,  spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    def addSTFrom (self, *args, **kwargs)-> int :
      '''Overloads:
    - prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, passThroughPoint: PyGe.Point2d,  spiralDefinition: PyBrxCv.SpiralDefinitionType
    - prevId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, tangentLength: float,  spiralDefinition: PyBrxCv.SpiralDefinitionType
    '''
    ...
    def addSTSBetween (self, prevId: int, nextId: int, spiral1Param: float, spiral2Param: float, spiralType : PyBrxCv.SpiralParameterType, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSpiralBetween (self, prevId: int, nextId: int, spiralDef: PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSpiralFrom (self, prevId: int, radius: float, length: float, isClockwise: bool, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSpiralTo (self, nextId: int, radius: float, length: float, isClockwise: bool, spiralDef : PyBrxCv.SpiralDefinitionType)-> int :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...

    @overload
    def addTSTo (self, nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, passThroughPoint: PyGe.Point2d,  spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    @overload
    def addTSTo (self, nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, tangentLength: float,  spiralDefinition: PyBrxCv.SpiralDefinitionType)-> int : ...
    def addTSTo (self, *args, **kwargs)-> int :
      '''Overloads:
    - nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, passThroughPoint: PyGe.Point2d,  spiralDefinition: PyBrxCv.SpiralDefinitionType
    - nextId: int, spiralParam: float, spiralParamType: PyBrxCv.EArcParameterType, tangentLength: float,  spiralDefinition: PyBrxCv.SpiralDefinitionType
    '''
    ...
    def alignment3dAt (self, index: int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def alignment3dCount (self)-> int :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignment :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignment :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def curveAtPI (self, pi: PyBrxCv.CvDbHAlignmentPI)-> int :
      '''                             '''
    ...
    def curveElementColor (self)-> int :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def deleteElement (self, id: int)-> bool :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elementAtId (self, Id: int)-> PyBrxCv.CvDbHAlignmentElement :
      '''                             '''
    ...
    def elementAtStation (self, station: float)-> PyBrxCv.CvDbHAlignmentElement :
      '''                             '''
    ...
    def elementCount (self)-> int :
      '''                             '''
    ...
    def elementExtensionColor (self)-> int :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},int,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def firstElementId (self)-> int :
      '''                             '''
    ...
    def firstLineElementId (self)-> int :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getElementId (self, gsMarker: int)-> int :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getPIsArray (self)-> list :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtStation (self, station: float)-> tuple :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getRadius (self, param: float)-> float :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @overload
    def getStationAtPoint (self, station: PyGe.Point2d)-> tuple : ...
    @overload
    def getStationAtPoint (self, station: PyGe.Point2d,fromStation: float, toStation: float)-> tuple : ...
    def getStationAtPoint (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - station: PyGe.Point2d
    - station: PyGe.Point2d,fromStation: float, toStation: float
    '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUnorderedElementIds (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def insertLineFixed (self, start: PyGe.Point2d, end: PyGe.Point2d, prevId: int)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isClosed (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> int :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lastElementId (self)-> int :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def lineElementColor (self)-> int :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextLineElementId (self, Id: int)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def previousLineElementId (self, Id: int)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setCurveElementColor (self, colACI: int)-> bool :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setElementExtensionColor (self, colACI: int)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineElementColor (self, colACI: int)-> bool :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setSpiralElementColor (self, colACI: int)-> bool :
      '''                             '''
    ...
    def setStationEquations (self, val: PyBrxCv.CvStationEquations)-> bool :
      '''                             '''
    ...
    def setStyle (self, style: int)-> bool :
      '''                             '''
    ...
    def setTangentExtensionColor (self, colACI: int)-> bool :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def spiralElementColor (self)-> int :
      '''                             '''
    ...
    def stationEquations (self)-> PyBrxCv.CvStationEquations :
      '''                             '''
    ...
    def style (self)-> int :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tangentExtensionColor (self)-> int :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def update (self)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def verticalAlignmentAt (self, index: int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def verticalAlignmentCount (self)-> int :
      '''                             '''
    ...
    def verticalAlignmentViewAt (self, index: int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def verticalAlignmentViewCount (self)-> int :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbHAlignmentArc(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentArc :
      '''                             '''
    ...
    def center (self)-> PyGe.Point2d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isClockwise (self)-> bool :
      '''                             '''
    ...
    def isCompound (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLessThan180 (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def paramLength (self)-> float :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def passThroughPoint1 (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def passThroughPoint2 (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def passThroughPoint3 (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self)-> float :
      '''                             '''
    ...
    def setCenter (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setClockwise (self, val : bool)-> bool :
      '''                             '''
    ...
    def setCompound (self, val : bool)-> bool :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setLessThan180 (self, val : bool)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParamLength (self, val : float)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPassThroughPoint1 (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setPassThroughPoint2 (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setPassThroughPoint3 (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setRadius (self, val : float)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentCurve(CvDbHAlignmentElement):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentCurve :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentElement(CvDbSubObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentElement :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentLine(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentLine :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def paramLength (self)-> float :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def passThroughPoint1 (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def passThroughPoint2 (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParamLength (self, val : float)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPassThroughPoint1 (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setPassThroughPoint2 (self, pt : PyGe.Point2d)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentPI(CvDbHAlignmentElement):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentPI :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def location (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentSCS(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def arc (self)-> PyBrxCv.CvDbHAlignmentArc :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentSCS :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def spiralIn (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiralOut (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentSSCSS(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def arc (self)-> PyBrxCv.CvDbHAlignmentArc :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentSSCSS :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def spiral1 (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiral2 (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiral3 (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiral4 (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentSTS(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentSTS :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def line (self)-> PyBrxCv.CvDbHAlignmentLine :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def spiralIn (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiralOut (self)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...
    def spiralRatio (self)-> float :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbHAlignmentSpiral(CvDbHAlignmentCurve):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbHAlignmentSpiral :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endDirection (self)-> float :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def endStation (self)-> float :
      '''                             '''
    ...
    def id (self)-> int :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isCompound (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isSubentity (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nextId (self)-> int :
      '''                             '''
    ...
    def paramA (self)-> float :
      '''                             '''
    ...
    def paramLength (self)-> float :
      '''                             '''
    ...
    def parameterConstraint (self)-> PyBrxCv.HAlignmentParameterConstraint :
      '''                             '''
    ...
    def previousId (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radiusIn (self)-> float :
      '''                             '''
    ...
    def radiusOut (self)-> float :
      '''                             '''
    ...
    def setClockwise (self, val : bool)-> bool :
      '''                             '''
    ...
    def setCompound (self, val : float)-> bool :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setEndDirection (self, val : float)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextId (self, val : int)-> bool :
      '''                             '''
    ...
    def setParamA (self, val : float)-> bool :
      '''                             '''
    ...
    def setParamLength (self, val : float)-> bool :
      '''                             '''
    ...
    def setParameterConstraint (self, val : PyBrxCv.EParameterConstraint)-> bool :
      '''                             '''
    ...
    def setPreviousId (self, val : int)-> bool :
      '''                             '''
    ...
    def setRadiusIn (self, val : float)-> bool :
      '''                             '''
    ...
    def setRadiusOut (self, val : float)-> bool :
      '''                             '''
    ...
    def setSpiralCurveType (self, val : PyBrxCv.ESpiralCurveType)-> bool :
      '''                             '''
    ...
    def setSpiralDefinition (self, val : PyBrxCv.ESpiralDefinitionType)-> bool :
      '''                             '''
    ...
    def setTangencyConstraint (self, val : PyBrxCv.ETangencyConstraint)-> bool :
      '''                             '''
    ...
    def spiralCurveType (self)-> PyBrxCv.SpiralCurveType :
      '''                             '''
    ...
    def spiralDefinition (self)-> PyBrxCv.SpiralDefinitionType :
      '''                             '''
    ...
    def startDirection (self)-> float :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def startStation (self)-> float :
      '''                             '''
    ...
    def tangencyConstraint (self)-> PyBrxCv.HAlignmentTangencyConstraint :
      '''                             '''
    ...
    def type (self)-> PyBrxCv.HAlignmentElementType :
      '''                             '''
    ...

class CvDbObject(PyDb.DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbObject :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbObject :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbObjectManager(CvDbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbObjectManager :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbObjectManager :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elementCount (self)-> int :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has1 (self, *args, **kwargs)-> bool :
      '''has1( (CvDbObjectManager)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has1(class PyBrxCvDbObjectManager {lvalue},class PyDbObjectId)'''
    ...
    def has2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def idAt (self, val : int|str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ids (self)-> list :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nameAt (self, val : int)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def remove1 (self)-> bool :
      '''                             '''
    ...
    def remove2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbPoint(CvDbEntity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPoint :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPoint :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def easting (self)-> float :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fullDescription (self)-> str :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLabelDragged (self)-> bool :
      '''                             '''
    ...
    def isLabelPinned (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def labelId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def labelLeaderVertices (self)-> list :
      '''                             '''
    ...
    def labelPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def labelRotation (self)-> float :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def northing (self)-> float :
      '''                             '''
    ...
    def number (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def pointGroupsIds (self)-> list :
      '''                             '''
    ...
    def pointGroupsNames (self)-> list :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rawDescription (self)-> str :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def referencedEntityAt (self, val : int)-> PyBrxCv.CvDbPointReferencedEntity :
      '''                             '''
    ...
    def referencedEntityCount (self)-> int :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def resetLabel (self)-> bool :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setEasting (self, val : float)-> bool :
      '''                             '''
    ...
    def setElevation (self, val : float)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLabelId (self, id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setLabelLeaderVertices (self, vertices : list[PyGe.Point3d])-> bool :
      '''                             '''
    ...
    def setLabelPinned (self, val : bool)-> bool :
      '''                             '''
    ...
    def setLabelPosition (self, pt : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def setLabelRotation (self, val : float)-> bool :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNorthing (self, val : float)-> bool :
      '''                             '''
    ...
    def setNumber (self, val : int)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (int)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,int)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (int)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,int)'''
    ...
    def setPosition (self, pt : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRawDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setSymbolId (self, id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setSymbolRotation (self, val : float)-> bool :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def symbolId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def symbolRotation (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def update (self)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbPointGroup(CvDbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPointGroup :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPointGroup :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def excludeElevations (self, *args, **kwargs)-> str :
      '''excludeElevations( (CvDbPointGroup)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > excludeElevations(class PyBrxCvDbPointGroup {lvalue})'''
    ...
    def excludeFullDescriptions (self)-> str :
      '''                             '''
    ...
    def excludeNames (self)-> str :
      '''                             '''
    ...
    def excludeNumbers (self)-> str :
      '''                             '''
    ...
    def excludeRawDescriptions (self)-> str :
      '''                             '''
    ...
    def excludeUserAttributesKeys (self)-> str :
      '''                             '''
    ...
    def excludeUserAttributesValues (self)-> str :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPoint (self, val : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def includeElevations (self)-> str :
      '''                             '''
    ...
    def includeFullDescriptions (self)-> str :
      '''                             '''
    ...
    def includeNames (self)-> str :
      '''                             '''
    ...
    def includeNumbers (self)-> str :
      '''                             '''
    ...
    def includeRawDescriptions (self)-> str :
      '''                             '''
    ...
    def includeUserAttributesKeys (self)-> str :
      '''                             '''
    ...
    def includeUserAttributesValues (self)-> str :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isApplicable (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEditable (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pointCount (self)-> int :
      '''                             '''
    ...
    def pointIds (self)-> list :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setExcludeElevations (self, filter : str)-> bool :
      '''                             '''
    ...
    def setExcludeFullDescriptions (self, filter : str)-> bool :
      '''                             '''
    ...
    def setExcludeNames (self, filter : str)-> bool :
      '''                             '''
    ...
    def setExcludeNumbers (self, filter : str)-> bool :
      '''                             '''
    ...
    def setExcludeRawDescriptions (self, filter : str)-> bool :
      '''                             '''
    ...
    def setExcludeUserAttributesKeys (self, filter : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setIncludeElevations (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeFullDescriptions (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeNames (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeNumbers (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeRawDescriptions (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeUserAttributesKeys (self, filter : str)-> bool :
      '''                             '''
    ...
    def setIncludeUserAttributesValues (self, filter : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def update (self)-> bool :
      '''                             '''
    ...
    def updateNeeded (self)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbPointGroupManager(CvDbObjectManager):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPointGroupManager :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPointGroupManager :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def createPointGroup (self, val : str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elementCount (self)-> int :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...

    @staticmethod
    def getManagerId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def groupsWithPoint (self, val : int)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has1 (self, *args, **kwargs)-> bool :
      '''has1( (CvDbObjectManager)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has1(class PyBrxCvDbObjectManager {lvalue},class PyDbObjectId)'''
    ...
    def has2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def idAt (self, val : int|str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ids (self)-> list :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nameAt (self, val : int)-> str :
      '''                             '''
    ...
    def nextPointNumber (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def openManager (db: PyDb.Database,mode: PyDb.OpenMode)-> PyBrxCv.CvDbPointGroupManager :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def remove1 (self)-> bool :
      '''                             '''
    ...
    def remove2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setNextPointNumber (self, val : int)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def updatePointGroups (self)-> int :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbPointReferencedEntity(CvDbSubObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbPointReferencedEntity :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setId (self, id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def type (self)-> PyRx.RxClass :
      '''                             '''
    ...

class CvDbStyleManager(CvDbObjectManager):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbStyleManager :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbStyleManager :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elementCount (self)-> int :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...

    @staticmethod
    def getManager (db: PyDb.Database,styleType: PyBrxCv.StyleManagerType)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has1 (self, *args, **kwargs)-> bool :
      '''has1( (CvDbObjectManager)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has1(class PyBrxCvDbObjectManager {lvalue},class PyDbObjectId)'''
    ...
    def has2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def idAt (self, val : int|str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ids (self)-> list :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def nameAt (self, val : int)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def openManager (db: PyDb.Database,mode: PyDb.OpenMode,styleType: PyBrxCv.StyleManagerType)-> PyBrxCv.CvDbObjectManager :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def remove1 (self)-> bool :
      '''                             '''
    ...
    def remove2 (self, id : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> int :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class CvDbSubObject(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbObject :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...

class CvDbTinSurface(CvDbEntity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addConstraint (self, constraint : PyBrxCv.CvDbTinSurfaceConstraint, addReactor : bool)-> bool :
      '''                             '''
    ...
    def addConstraints (self, constraints : list[PyBrxCv.CvDbTinSurfaceConstraint], addReactor : bool)-> bool :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addDefinition (self, ref : PyBrxCv.CvDbTinSurfaceDefinition)-> int :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addPoint (self, pt : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def addPoints (self, pts : list[PyGe.Point3d])-> bool :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def area2d (self, visibleOnly : bool=False)-> float :
      '''                             '''
    ...
    def area3d (self, visibleOnly : bool=False)-> float :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def boundingBox (self)-> tuple :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbTinSurface :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def changePointsElevations (self, pts : list[PyGe.Point3d], newZValues : list[float])-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyBrxCv.CvDbTinSurface :
      '''                             '''
    ...
    def close (self)-> None :
      '''                             '''
    ...
    def closestPointTo (self, pt : PyGe.Point3d)-> PyGe.Point3d :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contains (self, pt : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def contoursAtElevation (self, elevation : float)-> list :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def createSnapshot (self)-> int :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definitionAt (self, index : int)-> PyBrxCv.CvDbTinSurfaceDefinition :
      '''                             '''
    ...
    def definitionCount (self)-> int :
      '''                             '''
    ...
    def definitionIndex (self, ref : PyBrxCv.CvDbTinSurfaceDefinition)-> tuple :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''                             '''
    ...
    def drapeId (self, id : PyDb.ObjectId)-> list :
      '''                             '''
    ...
    def drapePoint (self, pts : list[PyGe.Point3d])-> list :
      '''                             '''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevationAtPoint (self, pt : PyGe.Point3d)-> tuple :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def eraseConstraint (self, id : PyDb.ObjectId | int, removeReactor : bool)-> bool :
      '''                             '''
    ...
    def eraseConstraints (self, int64ids : list[int], removeReactor : bool)-> bool :
      '''                             '''
    ...
    def eraseConstraintsIds (self, ids : list[PyDb.ObjectId], removeReactor : bool)-> bool :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def findDefinition (self, id : int)-> PyBrxCv.CvDbTinSurfaceDefinition :
      '''                             '''
    ...
    def findTinPointAt (self, pt : PyGe.Point3d)-> tuple :
      '''                             '''
    ...
    def findTinTrianglesAt (self, pt : PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getBorders (self)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getConstraint (self, id : PyDb.ObjectId|int)-> PyBrxCv.CvDbTinSurfaceConstraint :
      '''                             '''
    ...
    def getConstraints (self)-> list :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, outGripPoints: list[PyGe.Point3d], outOsnapModes: list[int], geomIds: list[int])-> None :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPoints (self, visibleOnly : bool=False)-> list :
      '''                             '''
    ...
    def getPointsInsidePolygon (self, pts : list[PyGe.Point3d], includeOnEdge : bool)-> list :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTinPoints (self)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasSnapshot (self)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def initialize (self, min : PyGe.Point3d, max : PyGe.Point3d, numOfPoints : int)-> None :
      '''                             '''
    ...
    def insertDefinitionAt (self, index : int, ref : PyBrxCv.CvDbTinSurfaceDefinition)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def intersectionsWithLine (self, start : PyGe.Point3d, end : PyGe.Point3d, type : PyBrxCv.TinSurfaceIntersectType, visibleOnly : bool)-> tuple :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> int :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> int :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAssociative (self)-> bool :
      '''                             '''
    ...
    def isAutoUpdate (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> int :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> int :
      '''                             '''
    ...
    def isErased (self)-> int :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> int :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> int :
      '''                             '''
    ...
    def isModifiedXData (self)-> int :
      '''                             '''
    ...
    def isNewObject (self)-> int :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> int :
      '''                             '''
    ...
    def isNotifying (self)-> int :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> int :
      '''                             '''
    ...
    def isPlanar (self)-> int :
      '''                             '''
    ...
    def isReadEnabled (self)-> int :
      '''                             '''
    ...
    def isReallyClosing (self)-> int :
      '''                             '''
    ...
    def isRebuildPossible (self)-> bool :
      '''                             '''
    ...
    def isSnapshotUpdateNeeded (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> int :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> int :
      '''                             '''
    ...
    def isUpdateNeeded (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def majorContours (self)-> list :
      '''                             '''
    ...
    def majorContoursColor (self)-> tuple :
      '''                             '''
    ...
    def majorContoursInterval (self)-> tuple :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maxElevation (self, visibleOnly : bool=False)-> float :
      '''                             '''
    ...
    def merge (self, other : PyBrxCv.CvDbTinSurface)-> bool :
      '''                             '''
    ...
    def minElevation (self, visibleOnly : bool=False)-> float :
      '''                             '''
    ...
    def minorContours (self)-> list :
      '''                             '''
    ...
    def minorContoursColor (self)-> tuple :
      '''                             '''
    ...
    def minorContoursInterval (self)-> tuple :
      '''                             '''
    ...
    def moveDefinition (self, _from : int, _to : int)-> int :
      '''                             '''
    ...
    def movePoint (self, _from : PyGe.Point3d, _to : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def movePoints (self, _from : list[PyGe.Point3d], _to : list[PyGe.Point3d])-> bool :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def pointsCount (self, visibleOnly : bool=False)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def raiseSurface (self, offset : float)-> bool :
      '''                             '''
    ...
    def rebuild (self, val : bool)-> bool :
      '''                             '''
    ...
    def rebuildSnapshot (self)-> bool :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''                             '''
    ...
    def removeAllDefinitions (self)-> int :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeDefinitionAt (self,  index: int)-> bool :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePoint (self, pt : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def removePoints (self, pts : list[PyGe.Point3d])-> bool :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeSnapshot (self)-> bool :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> int :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAssociative (self, isAssociative : bool)-> bool :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDescription (self, val : str)-> bool :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setIsAutoUpdate (self, autoUpdateOn : bool)-> bool :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMajorContoursColor (self, colorIndex : int)-> bool :
      '''                             '''
    ...
    def setMajorContoursInterval (self, interval : float)-> bool :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMinorContoursColor (self, colorIndex : int)-> bool :
      '''                             '''
    ...
    def setMinorContoursInterval (self, interval : float)-> bool :
      '''                             '''
    ...
    def setName (self, val : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
