
class AcGeError:
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class BoundBlock2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (BoundBlock2d)arg1, (Point2d)arg2) -> bool'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (BoundBlock2d)arg1, (Point2d)arg2) -> BoundBlock2d'''
    ...
    def getBasePoint (self, *args, **kwargs):
      '''
getBasePoint( (BoundBlock2d)arg1) -> Point2d'''
    ...
    def getDirection1 (self, *args, **kwargs):
      '''
getDirection1( (BoundBlock2d)arg1) -> Vector2d'''
    ...
    def getDirection2 (self, *args, **kwargs):
      '''
getDirection2( (BoundBlock2d)arg1) -> Vector2d'''
    ...
    def getMaxPoint (self, *args, **kwargs):
      '''
getMaxPoint( (BoundBlock2d)arg1) -> Point2d'''
    ...
    def getMinPoint (self, *args, **kwargs):
      '''
getMinPoint( (BoundBlock2d)arg1) -> Point2d'''
    ...
    def isBox (self, *args, **kwargs):
      '''
isBox( (BoundBlock2d)arg1) -> bool'''
    ...
    def isDisjoint (self, *args, **kwargs):
      '''
isDisjoint( (BoundBlock2d)arg1, (BoundBlock2d)arg2) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (BoundBlock2d)arg1, (Point2d)arg2, (Point2d)arg3) -> BoundBlock2d

set( (BoundBlock2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4) -> BoundBlock2d'''
    ...
    def setToBox (self, *args, **kwargs):
      '''
setToBox( (BoundBlock2d)arg1, (bool)arg2) -> BoundBlock2d'''
    ...
    def swell (self, *args, **kwargs):
      '''
swell( (BoundBlock2d)arg1, (float)arg2) -> BoundBlock2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class BoundBlock3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (BoundBlock3d)arg1, (Point3d)arg2) -> bool'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (BoundBlock3d)arg1, (Point3d)arg2) -> BoundBlock3d'''
    ...
    def getBasePoint (self, *args, **kwargs):
      '''
getBasePoint( (BoundBlock3d)arg1) -> Point3d'''
    ...
    def getDirection1 (self, *args, **kwargs):
      '''
getDirection1( (BoundBlock3d)arg1) -> Vector3d'''
    ...
    def getDirection3 (self, *args, **kwargs):
      '''
getDirection3( (BoundBlock3d)arg1) -> Vector3d

getDirection3( (BoundBlock3d)arg1) -> Vector3d'''
    ...
    def getMaxPoint (self, *args, **kwargs):
      '''
getMaxPoint( (BoundBlock3d)arg1) -> Point3d'''
    ...
    def getMinPoint (self, *args, **kwargs):
      '''
getMinPoint( (BoundBlock3d)arg1) -> Point3d'''
    ...
    def isBox (self, *args, **kwargs):
      '''
isBox( (BoundBlock3d)arg1) -> bool'''
    ...
    def isDisjoint (self, *args, **kwargs):
      '''
isDisjoint( (BoundBlock3d)arg1, (BoundBlock3d)arg2) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (BoundBlock3d)arg1, (Point3d)arg2, (Point3d)arg3) -> BoundBlock3d

set( (BoundBlock3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> BoundBlock3d'''
    ...
    def setToBox (self, *args, **kwargs):
      '''
setToBox( (BoundBlock3d)arg1, (bool)arg2) -> BoundBlock3d'''
    ...
    def swell (self, *args, **kwargs):
      '''
swell( (BoundBlock3d)arg1, (float)arg2) -> BoundBlock3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class CircArc2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (CircArc2d)arg1) -> Point2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endAng (self, *args, **kwargs):
      '''
endAng( (CircArc2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (CircArc2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (CircArc2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (CircArc2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple

intersectWith( (CircArc2d)arg1, (CircArc2d)arg2) -> tuple

intersectWith( (CircArc2d)arg1, (CircArc2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClockWise (self, *args, **kwargs):
      '''
isClockWise( (CircArc2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isInside (self, *args, **kwargs):
      '''
isInside( (CircArc2d)arg1, (Point2d)arg2) -> bool

isInside( (CircArc2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def radius (self, *args, **kwargs):
      '''
radius( (CircArc2d)arg1) -> float'''
    ...
    def refVec (self, *args, **kwargs):
      '''
refVec( (CircArc2d)arg1) -> Vector2d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (CircArc2d)arg1, (Point2d)arg2, (float)arg3) -> CircArc2d

set( (CircArc2d)arg1, (Point2d)arg2, (float)arg3, (float)arg4, (float)arg5, (Vector2d)arg6, (bool)arg7) -> CircArc2d

set( (CircArc2d)arg1, (Point2d)arg2, (Point2d)arg3, (Point2d)arg4) -> CircArc2d

set( (CircArc2d)arg1, (Point2d)arg2, (Point2d)arg3, (float)arg4, (bool)arg5) -> CircArc2d

set( (CircArc2d)arg1, (Curve2d)arg2, (Curve2d)arg3, (float)arg4) -> CircArc2d

set( (CircArc2d)arg1, (Curve2d)arg2, (Curve2d)arg3, (Curve2d)arg4) -> CircArc2d'''
    ...
    def setAngles (self, *args, **kwargs):
      '''
setAngles( (CircArc2d)arg1, (float)arg2, (float)arg3) -> CircArc2d'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (CircArc2d)arg1, (Point2d)arg2) -> CircArc2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setRadius (self, *args, **kwargs):
      '''
setRadius( (CircArc2d)arg1, (float)arg2) -> CircArc2d'''
    ...
    def setRefVec (self, *args, **kwargs):
      '''
setRefVec( (CircArc2d)arg1, (Vector2d)arg2) -> CircArc2d'''
    ...
    def setToComplement (self, *args, **kwargs):
      '''
setToComplement( (CircArc2d)arg1) -> CircArc2d'''
    ...
    def startAng (self, *args, **kwargs):
      '''
startAng( (CircArc2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (CircArc2d)arg1) -> Point2d'''
    ...
    def tangent (self, *args, **kwargs):
      '''
tangent( (CircArc2d)arg1, (Point2d)arg2) -> tuple

tangent( (CircArc2d)arg1, (Point2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class CircArc3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (CircArc3d)arg1) -> Point3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def closestPointToPlane (self, *args, **kwargs):
      '''
closestPointToPlane( (CircArc3d)arg1, (PlanarEnt)arg2) -> tuple

closestPointToPlane( (CircArc3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endAng (self, *args, **kwargs):
      '''
endAng( (CircArc3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (CircArc3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (CircArc3d)arg1) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (CircArc3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (CircArc3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (CircArc3d)arg1, (CircArc3d)arg2) -> tuple

intersectWith( (CircArc3d)arg1, (CircArc3d)arg2, (Tol)arg3) -> tuple

intersectWith( (CircArc3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (CircArc3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isInside (self, *args, **kwargs):
      '''
isInside( (CircArc3d)arg1, (Point3d)arg2) -> bool

isInside( (CircArc3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (CircArc3d)arg1) -> Vector3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (CircArc3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (CircArc3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def radius (self, *args, **kwargs):
      '''
radius( (CircArc3d)arg1) -> float'''
    ...
    def refVec (self, *args, **kwargs):
      '''
refVec( (CircArc3d)arg1) -> Vector3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (CircArc3d)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> CircArc3d

set( (CircArc3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7) -> CircArc3d

set( (CircArc3d)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> CircArc3d

set( (CircArc3d)arg1, (Curve3d)arg2, (Curve3d)arg3, (float)arg4) -> CircArc3d

set( (CircArc3d)arg1, (Curve3d)arg2, (Curve3d)arg3, (Curve3d)arg4) -> CircArc3d'''
    ...
    def setAngles (self, *args, **kwargs):
      '''
setAngles( (CircArc3d)arg1, (float)arg2, (float)arg3) -> CircArc3d'''
    ...
    def setAxes (self, *args, **kwargs):
      '''
setAxes( (CircArc3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> CircArc3d'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (CircArc3d)arg1, (Point3d)arg2) -> CircArc3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setRadius (self, *args, **kwargs):
      '''
setRadius( (CircArc3d)arg1, (float)arg2) -> CircArc3d'''
    ...
    def startAng (self, *args, **kwargs):
      '''
startAng( (CircArc3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (CircArc3d)arg1) -> Point3d'''
    ...
    def tangent (self, *args, **kwargs):
      '''
tangent( (CircArc3d)arg1, (Point3d)arg2) -> tuple

tangent( (CircArc3d)arg1, (Point3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class ClipBoundary2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class CompositeCurve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class CompositeCurve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class CubicSplineCurve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> Point2d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt2d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt2d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt2d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt2d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt2d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt2d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (Point2d)arg3) -> SplineEnt2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt2d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class CubicSplineCurve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> Point3d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt3d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt3d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt3d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt3d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt3d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt3d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (Point3d)arg3) -> SplineEnt3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt3d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Curve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Curve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class CurveCurveInt2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class CurveCurveInt3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class CurveSurfInt:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class EllipArc2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (EllipArc2d)arg1) -> Point2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endAng (self, *args, **kwargs):
      '''
endAng( (EllipArc2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (EllipArc2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (EllipArc2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (EllipArc2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isCircular (self, *args, **kwargs):
      '''
isCircular( (EllipArc2d)arg1) -> bool

isCircular( (EllipArc2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isClockWise (self, *args, **kwargs):
      '''
isClockWise( (EllipArc2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isInside (self, *args, **kwargs):
      '''
isInside( (EllipArc2d)arg1, (Point2d)arg2) -> bool

isInside( (EllipArc2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def majorAxis (self, *args, **kwargs):
      '''
majorAxis( (EllipArc2d)arg1) -> Vector2d'''
    ...
    def majorRadius (self, *args, **kwargs):
      '''
majorRadius( (EllipArc2d)arg1) -> float'''
    ...
    def minorAxis (self, *args, **kwargs):
      '''
minorAxis( (EllipArc2d)arg1) -> Vector2d'''
    ...
    def minorRadius (self, *args, **kwargs):
      '''
minorRadius( (EllipArc2d)arg1) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (EllipArc2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4, (float)arg5, (float)arg6) -> EllipArc2d

set( (EllipArc2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4, (float)arg5, (float)arg6, (float)arg7, (float)arg8) -> EllipArc2d

set( (EllipArc2d)arg1, (CircArc2d)arg2) -> EllipArc2d'''
    ...
    def setAngles (self, *args, **kwargs):
      '''
setAngles( (EllipArc2d)arg1, (float)arg2, (float)arg3) -> EllipArc2d'''
    ...
    def setAxes (self, *args, **kwargs):
      '''
setAxes( (EllipArc2d)arg1, (Vector2d)arg2, (Vector2d)arg3) -> EllipArc2d'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (EllipArc2d)arg1, (Point2d)arg2) -> EllipArc2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setMajorRadius (self, *args, **kwargs):
      '''
setMajorRadius( (EllipArc2d)arg1, (float)arg2) -> EllipArc2d'''
    ...
    def setMinorRadius (self, *args, **kwargs):
      '''
setMinorRadius( (EllipArc2d)arg1, (float)arg2) -> EllipArc2d'''
    ...
    def startAng (self, *args, **kwargs):
      '''
startAng( (EllipArc2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (EllipArc2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class EllipArc3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (EllipArc3d)arg1) -> Point3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def closestPointToPlane (self, *args, **kwargs):
      '''
closestPointToPlane( (EllipArc3d)arg1, (PlanarEnt)arg2) -> tuple

closestPointToPlane( (EllipArc3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endAng (self, *args, **kwargs):
      '''
endAng( (EllipArc3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (EllipArc3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (EllipArc3d)arg1) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (EllipArc3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (EllipArc3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (EllipArc3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (EllipArc3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isCircular (self, *args, **kwargs):
      '''
isCircular( (EllipArc3d)arg1) -> bool

isCircular( (EllipArc3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isInside (self, *args, **kwargs):
      '''
isInside( (EllipArc3d)arg1, (Point3d)arg2) -> bool

isInside( (EllipArc3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def majorAxis (self, *args, **kwargs):
      '''
majorAxis( (EllipArc3d)arg1) -> Vector3d'''
    ...
    def majorRadius (self, *args, **kwargs):
      '''
majorRadius( (EllipArc3d)arg1) -> float'''
    ...
    def minorAxis (self, *args, **kwargs):
      '''
minorAxis( (EllipArc3d)arg1) -> Vector3d'''
    ...
    def minorRadius (self, *args, **kwargs):
      '''
minorRadius( (EllipArc3d)arg1) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (EllipArc3d)arg1) -> Vector3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (EllipArc3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (EllipArc3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (EllipArc3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6) -> EllipArc3d

set( (EllipArc3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7, (float)arg8) -> EllipArc3d

set( (EllipArc3d)arg1, (CircArc3d)arg2) -> EllipArc3d'''
    ...
    def setAngles (self, *args, **kwargs):
      '''
setAngles( (EllipArc3d)arg1, (float)arg2, (float)arg3) -> EllipArc3d'''
    ...
    def setAxes (self, *args, **kwargs):
      '''
setAxes( (EllipArc3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> EllipArc3d'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (EllipArc3d)arg1, (Point3d)arg2) -> EllipArc3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setMajorRadius (self, *args, **kwargs):
      '''
setMajorRadius( (EllipArc3d)arg1, (float)arg2) -> EllipArc3d'''
    ...
    def setMinorRadius (self, *args, **kwargs):
      '''
setMinorRadius( (EllipArc3d)arg1, (float)arg2) -> EllipArc3d'''
    ...
    def startAng (self, *args, **kwargs):
      '''
startAng( (EllipArc3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (EllipArc3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Entity2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Entity3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class EntityId:
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ExternalCurve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class ExternalCurve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Interval:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...

class KnotVector:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...

class Line2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt2d)arg1) -> Vector2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt2d)arg1) -> Line2d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getPerpLine (self, *args, **kwargs):
      '''
getPerpLine( (LinearEnt2d)arg1, (Point2d)arg2) -> Line2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def kXAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kYAxis (self, *args, **kwargs):
      '''None'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt2d)arg1) -> Point2d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Line2d)arg1, (Point2d)arg2, (Vector2d)arg3) -> Line2d

set( (Line2d)arg1, (Point2d)arg2, (Point2d)arg3) -> Line2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Line3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt3d)arg1) -> Vector3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt3d)arg1) -> Line3d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPerpPlane (self, *args, **kwargs):
      '''
getPerpPlane( (LinearEnt3d)arg1, (Point3d)arg2) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (LinearEnt3d)arg1, (Point3d)arg2) -> tuple

isOn( (LinearEnt3d)arg1, (Point3d)arg2, (Tol)arg3) -> tuple

isOn( (LinearEnt3d)arg1, (float)arg2) -> bool

isOn( (LinearEnt3d)arg1, (float)arg2, (Tol)arg3) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def kXAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kYAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kZAxis (self, *args, **kwargs):
      '''None'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt3d)arg1) -> Point3d'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Line3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Line3d

set( (Line3d)arg1, (Point3d)arg2, (Point3d)arg3) -> Line3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class LineSeg2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def baryComb (self, *args, **kwargs):
      '''
baryComb( (LineSeg2d)arg1, (float)arg2) -> Point2d'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt2d)arg1) -> Vector2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (LineSeg2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getBisector (self, *args, **kwargs):
      '''
getBisector( (LineSeg2d)arg1) -> Line2d'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt2d)arg1) -> Line2d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getPerpLine (self, *args, **kwargs):
      '''
getPerpLine( (LinearEnt2d)arg1, (Point2d)arg2) -> Line2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (LineSeg2d)arg1) -> float

length( (LineSeg2d)arg1, (float)arg2, (float)arg3) -> float

length( (LineSeg2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def midPoint (self, *args, **kwargs):
      '''
midPoint( (LineSeg2d)arg1) -> Point2d'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt2d)arg1) -> Point2d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (LineSeg2d)arg1, (Point2d)arg2, (Vector2d)arg3) -> LineSeg2d

set( (LineSeg2d)arg1, (Point2d)arg2, (Point2d)arg3) -> LineSeg2d

set( (LineSeg2d)arg1, (Curve2d)arg2, (Curve2d)arg3) -> LineSeg2d

set( (LineSeg2d)arg1, (Curve2d)arg2, (Point2d)arg3) -> LineSeg2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (LineSeg2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class LineSeg3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def baryComb (self, *args, **kwargs):
      '''
baryComb( (LineSeg3d)arg1, (float)arg2) -> Point3d'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt3d)arg1) -> Vector3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (LineSeg3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getBisector (self, *args, **kwargs):
      '''
getBisector( (LineSeg3d)arg1) -> Plane'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt3d)arg1) -> Line3d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPerpPlane (self, *args, **kwargs):
      '''
getPerpPlane( (LinearEnt3d)arg1, (Point3d)arg2) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (LinearEnt3d)arg1, (Point3d)arg2) -> tuple

isOn( (LinearEnt3d)arg1, (Point3d)arg2, (Tol)arg3) -> tuple

isOn( (LinearEnt3d)arg1, (float)arg2) -> bool

isOn( (LinearEnt3d)arg1, (float)arg2, (Tol)arg3) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (LineSeg3d)arg1) -> float

length( (LineSeg3d)arg1, (float)arg2, (float)arg3) -> float

length( (LineSeg3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def midPoint (self, *args, **kwargs):
      '''
midPoint( (LineSeg3d)arg1) -> Point3d'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt3d)arg1) -> Point3d'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (LineSeg3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> LineSeg3d

set( (LineSeg3d)arg1, (Point3d)arg2, (Point3d)arg3) -> LineSeg3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (LineSeg3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class LinearEnt2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt2d)arg1) -> Vector2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt2d)arg1) -> Line2d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getPerpLine (self, *args, **kwargs):
      '''
getPerpLine( (LinearEnt2d)arg1, (Point2d)arg2) -> Line2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt2d)arg1) -> Point2d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class LinearEnt3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt3d)arg1) -> Vector3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt3d)arg1) -> Line3d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPerpPlane (self, *args, **kwargs):
      '''
getPerpPlane( (LinearEnt3d)arg1, (Point3d)arg2) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (LinearEnt3d)arg1, (Point3d)arg2) -> tuple

isOn( (LinearEnt3d)arg1, (Point3d)arg2, (Tol)arg3) -> tuple

isOn( (LinearEnt3d)arg1, (float)arg2) -> bool

isOn( (LinearEnt3d)arg1, (float)arg2, (Tol)arg3) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt3d)arg1) -> Point3d'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Matrix2d:
    def alignCoordSys (self, *args, **kwargs):
      '''
alignCoordSys( (Point2d)arg1, (Vector2d)arg2, (Vector2d)arg3, (Point2d)arg4, (Vector2d)arg5, (Vector2d)arg6) -> Matrix2d'''
    ...
    def det (self, *args, **kwargs):
      '''
det( (Matrix2d)arg1) -> float'''
    ...
    def elementAt (self, *args, **kwargs):
      '''
elementAt( (Matrix2d)arg1, (int)arg2, (int)arg3) -> float'''
    ...
    def getCoordSystem (self, *args, **kwargs):
      '''
getCoordSystem( (Matrix2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4) -> None'''
    ...
    def inverse (self, *args, **kwargs):
      '''
inverse( (Matrix2d)arg1) -> Matrix2d'''
    ...
    def invert (self, *args, **kwargs):
      '''
invert( (Matrix2d)arg1) -> Matrix2d'''
    ...
    def isConformal (self, *args, **kwargs):
      '''
isConformal( (Matrix2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (Vector2d)arg5) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Matrix2d)arg1, (Matrix2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F1320637F0>]) -> bool'''
    ...
    def isScaledOrtho (self, *args, **kwargs):
      '''
isScaledOrtho( (Matrix2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063910>]) -> bool'''
    ...
    def isSingular (self, *args, **kwargs):
      '''
isSingular( (Matrix2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isUniScaledOrtho (self, *args, **kwargs):
      '''
isUniScaledOrtho( (Matrix2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063880>]) -> bool'''
    ...
    def kIdentity (self, *args, **kwargs):
      '''None'''
    ...
    def mirroring (self, *args, **kwargs):
      '''
mirroring( (Point2d)arg1) -> Matrix2d

mirroring( (object)arg1) -> Matrix2d'''
    ...
    def postMultBy (self, *args, **kwargs):
      '''
postMultBy( (Matrix2d)arg1, (Matrix2d)arg2) -> Matrix2d'''
    ...
    def preMultBy (self, *args, **kwargs):
      '''
preMultBy( (Matrix2d)arg1, (Matrix2d)arg2) -> Matrix2d'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (float)arg1, (Point2d)arg2) -> Matrix2d'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (Matrix2d)arg1) -> float'''
    ...
    def scaling (self, *args, **kwargs):
      '''staticmethod(function) -> method

Convert a function to be a static method.

A static method does not receive an implicit first argument.
To declare a static method, use this idiom:

     class C:
         @staticmethod
         def f(arg1, arg2, ...):
             ...

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()). Both the class and the instance are ignored, and
neither is passed implicitly as the first argument to the method.

Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.'''
    ...
    def setCoordSystem (self, *args, **kwargs):
      '''
setCoordSystem( (Matrix2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4) -> Matrix2d'''
    ...
    def setToAlignCoordSys (self, *args, **kwargs):
      '''
setToAlignCoordSys( (Matrix2d)arg1, (Point2d)arg2, (Vector2d)arg3, (Vector2d)arg4, (Point2d)arg5, (Vector2d)arg6, (Vector2d)arg7) -> Matrix2d'''
    ...
    def setToIdentity (self, *args, **kwargs):
      '''
setToIdentity( (Matrix2d)arg1) -> Matrix2d'''
    ...
    def setToMirroring (self, *args, **kwargs):
      '''
setToMirroring( (Matrix2d)arg1, (Point2d)arg2) -> Matrix2d

setToMirroring( (Matrix2d)arg1, (object)arg2) -> Matrix2d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Matrix2d)arg1, (Matrix2d)arg2, (Matrix2d)arg3) -> Matrix2d'''
    ...
    def setToRotation (self, *args, **kwargs):
      '''
setToRotation( (Matrix2d)arg1, (float)arg2 [, (Point2d)AcGePoint2d=<PyGe.Point2d object at 0x000001F1239C2420>]) -> Matrix2d'''
    ...
    def setToScaling (self, *args, **kwargs):
      '''
setToScaling( (Matrix2d)arg1, (float)arg2, (Point2d)arg3) -> Matrix2d'''
    ...
    def setToTranslation (self, *args, **kwargs):
      '''
setToTranslation( (Matrix2d)arg1, (Vector2d)arg2) -> Matrix2d'''
    ...
    def setTranslation (self, *args, **kwargs):
      '''
setTranslation( (Matrix2d)arg1, (Vector2d)arg2) -> Matrix2d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Matrix2d)arg1) -> str'''
    ...
    def translation (self, *args, **kwargs):
      '''
translation( (Matrix2d)arg1) -> Vector2d

translation( (Vector2d)arg1) -> Matrix2d'''
    ...
    def transpose (self, *args, **kwargs):
      '''
transpose( (Matrix2d)arg1) -> Matrix2d'''
    ...
    def transposeIt (self, *args, **kwargs):
      '''
transposeIt( (Matrix2d)arg1) -> Matrix2d'''
    ...

class Matrix3d:
    def alignCoordSys (self, *args, **kwargs):
      '''
alignCoordSys( (Point3d)arg1, (Vector3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (Point3d)arg5, (Vector3d)arg6, (Vector3d)arg7, (Vector3d)arg8) -> Matrix3d'''
    ...
    def convertToLocal (self, *args, **kwargs):
      '''
convertToLocal( (Matrix3d)arg1, (Vector3d)arg2, (float)arg3) -> Matrix2d'''
    ...
    def det (self, *args, **kwargs):
      '''
det( (Matrix3d)arg1) -> float'''
    ...
    def elementAt (self, *args, **kwargs):
      '''
elementAt( (Matrix3d)arg1, (int)arg2, (int)arg3) -> float'''
    ...
    def getCoordSystem (self, *args, **kwargs):
      '''
getCoordSystem( (Matrix3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> None'''
    ...
    def inverse (self, *args, **kwargs):
      '''
inverse( (Matrix3d)arg1) -> Matrix3d

inverse( (Matrix3d)arg1, (Tol)arg2) -> Matrix3d

inverse( (Matrix3d)arg1, (Matrix3d)arg2, (float)arg3) -> bool'''
    ...
    def invert (self, *args, **kwargs):
      '''
invert( (Matrix3d)arg1) -> Matrix3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Matrix3d)arg1, (Matrix3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isScaledOrtho (self, *args, **kwargs):
      '''
isScaledOrtho( (Matrix3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isSingular (self, *args, **kwargs):
      '''
isSingular( (Matrix3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isUniScaledOrtho (self, *args, **kwargs):
      '''
isUniScaledOrtho( (Matrix3d)arg1, (Tol)arg2) -> bool'''
    ...
    def kIdentity (self, *args, **kwargs):
      '''None'''
    ...
    def mirroring (self, *args, **kwargs):
      '''
mirroring( (object)arg1) -> Matrix3d

mirroring( (Point3d)arg1) -> Matrix3d

mirroring( (object)arg1) -> Matrix3d'''
    ...
    def norm (self, *args, **kwargs):
      '''
norm( (Matrix3d)arg1) -> float'''
    ...
    def planeToWorld (self, *args, **kwargs):
      '''
planeToWorld( (Vector3d)arg1) -> Matrix3d

planeToWorld( (object)arg1) -> Matrix3d'''
    ...
    def postMultBy (self, *args, **kwargs):
      '''
postMultBy( (Matrix3d)arg1, (Matrix3d)arg2) -> Matrix3d'''
    ...
    def preMultBy (self, *args, **kwargs):
      '''
preMultBy( (Matrix3d)arg1, (Matrix3d)arg2) -> Matrix3d'''
    ...
    def projection (self, *args, **kwargs):
      '''
projection( (object)arg1, (Vector3d)arg2) -> Matrix3d'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (float)arg1, (Vector3d)arg2, (Point3d)arg3) -> Matrix3d'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (Matrix3d)arg1) -> float'''
    ...
    def scaling (self, *args, **kwargs):
      '''
scaling( (float)arg1, (Point3d)arg2) -> Matrix3d'''
    ...
    def setCoordSystem (self, *args, **kwargs):
      '''
setCoordSystem( (Matrix3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> Matrix3d'''
    ...
    def setToAlignCoordSys (self, *args, **kwargs):
      '''
setToAlignCoordSys( (Matrix3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (Vector3d)arg5, (Point3d)arg6, (Vector3d)arg7, (Vector3d)arg8, (Vector3d)arg9) -> Matrix3d'''
    ...
    def setToIdentity (self, *args, **kwargs):
      '''
setToIdentity( (Matrix3d)arg1) -> Matrix3d'''
    ...
    def setToMirroring (self, *args, **kwargs):
      '''
setToMirroring( (Matrix3d)arg1, (object)arg2) -> Matrix3d

setToMirroring( (Matrix3d)arg1, (object)arg2) -> Matrix3d

setToMirroring( (Matrix3d)arg1, (Point3d)arg2) -> Matrix3d'''
    ...
    def setToPlaneToWorld (self, *args, **kwargs):
      '''
setToPlaneToWorld( (Matrix3d)arg1, (object)arg2) -> Matrix3d

setToPlaneToWorld( (Matrix3d)arg1, (Vector3d)arg2) -> Matrix3d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Matrix3d)arg1, (Matrix3d)arg2, (Matrix3d)arg3) -> Matrix3d'''
    ...
    def setToProjection (self, *args, **kwargs):
      '''
setToProjection( (Matrix3d)arg1, (object)arg2, (Vector3d)arg3) -> Matrix3d'''
    ...
    def setToRotation (self, *args, **kwargs):
      '''
setToRotation( (Matrix3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Matrix3d'''
    ...
    def setToScaling (self, *args, **kwargs):
      '''
setToScaling( (Matrix3d)arg1, (float)arg2, (Point3d)arg3) -> Matrix3d'''
    ...
    def setToTranslation (self, *args, **kwargs):
      '''
setToTranslation( (Matrix3d)arg1, (Vector3d)arg2) -> Matrix3d'''
    ...
    def setToWorldToPlane (self, *args, **kwargs):
      '''
setToWorldToPlane( (Matrix3d)arg1, (object)arg2) -> Matrix3d

setToWorldToPlane( (Matrix3d)arg1, (Vector3d)arg2) -> Matrix3d'''
    ...
    def setTranslation (self, *args, **kwargs):
      '''
setTranslation( (Matrix3d)arg1, (Vector3d)arg2) -> Matrix3d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Matrix3d)arg1) -> str'''
    ...
    def translation (self, *args, **kwargs):
      '''
translation( (Matrix3d)arg1) -> Vector3d

translation( (Vector3d)arg1) -> Matrix3d'''
    ...
    def transpose (self, *args, **kwargs):
      '''
transpose( (Matrix3d)arg1) -> Matrix3d'''
    ...
    def transposeIt (self, *args, **kwargs):
      '''
transposeIt( (Matrix3d)arg1) -> Matrix3d'''
    ...
    def worldToPlane (self, *args, **kwargs):
      '''
worldToPlane( (Vector3d)arg1) -> Matrix3d

worldToPlane( (object)arg1) -> Matrix3d'''
    ...

class NurbCurve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> Point2d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt2d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt2d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt2d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt2d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt2d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt2d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (Point2d)arg3) -> SplineEnt2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt2d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class NurbCurve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> Point3d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt3d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt3d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt3d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt3d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt3d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt3d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (Point3d)arg3) -> SplineEnt3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt3d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class OffsetCrvExtType:
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kChamfer (self, *args, **kwargs):
      '''None'''
    ...
    def kExtend (self, *args, **kwargs):
      '''None'''
    ...
    def kFillet (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OffsetCurve2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class OffsetCurve3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class PlanarEnt:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Surface)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d'''
    ...
    def closestPointToLinearEnt (self, *args, **kwargs):
      '''
closestPointToLinearEnt( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> tuple

closestPointToLinearEnt( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def closestPointToPlanarEnt (self, *args, **kwargs):
      '''
closestPointToPlanarEnt( (PlanarEnt)arg1, (PlanarEnt)arg2) -> tuple

closestPointToPlanarEnt( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Surface)arg1, (Point3d)arg2) -> float

distanceTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Surface)arg1, (Point2d)arg2) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4, (Vector3d)arg5) -> Point3d'''
    ...
    def getCoefficients (self, *args, **kwargs):
      '''
getCoefficients( (PlanarEnt)arg1) -> tuple'''
    ...
    def getCoordSystem (self, *args, **kwargs):
      '''
getCoordSystem( (PlanarEnt)arg1) -> tuple'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosedInU (self, *args, **kwargs):
      '''
isClosedInU( (Surface)arg1) -> bool

isClosedInU( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isClosedInV (self, *args, **kwargs):
      '''
isClosedInV( (Surface)arg1) -> bool

isClosedInV( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarTo (self, *args, **kwargs):
      '''
isCoplanarTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isCoplanarTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNormalReversed (self, *args, **kwargs):
      '''
isNormalReversed( (Surface)arg1) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Surface)arg1, (Point3d)arg2) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3, (Tol)arg4) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (PlanarEnt)arg1) -> Vector3d'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Surface)arg1, (Point3d)arg2) -> Point2d

paramOf( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point2d'''
    ...
    def pointOnPlane (self, *args, **kwargs):
      '''
pointOnPlane( (PlanarEnt)arg1) -> Point3d'''
    ...
    def reverseNormal (self, *args, **kwargs):
      '''
reverseNormal( (Surface)arg1) -> Surface'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Plane:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Surface)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d'''
    ...
    def closestPointToLinearEnt (self, *args, **kwargs):
      '''
closestPointToLinearEnt( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> tuple

closestPointToLinearEnt( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def closestPointToPlanarEnt (self, *args, **kwargs):
      '''
closestPointToPlanarEnt( (PlanarEnt)arg1, (PlanarEnt)arg2) -> tuple

closestPointToPlanarEnt( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Surface)arg1, (Point3d)arg2) -> float

distanceTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Surface)arg1, (Point2d)arg2) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4, (Vector3d)arg5) -> Point3d'''
    ...
    def getCoefficients (self, *args, **kwargs):
      '''
getCoefficients( (PlanarEnt)arg1) -> tuple'''
    ...
    def getCoordSystem (self, *args, **kwargs):
      '''
getCoordSystem( (PlanarEnt)arg1) -> tuple'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (Plane)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (Plane)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (Plane)arg1, (Plane)arg2) -> tuple

intersectWith( (Plane)arg1, (Plane)arg2, (Tol)arg3) -> tuple

intersectWith( (Plane)arg1, (Plane)arg2) -> tuple

intersectWith( (Plane)arg1, (Plane)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosedInU (self, *args, **kwargs):
      '''
isClosedInU( (Surface)arg1) -> bool

isClosedInU( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isClosedInV (self, *args, **kwargs):
      '''
isClosedInV( (Surface)arg1) -> bool

isClosedInV( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarTo (self, *args, **kwargs):
      '''
isCoplanarTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isCoplanarTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNormalReversed (self, *args, **kwargs):
      '''
isNormalReversed( (Surface)arg1) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Surface)arg1, (Point3d)arg2) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3, (Tol)arg4) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (PlanarEnt)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (PlanarEnt)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (PlanarEnt)arg1) -> Vector3d'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Surface)arg1, (Point3d)arg2) -> Point2d

paramOf( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point2d'''
    ...
    def pointOnPlane (self, *args, **kwargs):
      '''
pointOnPlane( (PlanarEnt)arg1) -> Point3d'''
    ...
    def reverseNormal (self, *args, **kwargs):
      '''
reverseNormal( (Surface)arg1) -> Surface'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Plane)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> Plane

set( (Plane)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> Plane'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Point2d:
    def asVector (self, *args, **kwargs):
      '''
asVector( (Point2d)arg1) -> Vector2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Point2d)arg1, (Point2d)arg2) -> float'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Point2d)arg1, (Point2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F1320632E0>]) -> bool'''
    ...
    def kOrigin (self, *args, **kwargs):
      '''None'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Point2d)arg1, (object)arg2) -> Point2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Point2d)arg1, (float)arg2 [, (Point2d)AcGePoint2d=<PyGe.Point2d object at 0x000001F1239C2340>]) -> Point2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Point2d)arg1, (float)arg2 [, (Point2d)AcGePoint2d=<PyGe.Point2d object at 0x000001F1239C23B0>]) -> Point2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Point2d)arg1, (float)arg2, (float)arg3) -> Point2d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Point2d)arg1, (Matrix2d)arg2, (Point2d)arg3) -> Point2d'''
    ...
    def setToSum (self, *args, **kwargs):
      '''
setToSum( (Point2d)arg1, (Point2d)arg2, (Vector2d)arg3) -> Point2d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Point2d)arg1) -> str'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Point2d)arg1, (Matrix2d)arg2) -> Point2d'''
    ...
    def x (self, *args, **kwargs):
      '''None'''
    ...
    def y (self, *args, **kwargs):
      '''None'''
    ...

class Point3d:
    def asVector (self, *args, **kwargs):
      '''
asVector( (Point3d)arg1) -> Vector3d'''
    ...
    def convert2d (self, *args, **kwargs):
      '''
convert2d( (Point3d)arg1, (object)arg2) -> Point2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Point3d)arg1, (Point3d)arg2) -> float'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Point3d)arg1, (Point3d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F1320639A0>]) -> bool'''
    ...
    def kOrigin (self, *args, **kwargs):
      '''None'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Point3d)arg1, (object)arg2) -> Point3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Point3d)arg1, (object)arg2) -> Point3d'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Point3d)arg1, (object)arg2, (Vector3d)arg3) -> Point3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Point3d)arg1, (float)arg2, (Vector3d)arg3 [, (Point3d)AcGePoint3d=<PyGe.Point3d object at 0x000001F1239D1E40>]) -> Point3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Point3d)arg1, (float)arg2 [, (Point3d)AcGePoint3d=<PyGe.Point3d object at 0x000001F1239D1EC0>]) -> Point3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Point3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> Point3d

set( (Point3d)arg1, (object)arg2, (Point2d)arg3) -> Point3d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Point3d)arg1, (Matrix3d)arg2, (Point3d)arg3) -> Point3d'''
    ...
    def setToSum (self, *args, **kwargs):
      '''
setToSum( (Point3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Point3d)arg1) -> str'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Point3d)arg1, (Matrix3d)arg2) -> Point3d'''
    ...
    def x (self, *args, **kwargs):
      '''None'''
    ...
    def y (self, *args, **kwargs):
      '''None'''
    ...
    def z (self, *args, **kwargs):
      '''None'''
    ...

class PointEnt2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def point2d (self, *args, **kwargs):
      '''
point2d( (PointEnt2d)arg1) -> Point2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class PointEnt3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class PointOnCurve2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def curve (self, *args, **kwargs):
      '''
curve( (PointOnCurve2d)arg1) -> Curve2d'''
    ...
    def deriv (self, *args, **kwargs):
      '''
deriv( (PointOnCurve2d)arg1, (CmdFlags)arg2) -> Vector2d

deriv( (PointOnCurve2d)arg1, (CmdFlags)arg2, (float)arg3) -> Vector2d

deriv( (PointOnCurve2d)arg1, (CmdFlags)arg2, (Curve2d)arg3, (float)arg4) -> Vector2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def parameter (self, *args, **kwargs):
      '''
parameter( (PointOnCurve2d)arg1) -> float'''
    ...
    def point (self, *args, **kwargs):
      '''
point( (PointOnCurve2d)arg1) -> Point2d

point( (PointOnCurve2d)arg1, (float)arg2) -> Point2d

point( (PointOnCurve2d)arg1, (Curve2d)arg2, (float)arg3) -> Point2d'''
    ...
    def point2d (self, *args, **kwargs):
      '''
point2d( (PointEnt2d)arg1) -> Point2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setCurve (self, *args, **kwargs):
      '''
setCurve( (PointOnCurve2d)arg1, (Curve2d)arg2) -> PointOnCurve2d'''
    ...
    def setParameter (self, *args, **kwargs):
      '''
setParameter( (PointOnCurve2d)arg1, (float)arg2) -> PointOnCurve2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class PointOnCurve3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Polyline2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> Point2d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt2d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def fitPointAt (self, *args, **kwargs):
      '''
fitPointAt( (Polyline2d)arg1, (CmdFlags)arg2) -> Point2d'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt2d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt2d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt2d)arg1) -> int'''
    ...
    def numFitPoints (self, *args, **kwargs):
      '''
numFitPoints( (Polyline2d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt2d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt2d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (Point2d)arg3) -> SplineEnt2d'''
    ...
    def setFitPointAt (self, *args, **kwargs):
      '''
setFitPointAt( (Polyline2d)arg1, (CmdFlags)arg2, (Point2d)arg3) -> Polyline2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt2d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Polyline3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> Point3d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt3d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def fitPointAt (self, *args, **kwargs):
      '''
fitPointAt( (Polyline3d)arg1, (CmdFlags)arg2) -> Point3d'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt3d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt3d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt3d)arg1) -> int'''
    ...
    def numFitPoints (self, *args, **kwargs):
      '''
numFitPoints( (Polyline3d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt3d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt3d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (Point3d)arg3) -> SplineEnt3d'''
    ...
    def setFitPointAt (self, *args, **kwargs):
      '''
setFitPointAt( (Polyline3d)arg1, (CmdFlags)arg2, (Point3d)arg3) -> Polyline3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt3d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Position2d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity2d)arg1, (Point2d)arg2) -> bool

isOn( (Entity2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def point2d (self, *args, **kwargs):
      '''
point2d( (PointEnt2d)arg1) -> Point2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Position2d)arg1, (Point2d)arg2) -> Position2d

set( (Position2d)arg1, (float)arg2, (float)arg3) -> Position2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Position3d:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Ray2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt2d)arg1) -> Vector2d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt2d)arg1) -> Line2d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getPerpLine (self, *args, **kwargs):
      '''
getPerpLine( (LinearEnt2d)arg1, (Point2d)arg2) -> Line2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

intersectWith( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isColinearTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isParallelTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> bool

isPerpendicularTo( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> bool'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2) -> tuple

overlap( (LinearEnt2d)arg1, (LinearEnt2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt2d)arg1) -> Point2d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Ray2d)arg1, (Point2d)arg2, (Vector2d)arg3) -> Ray2d

set( (Ray2d)arg1, (Point2d)arg2, (Point2d)arg3) -> Ray2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class Ray3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (LinearEnt3d)arg1) -> Vector3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getLine (self, *args, **kwargs):
      '''
getLine( (LinearEnt3d)arg1) -> Line3d'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getPerpPlane (self, *args, **kwargs):
      '''
getPerpPlane( (LinearEnt3d)arg1, (Point3d)arg2) -> Plane'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def intersectWith (self, *args, **kwargs):
      '''
intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> tuple

intersectWith( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> tuple'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isColinearTo (self, *args, **kwargs):
      '''
isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isColinearTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (LinearEnt3d)arg1, (Point3d)arg2) -> tuple

isOn( (LinearEnt3d)arg1, (Point3d)arg2, (Tol)arg3) -> tuple

isOn( (LinearEnt3d)arg1, (float)arg2) -> bool

isOn( (LinearEnt3d)arg1, (float)arg2, (Tol)arg3) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2) -> bool

isOn( (LinearEnt3d)arg1, (Plane)arg2, (Tol)arg3) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isParallelTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2) -> bool

isPerpendicularTo( (LinearEnt3d)arg1, (PlanarEnt)arg2, (Tol)arg3) -> bool'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def overlap (self, *args, **kwargs):
      '''
overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2) -> tuple

overlap( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def pointOnLine (self, *args, **kwargs):
      '''
pointOnLine( (LinearEnt3d)arg1) -> Point3d'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def projIntersectWith (self, *args, **kwargs):
      '''
projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3) -> tuple

projIntersectWith( (LinearEnt3d)arg1, (LinearEnt3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Ray3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Ray3d

set( (Ray3d)arg1, (Point3d)arg2, (Point3d)arg3) -> Ray3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Scale2d:
    def postMultBy (self, *args, **kwargs):
      '''
postMultBy( (Scale2d)arg1, (Scale2d)arg2) -> Scale2d'''
    ...
    def preMultBy (self, *args, **kwargs):
      '''
preMultBy( (Scale2d)arg1, (Scale2d)arg2) -> Scale2d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Scale2d)arg1, (Scale2d)arg2, (float)arg3) -> Scale2d

setToProduct( (Scale2d)arg1, (Scale2d)arg2, (Scale2d)arg3) -> Scale2d'''
    ...
    def sx (self, *args, **kwargs):
      '''None'''
    ...
    def sy (self, *args, **kwargs):
      '''None'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Scale2d)arg1) -> str'''
    ...

class Scale3d:
    def postMultBy (self, *args, **kwargs):
      '''
postMultBy( (Scale3d)arg1, (Scale3d)arg2) -> Scale3d'''
    ...
    def preMultBy (self, *args, **kwargs):
      '''
preMultBy( (Scale3d)arg1, (Scale3d)arg2) -> Scale3d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Scale3d)arg1, (Scale3d)arg2, (float)arg3) -> Scale3d

setToProduct( (Scale3d)arg1, (Scale3d)arg2, (Scale3d)arg3) -> Scale3d'''
    ...
    def sx (self, *args, **kwargs):
      '''None'''
    ...
    def sy (self, *args, **kwargs):
      '''None'''
    ...
    def sz (self, *args, **kwargs):
      '''None'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Scale3d)arg1) -> str'''
    ...

class SplineEnt2d:
    def area (self, *args, **kwargs):
      '''
area( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve2d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve2d)arg1) -> BoundBlock2d

boundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve2d)arg1, (Point2d)arg2) -> Point2d

closestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> Point2d

closestPointTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

closestPointTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt2d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> Point2d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity2d)arg1) -> Entity2d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt2d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve2d)arg1, (Point2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2) -> float

distanceTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt2d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve2d)arg1, (float)arg2) -> Point2d

evalPoint( (Curve2d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve2d)arg1) -> list

explode( (Curve2d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getClosestPointTo( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2) -> tuple

getClosestPointsTo( (Curve2d)arg1, (Curve2d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve2d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve2d)arg1, (Point2d)arg2) -> PointOnCurve2d

getNormalPoint( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> PointOnCurve2d'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve2d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve2d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve2d)arg1) -> Point2d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3) -> list

getTrimmedOffset( (Curve2d)arg1, (float)arg2, (OffsetCrvExtType)arg3, (Tol)arg4) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve2d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt2d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve2d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve2d)arg1) -> bool

isClosed( (Curve2d)arg1, (Tol)arg2) -> bool'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve2d)arg1) -> tuple

isDegenerate( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity2d)arg1, (Entity2d)arg2) -> bool

isEqualTo( (Entity2d)arg1, (Entity2d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity2d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve2d)arg1) -> tuple

isLinear( (Curve2d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity2d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve2d)arg1, (Point2d)arg2) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3) -> bool

isOn( (Curve2d)arg1, (Point2d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve2d)arg1, (float)arg2) -> bool

isOn( (Curve2d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve2d)arg1) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt2d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt2d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt2d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve2d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity2d)arg1, (Line2d)arg2) -> Entity2d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt2d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt2d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt2d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve2d)arg1) -> BoundBlock2d

orthoBoundBlock( (Curve2d)arg1, (Interval)arg2) -> BoundBlock2d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve2d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve2d)arg1, (Point2d)arg2) -> float

paramOf( (Curve2d)arg1, (Point2d)arg2, (Tol)arg3) -> float'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve2d)arg1) -> Curve2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity2d)arg1, (float)arg2) -> Entity2d

rotateBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity2d)arg1, (float)arg2) -> Entity2d

scaleBy( (Entity2d)arg1, (float)arg2, (Point2d)arg3) -> Entity2d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (Point2d)arg3) -> SplineEnt2d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve2d)arg1) -> Curve2d

setInterval( (Curve2d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt2d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt2d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt2d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt2d)arg1) -> Point2d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity2d)arg1, (Matrix2d)arg2) -> Entity2d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity2d)arg1, (Vector2d)arg2) -> Entity2d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity2d)arg1) -> EntityId'''
    ...

class SplineEnt3d:
    def area (self, *args, **kwargs):
      '''
area( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

area( (Curve3d)arg1, (float)arg2, (float)arg3, (Tol)arg4) -> float'''
    ...
    def boundBlock (self, *args, **kwargs):
      '''
boundBlock( (Curve3d)arg1) -> BoundBlock3d

boundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Curve3d)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d

closestPointTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

closestPointTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def continuityAtKnot (self, *args, **kwargs):
      '''
continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2) -> int

continuityAtKnot( (SplineEnt3d)arg1, (CmdFlags)arg2, (Tol)arg3) -> int'''
    ...
    def controlPointAt (self, *args, **kwargs):
      '''
controlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> Point3d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def degree (self, *args, **kwargs):
      '''
degree( (SplineEnt3d)arg1) -> int'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Curve3d)arg1, (Point3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2) -> float

distanceTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> float'''
    ...
    def endParam (self, *args, **kwargs):
      '''
endParam( (SplineEnt3d)arg1) -> float'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Curve3d)arg1, (float)arg2) -> Point3d

evalPoint( (Curve3d)arg1, (float)arg2, (CmdFlags)arg3) -> tuple'''
    ...
    def explode (self, *args, **kwargs):
      '''
explode( (Curve3d)arg1) -> list

explode( (Curve3d)arg1, (Interval)arg2) -> list'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getClosestPointsTo (self, *args, **kwargs):
      '''
getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2) -> tuple

getClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getInterval (self, *args, **kwargs):
      '''
getInterval( (Curve3d)arg1) -> Interval'''
    ...
    def getNormalPoint (self, *args, **kwargs):
      '''
getNormalPoint( (Curve3d)arg1, (Point3d)arg2) -> PointOnCurve3d

getNormalPoint( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> PointOnCurve3d'''
    ...
    def getProjClosestPointTo (self, *args, **kwargs):
      '''
getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> PointOnCurve3d

getProjClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> PointOnCurve3d'''
    ...
    def getProjClosestPointsTo (self, *args, **kwargs):
      '''
getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

getProjClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def getSamplePoints (self, *args, **kwargs):
      '''
getSamplePoints( (Curve3d)arg1, (CmdFlags)arg2) -> list

getSamplePoints( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> list'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve3d)arg1, (float)arg2) -> tuple'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve3d)arg1) -> Point3d'''
    ...
    def getTrimmedOffset (self, *args, **kwargs):
      '''
getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4) -> list

getTrimmedOffset( (Curve3d)arg1, (float)arg2, (Vector3d)arg3, (OffsetCrvExtType)arg4, (Tol)arg5) -> list'''
    ...
    def hasEndPoint (self, *args, **kwargs):
      '''
hasEndPoint( (Curve3d)arg1) -> bool'''
    ...
    def hasFitData (self, *args, **kwargs):
      '''
hasFitData( (SplineEnt3d)arg1) -> bool'''
    ...
    def hasStartPoint (self, *args, **kwargs):
      '''
hasStartPoint( (Curve3d)arg1) -> bool'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve3d)arg1) -> bool

isClosed( (Curve3d)arg1, (Tol)arg2) -> bool'''
    ...
    def isCoplanarWith (self, *args, **kwargs):
      '''
isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2) -> tuple

isCoplanarWith( (Curve3d)arg1, (Curve3d)arg2, (Tol)arg3) -> tuple'''
    ...
    def isDegenerate (self, *args, **kwargs):
      '''
isDegenerate( (Curve3d)arg1) -> tuple

isDegenerate( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isLinear (self, *args, **kwargs):
      '''
isLinear( (Curve3d)arg1) -> tuple

isLinear( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Curve3d)arg1, (Point3d)arg2) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3) -> bool

isOn( (Curve3d)arg1, (Point3d)arg2, (float)arg3, (Tol)arg4) -> bool

isOn( (Curve3d)arg1, (float)arg2) -> bool

isOn( (Curve3d)arg1, (float)arg2, (Tol)arg3) -> bool'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve3d)arg1) -> tuple'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Curve3d)arg1) -> tuple

isPlanar( (Curve3d)arg1, (Tol)arg2) -> tuple'''
    ...
    def isRational (self, *args, **kwargs):
      '''
isRational( (SplineEnt3d)arg1) -> bool'''
    ...
    def knotAt (self, *args, **kwargs):
      '''
knotAt( (SplineEnt3d)arg1, (CmdFlags)arg2) -> float'''
    ...
    def knots (self, *args, **kwargs):
      '''
knots( (SplineEnt3d)arg1) -> KnotVector'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

length( (Curve3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def numControlPoints (self, *args, **kwargs):
      '''
numControlPoints( (SplineEnt3d)arg1) -> int'''
    ...
    def numKnots (self, *args, **kwargs):
      '''
numKnots( (SplineEnt3d)arg1) -> int'''
    ...
    def order (self, *args, **kwargs):
      '''
order( (SplineEnt3d)arg1) -> int'''
    ...
    def orthoBoundBlock (self, *args, **kwargs):
      '''
orthoBoundBlock( (Curve3d)arg1) -> BoundBlock3d

orthoBoundBlock( (Curve3d)arg1, (Interval)arg2) -> BoundBlock3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Curve3d)arg1, (Plane)arg2) -> Entity3d

orthoProject( (Curve3d)arg1, (Plane)arg2, (Tol)arg3) -> Entity3d'''
    ...
    def paramAtLength (self, *args, **kwargs):
      '''
paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3) -> float

paramAtLength( (Curve3d)arg1, (float)arg2, (float)arg3, (bool)arg4, (float)arg5) -> float'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Curve3d)arg1, (Point3d)arg2) -> float

paramOf( (Curve3d)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def projClosestPointTo (self, *args, **kwargs):
      '''
projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3) -> Point3d

projClosestPointTo( (Curve3d)arg1, (Point3d)arg2, (Vector3d)arg3, (Tol)arg4) -> Point3d'''
    ...
    def projClosestPointsTo (self, *args, **kwargs):
      '''
projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3) -> tuple

projClosestPointsTo( (Curve3d)arg1, (Curve3d)arg2, (Vector3d)arg3, (Tol)arg4) -> tuple'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3) -> Entity3d

project( (Curve3d)arg1, (Plane)arg2, (Vector3d)arg3, (Tol)arg4) -> Entity3d'''
    ...
    def reverseParam (self, *args, **kwargs):
      '''
reverseParam( (Curve3d)arg1) -> Curve3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def setControlPointAt (self, *args, **kwargs):
      '''
setControlPointAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (Point3d)arg3) -> SplineEnt3d'''
    ...
    def setInterval (self, *args, **kwargs):
      '''
setInterval( (Curve3d)arg1) -> Curve3d

setInterval( (Curve3d)arg1, (Interval)arg2) -> bool'''
    ...
    def setKnotAt (self, *args, **kwargs):
      '''
setKnotAt( (SplineEnt3d)arg1, (CmdFlags)arg2, (float)arg3) -> SplineEnt3d'''
    ...
    def startParam (self, *args, **kwargs):
      '''
startParam( (SplineEnt3d)arg1) -> float'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (SplineEnt3d)arg1) -> Point3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class SurfSurfInt:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Entity3d)arg1, (Point3d)arg2) -> bool

isOn( (Entity3d)arg1, (Point3d)arg2, (Tol)arg3) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Surface:
    def className (self, *args, **kwargs):
      '''
className() -> str'''
    ...
    def closestPointTo (self, *args, **kwargs):
      '''
closestPointTo( (Surface)arg1, (Point3d)arg2) -> Point3d

closestPointTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point3d'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Entity3d)arg1) -> Entity3d'''
    ...
    def distanceTo (self, *args, **kwargs):
      '''
distanceTo( (Surface)arg1, (Point3d)arg2) -> float

distanceTo( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> float'''
    ...
    def evalPoint (self, *args, **kwargs):
      '''
evalPoint( (Surface)arg1, (Point2d)arg2) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4) -> Point3d

evalPoint( (Surface)arg1, (Point2d)arg2, (CmdFlags)arg3, (list)arg4, (Vector3d)arg5) -> Point3d'''
    ...
    def isClosedInU (self, *args, **kwargs):
      '''
isClosedInU( (Surface)arg1) -> bool

isClosedInU( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isClosedInV (self, *args, **kwargs):
      '''
isClosedInV( (Surface)arg1) -> bool

isClosedInV( (Surface)arg1, (Tol)arg2) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Entity3d)arg1, (Entity3d)arg2, (Tol)arg3) -> bool'''
    ...
    def isKindOf (self, *args, **kwargs):
      '''
isKindOf( (Entity3d)arg1, (EntityId)arg2) -> bool'''
    ...
    def isNormalReversed (self, *args, **kwargs):
      '''
isNormalReversed( (Surface)arg1) -> bool'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (Entity3d)arg1) -> bool'''
    ...
    def isOn (self, *args, **kwargs):
      '''
isOn( (Surface)arg1, (Point3d)arg2) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3) -> bool

isOn( (Surface)arg1, (Point3d)arg2, (Point2d)arg3, (Tol)arg4) -> bool'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Entity3d)arg1, (Plane)arg2) -> Entity3d'''
    ...
    def paramOf (self, *args, **kwargs):
      '''
paramOf( (Surface)arg1, (Point3d)arg2) -> Point2d

paramOf( (Surface)arg1, (Point3d)arg2, (Tol)arg3) -> Point2d'''
    ...
    def reverseNormal (self, *args, **kwargs):
      '''
reverseNormal( (Surface)arg1) -> Surface'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3) -> Entity3d

rotateBy( (Entity3d)arg1, (float)arg2, (Vector3d)arg3, (Point3d)arg4) -> Entity3d'''
    ...
    def scaleBy (self, *args, **kwargs):
      '''
scaleBy( (Entity3d)arg1, (float)arg2) -> Entity3d

scaleBy( (Entity3d)arg1, (float)arg2, (Point3d)arg3) -> Entity3d'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity3d)arg1, (Matrix3d)arg2) -> Entity3d'''
    ...
    def translateBy (self, *args, **kwargs):
      '''
translateBy( (Entity3d)arg1, (Vector3d)arg2) -> Entity3d'''
    ...
    def type (self, *args, **kwargs):
      '''
type( (Entity3d)arg1) -> EntityId'''
    ...

class Tol:
    def current (self, *args, **kwargs):
      '''None'''
    ...
    def equalPoint (self, *args, **kwargs):
      '''
equalPoint( (Tol)arg1) -> float'''
    ...
    def equalVector (self, *args, **kwargs):
      '''
equalVector( (Tol)arg1) -> float'''
    ...
    def setEqualPoint (self, *args, **kwargs):
      '''
setEqualPoint( (Tol)arg1, (float)arg2) -> None'''
    ...
    def setEqualVector (self, *args, **kwargs):
      '''
setEqualVector( (Tol)arg1, (float)arg2) -> None'''
    ...

class Vector2d:
    def angle (self, *args, **kwargs):
      '''
angle( (Vector2d)arg1) -> float'''
    ...
    def angleTo (self, *args, **kwargs):
      '''
angleTo( (Vector2d)arg1, (Vector2d)arg2) -> float'''
    ...
    def dotProduct (self, *args, **kwargs):
      '''
dotProduct( (Vector2d)arg1, (Vector2d)arg2) -> float'''
    ...
    def isCodirectionalTo (self, *args, **kwargs):
      '''
isCodirectionalTo( (Vector2d)arg1, (Vector2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063640>]) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Vector2d)arg1, (Vector2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063760>]) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (Vector2d)arg1, (Vector2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F1320635B0>]) -> bool'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (Vector2d)arg1, (Vector2d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F1320636D0>]) -> bool'''
    ...
    def isUnitLength (self, *args, **kwargs):
      '''
isUnitLength( (Vector2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063490>]) -> bool'''
    ...
    def isZeroLength (self, *args, **kwargs):
      '''
isZeroLength( (Vector2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063520>]) -> bool'''
    ...
    def kIdentity (self, *args, **kwargs):
      '''None'''
    ...
    def kXAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kYAxis (self, *args, **kwargs):
      '''None'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Vector2d)arg1) -> float'''
    ...
    def lengthSqrd (self, *args, **kwargs):
      '''
lengthSqrd( (Vector2d)arg1) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Vector2d)arg1, (Vector2d)arg2) -> Vector2d'''
    ...
    def negate (self, *args, **kwargs):
      '''
negate( (Vector2d)arg1) -> Vector2d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Vector2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063370>]) -> Vector2d'''
    ...
    def normalize (self, *args, **kwargs):
      '''
normalize( (Vector2d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063400>]) -> Vector2d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Vector2d)arg1, (float)arg2) -> Vector2d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Vector2d)arg1, (float)arg2, (float)arg3) -> Vector2d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Vector2d)arg1, (Vector2d)arg2, (float)arg3) -> Vector2d

setToProduct( (Vector2d)arg1, (Matrix2d)arg2, (Vector2d)arg3) -> Vector2d'''
    ...
    def setToSum (self, *args, **kwargs):
      '''
setToSum( (Vector2d)arg1, (Vector2d)arg2, (Vector2d)arg3) -> Vector2d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Vector2d)arg1) -> str'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Vector2d)arg1, (Matrix2d)arg2) -> Vector2d'''
    ...
    def x (self, *args, **kwargs):
      '''None'''
    ...
    def y (self, *args, **kwargs):
      '''None'''
    ...

class Vector3d:
    def angleOnPlane (self, *args, **kwargs):
      '''
angleOnPlane( (Vector3d)arg1, (object)arg2) -> float'''
    ...
    def angleTo (self, *args, **kwargs):
      '''
angleTo( (Vector3d)arg1, (Vector3d)arg2) -> float

angleTo( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> float'''
    ...
    def convert2d (self, *args, **kwargs):
      '''
convert2d( (Vector3d)arg1, (object)arg2) -> Vector2d'''
    ...
    def crossProduct (self, *args, **kwargs):
      '''
crossProduct( (Vector3d)arg1, (Vector3d)arg2) -> Vector3d'''
    ...
    def dotProduct (self, *args, **kwargs):
      '''
dotProduct( (Vector3d)arg1, (Vector3d)arg2) -> float'''
    ...
    def isCodirectionalTo (self, *args, **kwargs):
      '''
isCodirectionalTo( (Vector3d)arg1, (Vector3d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063C70>]) -> bool'''
    ...
    def isEqualTo (self, *args, **kwargs):
      '''
isEqualTo( (Vector3d)arg1, (Vector3d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063D90>]) -> bool'''
    ...
    def isParallelTo (self, *args, **kwargs):
      '''
isParallelTo( (Vector3d)arg1, (Vector3d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063BE0>]) -> bool'''
    ...
    def isPerpendicularTo (self, *args, **kwargs):
      '''
isPerpendicularTo( (Vector3d)arg1, (Vector3d)arg2 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063D00>]) -> bool'''
    ...
    def isUnitLength (self, *args, **kwargs):
      '''
isUnitLength( (Vector3d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063AC0>]) -> bool'''
    ...
    def isZeroLength (self, *args, **kwargs):
      '''
isZeroLength( (Vector3d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063B50>]) -> bool'''
    ...
    def kIdentity (self, *args, **kwargs):
      '''None'''
    ...
    def kXAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kYAxis (self, *args, **kwargs):
      '''None'''
    ...
    def kZAxis (self, *args, **kwargs):
      '''None'''
    ...
    def largestElement (self, *args, **kwargs):
      '''
largestElement( (Vector3d)arg1) -> int'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Vector3d)arg1) -> float'''
    ...
    def lengthSqrd (self, *args, **kwargs):
      '''
lengthSqrd( (Vector3d)arg1) -> float'''
    ...
    def mirror (self, *args, **kwargs):
      '''
mirror( (Vector3d)arg1, (Vector3d)arg2) -> Vector3d'''
    ...
    def negate (self, *args, **kwargs):
      '''
negate( (Vector3d)arg1) -> Vector3d'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Vector3d)arg1 [, (Tol)AcGeTol=<PyGe.Tol object at 0x000001F132063A30>]) -> Vector3d'''
    ...
    def normalize (self, *args, **kwargs):
      '''
normalize( (Vector3d)arg1, (Tol)arg2) -> Vector3d

normalize( (Vector3d)arg1, (Tol)arg2, (AcGeError)arg3) -> Vector3d'''
    ...
    def orthoProject (self, *args, **kwargs):
      '''
orthoProject( (Vector3d)arg1, (Vector3d)arg2) -> Vector3d

orthoProject( (Vector3d)arg1, (Vector3d)arg2, (Tol)arg3, (AcGeError)arg4) -> Vector3d'''
    ...
    def perpVector (self, *args, **kwargs):
      '''
perpVector( (Vector3d)arg1) -> Vector3d'''
    ...
    def project (self, *args, **kwargs):
      '''
project( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> Vector3d

project( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3, (Tol)arg4, (AcGeError)arg5) -> Vector3d'''
    ...
    def rotateBy (self, *args, **kwargs):
      '''
rotateBy( (Vector3d)arg1, (float)arg2, (Vector3d)arg3) -> Vector3d'''
    ...
    def rotateTo (self, *args, **kwargs):
      '''
rotateTo( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> Matrix3d'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Vector3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> Vector3d

set( (Vector3d)arg1, (object)arg2, (Vector2d)arg3) -> Vector3d'''
    ...
    def setToProduct (self, *args, **kwargs):
      '''
setToProduct( (Vector3d)arg1, (Vector3d)arg2, (float)arg3) -> Vector3d

setToProduct( (Vector3d)arg1, (Matrix3d)arg2, (Vector3d)arg3) -> Vector3d'''
    ...
    def setToSum (self, *args, **kwargs):
      '''
setToSum( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> Vector3d'''
    ...
    def toString (self, *args, **kwargs):
      '''
toString( (Vector3d)arg1) -> str'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Vector3d)arg1, (Matrix3d)arg2) -> Vector3d'''
    ...
    def x (self, *args, **kwargs):
      '''None'''
    ...
    def y (self, *args, **kwargs):
      '''None'''
    ...
    def z (self, *args, **kwargs):
      '''None'''
    ...

class __loader__:
    def _ORIGIN (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def create_module (spec):
      '''Create a built-in module'''
    ...
    def exec_module (module):
      '''Exec a built-in module'''
    ...
    def find_module (fullname, path=None):
      '''Find the built-in module.

        If 'path' is ever specified then the search is considered a failure.

        This method is deprecated.  Use find_spec() instead.

        '''
    ...
    def find_spec (fullname, path=None, target=None):
      '''None'''
    ...
    def get_code (fullname):
      '''Return None as built-in modules do not have code objects.'''
    ...
    def get_source (fullname):
      '''Return None as built-in modules do not have source code.'''
    ...
    def is_package (fullname):
      '''Return False as built-in modules are never packages.'''
    ...
    def load_module (fullname):
      '''Load the specified module into sys.modules and return it.

    This method is deprecated.  Use loader.exec_module() instead.

    '''
    ...
    def module_repr (module):
      '''Return repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        '''
    ...
    def capitalize ():
      '''Return a capitalized version of the string.

More specifically, make the first character have upper case and the rest lower
case.'''
    ...
    def casefold ():
      '''Return a version of the string suitable for caseless comparisons.'''
    ...
    def center (width, fillchar=' ', /):
      '''Return a centered string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def count (self, *args, **kwargs):
      '''S.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.'''
    ...
    def encode (encoding='utf-8', errors='strict'):
      '''Encode the string using the codec registered for encoding.

  encoding
    The encoding in which to encode the string.
  errors
    The error handling scheme to use for encoding errors.
    The default is 'strict' meaning that encoding errors raise a
    UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors.'''
    ...
    def endswith (self, *args, **kwargs):
      '''S.endswith(suffix[, start[, end]]) -> bool

Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.'''
    ...
    def expandtabs (tabsize=8):
      '''Return a copy where all tab characters are expanded using spaces.

If tabsize is not given, a tab size of 8 characters is assumed.'''
    ...
    def find (self, *args, **kwargs):
      '''S.find(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.'''
    ...
    def format (self, *args, **kwargs):
      '''S.format(*args, **kwargs) -> str

Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').'''
    ...
    def format_map (self, *args, **kwargs):
      '''S.format_map(mapping) -> str

Return a formatted version of S, using substitutions from mapping.
The substitutions are identified by braces ('{' and '}').'''
    ...
    def index (self, *args, **kwargs):
      '''S.index(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.'''
    ...
    def isalnum ():
      '''Return True if the string is an alpha-numeric string, False otherwise.

A string is alpha-numeric if all characters in the string are alpha-numeric and
there is at least one character in the string.'''
    ...
    def isalpha ():
      '''Return True if the string is an alphabetic string, False otherwise.

A string is alphabetic if all characters in the string are alphabetic and there
is at least one character in the string.'''
    ...
    def isascii ():
      '''Return True if all characters in the string are ASCII, False otherwise.

ASCII characters have code points in the range U+0000-U+007F.
Empty string is ASCII too.'''
    ...
    def isdecimal ():
      '''Return True if the string is a decimal string, False otherwise.

A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.'''
    ...
    def isdigit ():
      '''Return True if the string is a digit string, False otherwise.

A string is a digit string if all characters in the string are digits and there
is at least one character in the string.'''
    ...
    def isidentifier ():
      '''Return True if the string is a valid Python identifier, False otherwise.

Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
such as "def" or "class".'''
    ...
    def islower ():
      '''Return True if the string is a lowercase string, False otherwise.

A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.'''
    ...
    def isnumeric ():
      '''Return True if the string is a numeric string, False otherwise.

A string is numeric if all characters in the string are numeric and there is at
least one character in the string.'''
    ...
    def isprintable ():
      '''Return True if the string is printable, False otherwise.

A string is printable if all of its characters are considered printable in
repr() or if it is empty.'''
    ...
    def isspace ():
      '''Return True if the string is a whitespace string, False otherwise.

A string is whitespace if all characters in the string are whitespace and there
is at least one character in the string.'''
    ...
    def istitle ():
      '''Return True if the string is a title-cased string, False otherwise.

In a title-cased string, upper- and title-case characters may only
follow uncased characters and lowercase characters only cased ones.'''
    ...
    def isupper ():
      '''Return True if the string is an uppercase string, False otherwise.

A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.'''
    ...
    def join (iterable, /):
      '''Concatenate any number of strings.

The string whose method is called is inserted in between each given string.
The result is returned as a new string.

Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs''''
    ...
    def ljust (width, fillchar=' ', /):
      '''Return a left-justified string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def lower ():
      '''Return a copy of the string converted to lowercase.'''
    ...
    def lstrip (chars=None, /):
      '''Return a copy of the string with leading whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def maketrans (self, *args, **kwargs):
      '''Return a translation table usable for str.translate().

If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals.
If there are two arguments, they must be strings of equal length, and
in the resulting dictionary, each character in x will be mapped to the
character at the same position in y. If there is a third argument, it
must be a string, whose characters will be mapped to None in the result.'''
    ...
    def partition (sep, /):
      '''Partition the string into three parts using the given separator.

This will search for the separator in the string.  If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.

If the separator is not found, returns a 3-tuple containing the original string
and two empty strings.'''
    ...
    def removeprefix (prefix, /):
      '''Return a str with the given prefix string removed if present.

If the string starts with the prefix string, return string[len(prefix):].
Otherwise, return a copy of the original string.'''
    ...
    def removesuffix (suffix, /):
      '''Return a str with the given suffix string removed if present.

If the string ends with the suffix string and that suffix is not empty,
return string[:-len(suffix)]. Otherwise, return a copy of the original
string.'''
    ...
    def replace (old, new, count=-1, /):
      '''Return a copy with all occurrences of substring old replaced by new.

  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.

If the optional argument count is given, only the first count occurrences are
replaced.'''
    ...
    def rfind (self, *args, **kwargs):
      '''S.rfind(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.'''
    ...
    def rindex (self, *args, **kwargs):
      '''S.rindex(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.'''
    ...
    def rjust (width, fillchar=' ', /):
      '''Return a right-justified string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def rpartition (sep, /):
      '''Partition the string into three parts using the given separator.

This will search for the separator in the string, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.'''
    ...
    def rsplit (sep=None, maxsplit=-1):
      '''Return a list of the substrings in the string, using sep as the separator string.

  sep
    The separator used to split the string.

    When set to None (the default value), will split on any whitespace
    character (including \\n \\r \\t \\f and spaces) and will discard
    empty strings from the result.
  maxsplit
    Maximum number of splits (starting from the left).
    -1 (the default value) means no limit.

Splitting starts at the end of the string and works to the front.'''
    ...
    def rstrip (chars=None, /):
      '''Return a copy of the string with trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def split (sep=None, maxsplit=-1):
      '''Return a list of the substrings in the string, using sep as the separator string.

  sep
    The separator used to split the string.

    When set to None (the default value), will split on any whitespace
    character (including \\n \\r \\t \\f and spaces) and will discard
    empty strings from the result.
  maxsplit
    Maximum number of splits (starting from the left).
    -1 (the default value) means no limit.

Note, str.split() is mainly useful for data that has been intentionally
delimited.  With natural text that includes punctuation, consider using
the regular expression module.'''
    ...
    def splitlines (keepends=False):
      '''Return a list of the lines in the string, breaking at line boundaries.

Line breaks are not included in the resulting list unless keepends is given and
true.'''
    ...
    def startswith (self, *args, **kwargs):
      '''S.startswith(prefix[, start[, end]]) -> bool

Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.'''
    ...
    def strip (chars=None, /):
      '''Return a copy of the string with leading and trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def swapcase ():
      '''Convert uppercase characters to lowercase and lowercase characters to uppercase.'''
    ...
    def title ():
      '''Return a version of the string where each word is titlecased.

More specifically, words start with uppercased characters and all remaining
cased characters have lower case.'''
    ...
    def translate (table, /):
      '''Replace each character in the string using the given translation table.

  table
    Translation table, which must be a mapping of Unicode ordinals to
    Unicode ordinals, strings, or None.

The table must implement lookup/indexing via __getitem__, for instance a
dictionary or list.  If this operation raises LookupError, the character is
left untouched.  Characters mapped to None are deleted.'''
    ...
    def upper ():
      '''Return a copy of the string converted to uppercase.'''
    ...
    def zfill (width, /):
      '''Pad a numeric string with zeros on the left, to fill a field of the given width.

The string is never truncated.'''
    ...
    def capitalize ():
      '''Return a capitalized version of the string.

More specifically, make the first character have upper case and the rest lower
case.'''
    ...
    def casefold ():
      '''Return a version of the string suitable for caseless comparisons.'''
    ...
    def center (width, fillchar=' ', /):
      '''Return a centered string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def count (self, *args, **kwargs):
      '''S.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.'''
    ...
    def encode (encoding='utf-8', errors='strict'):
      '''Encode the string using the codec registered for encoding.

  encoding
    The encoding in which to encode the string.
  errors
    The error handling scheme to use for encoding errors.
    The default is 'strict' meaning that encoding errors raise a
    UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors.'''
    ...
    def endswith (self, *args, **kwargs):
      '''S.endswith(suffix[, start[, end]]) -> bool

Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.'''
    ...
    def expandtabs (tabsize=8):
      '''Return a copy where all tab characters are expanded using spaces.

If tabsize is not given, a tab size of 8 characters is assumed.'''
    ...
    def find (self, *args, **kwargs):
      '''S.find(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.'''
    ...
    def format (self, *args, **kwargs):
      '''S.format(*args, **kwargs) -> str

Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').'''
    ...
    def format_map (self, *args, **kwargs):
      '''S.format_map(mapping) -> str

Return a formatted version of S, using substitutions from mapping.
The substitutions are identified by braces ('{' and '}').'''
    ...
    def index (self, *args, **kwargs):
      '''S.index(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.'''
    ...
    def isalnum ():
      '''Return True if the string is an alpha-numeric string, False otherwise.

A string is alpha-numeric if all characters in the string are alpha-numeric and
there is at least one character in the string.'''
    ...
    def isalpha ():
      '''Return True if the string is an alphabetic string, False otherwise.

A string is alphabetic if all characters in the string are alphabetic and there
is at least one character in the string.'''
    ...
    def isascii ():
      '''Return True if all characters in the string are ASCII, False otherwise.

ASCII characters have code points in the range U+0000-U+007F.
Empty string is ASCII too.'''
    ...
    def isdecimal ():
      '''Return True if the string is a decimal string, False otherwise.

A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.'''
    ...
    def isdigit ():
      '''Return True if the string is a digit string, False otherwise.

A string is a digit string if all characters in the string are digits and there
is at least one character in the string.'''
    ...
    def isidentifier ():
      '''Return True if the string is a valid Python identifier, False otherwise.

Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
such as "def" or "class".'''
    ...
    def islower ():
      '''Return True if the string is a lowercase string, False otherwise.

A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.'''
    ...
    def isnumeric ():
      '''Return True if the string is a numeric string, False otherwise.

A string is numeric if all characters in the string are numeric and there is at
least one character in the string.'''
    ...
    def isprintable ():
      '''Return True if the string is printable, False otherwise.

A string is printable if all of its characters are considered printable in
repr() or if it is empty.'''
    ...
    def isspace ():
      '''Return True if the string is a whitespace string, False otherwise.

A string is whitespace if all characters in the string are whitespace and there
is at least one character in the string.'''
    ...
    def istitle ():
      '''Return True if the string is a title-cased string, False otherwise.

In a title-cased string, upper- and title-case characters may only
follow uncased characters and lowercase characters only cased ones.'''
    ...
    def isupper ():
      '''Return True if the string is an uppercase string, False otherwise.

A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.'''
    ...
    def join (iterable, /):
      '''Concatenate any number of strings.

The string whose method is called is inserted in between each given string.
The result is returned as a new string.

Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs''''
    ...
    def ljust (width, fillchar=' ', /):
      '''Return a left-justified string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def lower ():
      '''Return a copy of the string converted to lowercase.'''
    ...
    def lstrip (chars=None, /):
      '''Return a copy of the string with leading whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def maketrans (self, *args, **kwargs):
      '''Return a translation table usable for str.translate().

If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals.
If there are two arguments, they must be strings of equal length, and
in the resulting dictionary, each character in x will be mapped to the
character at the same position in y. If there is a third argument, it
must be a string, whose characters will be mapped to None in the result.'''
    ...
    def partition (sep, /):
      '''Partition the string into three parts using the given separator.

This will search for the separator in the string.  If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.

If the separator is not found, returns a 3-tuple containing the original string
and two empty strings.'''
    ...
    def removeprefix (prefix, /):
      '''Return a str with the given prefix string removed if present.

If the string starts with the prefix string, return string[len(prefix):].
Otherwise, return a copy of the original string.'''
    ...
    def removesuffix (suffix, /):
      '''Return a str with the given suffix string removed if present.

If the string ends with the suffix string and that suffix is not empty,
return string[:-len(suffix)]. Otherwise, return a copy of the original
string.'''
    ...
    def replace (old, new, count=-1, /):
      '''Return a copy with all occurrences of substring old replaced by new.

  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.

If the optional argument count is given, only the first count occurrences are
replaced.'''
    ...
    def rfind (self, *args, **kwargs):
      '''S.rfind(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.'''
    ...
    def rindex (self, *args, **kwargs):
      '''S.rindex(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.'''
    ...
    def rjust (width, fillchar=' ', /):
      '''Return a right-justified string of length width.

Padding is done using the specified fill character (default is a space).'''
    ...
    def rpartition (sep, /):
      '''Partition the string into three parts using the given separator.

This will search for the separator in the string, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.'''
    ...
    def rsplit (sep=None, maxsplit=-1):
      '''Return a list of the substrings in the string, using sep as the separator string.

  sep
    The separator used to split the string.

    When set to None (the default value), will split on any whitespace
    character (including \\n \\r \\t \\f and spaces) and will discard
    empty strings from the result.
  maxsplit
    Maximum number of splits (starting from the left).
    -1 (the default value) means no limit.

Splitting starts at the end of the string and works to the front.'''
    ...
    def rstrip (chars=None, /):
      '''Return a copy of the string with trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def split (sep=None, maxsplit=-1):
      '''Return a list of the substrings in the string, using sep as the separator string.

  sep
    The separator used to split the string.

    When set to None (the default value), will split on any whitespace
    character (including \\n \\r \\t \\f and spaces) and will discard
    empty strings from the result.
  maxsplit
    Maximum number of splits (starting from the left).
    -1 (the default value) means no limit.

Note, str.split() is mainly useful for data that has been intentionally
delimited.  With natural text that includes punctuation, consider using
the regular expression module.'''
    ...
    def splitlines (keepends=False):
      '''Return a list of the lines in the string, breaking at line boundaries.

Line breaks are not included in the resulting list unless keepends is given and
true.'''
    ...
    def startswith (self, *args, **kwargs):
      '''S.startswith(prefix[, start[, end]]) -> bool

Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.'''
    ...
    def strip (chars=None, /):
      '''Return a copy of the string with leading and trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.'''
    ...
    def swapcase ():
      '''Convert uppercase characters to lowercase and lowercase characters to uppercase.'''
    ...
    def title ():
      '''Return a version of the string where each word is titlecased.

More specifically, words start with uppercased characters and all remaining
cased characters have lower case.'''
    ...
    def translate (table, /):
      '''Replace each character in the string using the given translation table.

  table
    Translation table, which must be a mapping of Unicode ordinals to
    Unicode ordinals, strings, or None.

The table must implement lookup/indexing via __getitem__, for instance a
dictionary or list.  If this operation raises LookupError, the character is
left untouched.  Characters mapped to None are deleted.'''
    ...
    def upper ():
      '''Return a copy of the string converted to uppercase.'''
    ...
    def zfill (width, /):
      '''Pad a numeric string with zeros on the left, to fill a field of the given width.

The string is never truncated.'''
    ...
    def _cached (self, *args, **kwargs):
      '''None'''
    ...
    def _initializing (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _set_fileattr (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def cached (self, *args, **kwargs):
      '''None'''
    ...
    def has_location (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def loader ():
      '''Meta path import for built-in modules.

    All methods are either class or static methods to avoid the need to
    instantiate the class.

    '''
    ...
    def loader_state (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def origin (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def parent (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def submodule_search_locations (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kChamfer (self, *args, **kwargs):
      '''None'''
    ...
    def kExtend (self, *args, **kwargs):
      '''None'''
    ...
    def kFillet (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kChamfer (self, *args, **kwargs):
      '''None'''
    ...
    def kExtend (self, *args, **kwargs):
      '''None'''
    ...
    def kFillet (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kChamfer (self, *args, **kwargs):
      '''None'''
    ...
    def kExtend (self, *args, **kwargs):
      '''None'''
    ...
    def kFillet (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def k0Arg1 (self, *args, **kwargs):
      '''None'''
    ...
    def k0Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def k0This (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1InsideThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1OnThis (self, *args, **kwargs):
      '''None'''
    ...
    def kArg1TooBig (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg1Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kEqualArg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearlyDependentArg1Arg2Arg3 (self, *args, **kwargs):
      '''None'''
    ...
    def kOk (self, *args, **kwargs):
      '''None'''
    ...
    def kPerpendicularArg1Arg2 (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def Helix (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio ():
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count ():
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length ():
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def kAugPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kAugPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBezierCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock2d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundBlock3d (self, *args, **kwargs):
      '''None'''
    ...
    def kBoundedPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCircArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kClipBoundary2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCompositeCrv3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCone (self, *args, **kwargs):
      '''None'''
    ...
    def kConic2d (self, *args, **kwargs):
      '''None'''
    ...
    def kConic3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCubicSplineCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveCurveInt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSampleData (self, *args, **kwargs):
      '''None'''
    ...
    def kCurveSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kDSpline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipArc3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCone (self, *args, **kwargs):
      '''None'''
    ...
    def kEllipCylinder (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity2d (self, *args, **kwargs):
      '''None'''
    ...
    def kEntity3d (self, *args, **kwargs):
      '''None'''
    ...
    def kEnvelope2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalBoundedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalObject (self, *args, **kwargs):
      '''None'''
    ...
    def kExternalSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kFitData3d (self, *args, **kwargs):
      '''None'''
    ...
    def kHatch (self, *args, **kwargs):
      '''None'''
    ...
    def kIntervalBoundBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLine2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLine3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLineSeg3d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kLinearEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kNurbSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kObject (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kOffsetSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanarEnt (self, *args, **kwargs):
      '''None'''
    ...
    def kPlane (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPointOnSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolyline3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPolynomCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition2d (self, *args, **kwargs):
      '''None'''
    ...
    def kPosition3d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay2d (self, *args, **kwargs):
      '''None'''
    ...
    def kRay3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSphere (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineEnt3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurface (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve2dTo3d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceCurve3dTo2d (self, *args, **kwargs):
      '''None'''
    ...
    def kSurfaceSurfaceInt (self, *args, **kwargs):
      '''None'''
    ...
    def kTorus (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCrv2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve2d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedCurve3d (self, *args, **kwargs):
      '''None'''
    ...
    def kTrimmedSurface (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def real (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def to_bytes (length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
