
class ACIcolorMethod:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kACIbyBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kACIbyLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kACIclear (self, *args, **kwargs):
      '''None'''
    ...
    def kACIforeground (self, *args, **kwargs):
      '''None'''
    ...
    def kACIfrozenLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kACImaximum (self, *args, **kwargs):
      '''None'''
    ...
    def kACIminimum (self, *args, **kwargs):
      '''None'''
    ...
    def kACInone (self, *args, **kwargs):
      '''None'''
    ...
    def kACIstandard (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class AdsName:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def fromObjectId (self, *args, **kwargs):
      '''
fromObjectId( (AdsName)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void fromObjectId(class AdsName {lvalue},class PyDbObjectId)'''
    ...
    def toObjectId (self, *args, **kwargs):
      '''
toObjectId( (AdsName)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId toObjectId(class AdsName {lvalue})'''
    ...

class AlignedDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs):
      '''
dimLinePoint( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbAlignedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def jogSymbolOn (self, *args, **kwargs):
      '''
jogSymbolOn( (AlignedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbAlignedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs):
      '''
jogSymbolPosition( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbAlignedDimension {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def oblique (self, *args, **kwargs):
      '''
oblique( (AlignedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbAlignedDimension {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs):
      '''
setDimLinePoint( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLinePoint(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs):
      '''
setJogSymbolOn( (AlignedDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolOn(class PyDbAlignedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs):
      '''
setJogSymbolPosition( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolPosition(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs):
      '''
setOblique( (AlignedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbAlignedDimension {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXLine1Point (self, *args, **kwargs):
      '''
setXLine1Point( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs):
      '''
setXLine2Point( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xLine1Point (self, *args, **kwargs):
      '''
xLine1Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbAlignedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs):
      '''
xLine2Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbAlignedDimension {lvalue})'''
    ...

class AnnoType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBlockRef (self, *args, **kwargs):
      '''None'''
    ...
    def kFcf (self, *args, **kwargs):
      '''None'''
    ...
    def kMText (self, *args, **kwargs):
      '''None'''
    ...
    def kNoAnno (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Arc:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double,double,double)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (Arc)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbArc {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endAngle (self, *args, **kwargs):
      '''
endAngle( (Arc)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbArc {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Arc)arg1) -> float :

    C++ signature :
        double length(class PyDbArc {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Arc)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbArc {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def radius (self, *args, **kwargs):
      '''
radius( (Arc)arg1) -> float :

    C++ signature :
        double radius(class PyDbArc {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (Arc)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbArc {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndAngle (self, *args, **kwargs):
      '''
setEndAngle( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndAngle(class PyDbArc {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Arc)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbArc {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs):
      '''
setRadius( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRadius(class PyDbArc {lvalue},double)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs):
      '''
setStartAngle( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartAngle(class PyDbArc {lvalue},double)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbArc {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def startAngle (self, *args, **kwargs):
      '''
startAngle( (Arc)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbArc {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Arc)arg1) -> float :

    C++ signature :
        double thickness(class PyDbArc {lvalue})'''
    ...
    def totalAngle (self, *args, **kwargs):
      '''
totalAngle( (Arc)arg1) -> float :

    C++ signature :
        double totalAngle(class PyDbArc {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class ArcDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcEndParam (self, *args, **kwargs):
      '''
arcEndParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcEndParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs):
      '''
arcPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDbArcDimension {lvalue})'''
    ...
    def arcStartParam (self, *args, **kwargs):
      '''
arcStartParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcStartParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcSymbolType (self, *args, **kwargs):
      '''
arcSymbolType( (ArcDimension)arg1) -> int :

    C++ signature :
        int arcSymbolType(class PyDbArcDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs):
      '''
centerPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbArcDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasLeader (self, *args, **kwargs):
      '''
hasLeader( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool hasLeader(class PyDbArcDimension {lvalue})'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPartial (self, *args, **kwargs):
      '''
isPartial( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool isPartial(class PyDbArcDimension {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leader1Point (self, *args, **kwargs):
      '''
leader1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader1Point(class PyDbArcDimension {lvalue})'''
    ...
    def leader2Point (self, *args, **kwargs):
      '''
leader2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader2Point(class PyDbArcDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcEndParam (self, *args, **kwargs):
      '''
setArcEndParam( (ArcDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcEndParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcPoint (self, *args, **kwargs):
      '''
setArcPoint( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArcStartParam (self, *args, **kwargs):
      '''
setArcStartParam( (ArcDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcStartParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcSymbolType (self, *args, **kwargs):
      '''
setArcSymbolType( (ArcDimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcSymbolType(class PyDbArcDimension {lvalue},int)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenterPoint (self, *args, **kwargs):
      '''
setCenterPoint( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenterPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setHasLeader (self, *args, **kwargs):
      '''
setHasLeader( (ArcDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHasLeader(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIsPartial (self, *args, **kwargs):
      '''
setIsPartial( (ArcDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsPartial(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeader1Point (self, *args, **kwargs):
      '''
setLeader1Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeader1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLeader2Point (self, *args, **kwargs):
      '''
setLeader2Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeader2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXLine1Point (self, *args, **kwargs):
      '''
setXLine1Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs):
      '''
setXLine2Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xLine1Point (self, *args, **kwargs):
      '''
xLine1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbArcDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs):
      '''
xLine2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbArcDimension {lvalue})'''
    ...

class AttributeDefinition:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def adjustAlignment (self, *args, **kwargs):
      '''
adjustAlignment( (AttributeDefinition)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbAttributeDefinition {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs):
      '''
alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs):
      '''
convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttributeDefinition (self, *args, **kwargs):
      '''
convertIntoMTextAttributeDefinition( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertIntoMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs):
      '''
correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldLength (self, *args, **kwargs):
      '''
fieldLength( (AttributeDefinition)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs):
      '''
getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getMTextAttributeDefinition (self, *args, **kwargs):
      '''
getMTextAttributeDefinition( (AttributeDefinition)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def height (self, *args, **kwargs):
      '''
height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs):
      '''
hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs):
      '''
horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstant (self, *args, **kwargs):
      '''
isConstant( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs):
      '''
isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isInvisible (self, *args, **kwargs):
      '''
isInvisible( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMTextAttributeDefinition (self, *args, **kwargs):
      '''
isMTextAttributeDefinition( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs):
      '''
isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs):
      '''
isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isPreset (self, *args, **kwargs):
      '''
isPreset( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isVerifiable (self, *args, **kwargs):
      '''
isVerifiable( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def lockPositionInBlock (self, *args, **kwargs):
      '''
lockPositionInBlock( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttributeDefinition {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs):
      '''
mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs):
      '''
mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def oblique (self, *args, **kwargs):
      '''
oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def prompt (self, *args, **kwargs):
      '''
prompt( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prompt(class PyDbAttributeDefinition {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs):
      '''
setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstant (self, *args, **kwargs):
      '''
setConstant( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstant(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setFieldLength (self, *args, **kwargs):
      '''
setFieldLength( (AttributeDefinition)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldLength(class PyDbAttributeDefinition {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs):
      '''
setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs):
      '''
setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs):
      '''
setInvisible( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInvisible(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLockPositionInBlock (self, *args, **kwargs):
      '''
setLockPositionInBlock( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLockPositionInBlock(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setMTextAttributeDefinition (self, *args, **kwargs):
      '''
setMTextAttributeDefinition( (AttributeDefinition)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs):
      '''
setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPreset (self, *args, **kwargs):
      '''
setPreset( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreset(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setPrompt (self, *args, **kwargs):
      '''
setPrompt( (AttributeDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrompt(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs):
      '''
setTag( (AttributeDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTag(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs):
      '''
setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > {lvalue})'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerifiable (self, *args, **kwargs):
      '''
setVerifiable( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerifiable(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setVerticalMode (self, *args, **kwargs):
      '''
setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs):
      '''
setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def tag (self, *args, **kwargs):
      '''
tag( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttributeDefinition {lvalue})'''
    ...
    def textString (self, *args, **kwargs):
      '''
textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateMTextAttributeDefinition (self, *args, **kwargs):
      '''
updateMTextAttributeDefinition( (AttributeDefinition)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def verticalMode (self, *args, **kwargs):
      '''
verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs):
      '''
widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class AttributeReference:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def adjustAlignment (self, *args, **kwargs):
      '''
adjustAlignment( (Text)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs):
      '''
alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs):
      '''
convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttribute (self, *args, **kwargs):
      '''
convertIntoMTextAttribute( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertIntoMTextAttribute(class PyDbAttribute {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs):
      '''
correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldLength (self, *args, **kwargs):
      '''
fieldLength( (AttributeReference)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttribute {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs):
      '''
getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getMTextAttribute (self, *args, **kwargs):
      '''
getMTextAttribute( (AttributeReference)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def height (self, *args, **kwargs):
      '''
height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs):
      '''
hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs):
      '''
horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstant (self, *args, **kwargs):
      '''
isConstant( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttribute {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs):
      '''
isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isInvisible (self, *args, **kwargs):
      '''
isInvisible( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttribute {lvalue})'''
    ...
    def isMTextAttribute (self, *args, **kwargs):
      '''
isMTextAttribute( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs):
      '''
isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs):
      '''
isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isPreset (self, *args, **kwargs):
      '''
isPreset( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttribute {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isReallyLocked (self, *args, **kwargs):
      '''
isReallyLocked( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isReallyLocked(class PyDbAttribute {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isVerifiable (self, *args, **kwargs):
      '''
isVerifiable( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttribute {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def lockPositionInBlock (self, *args, **kwargs):
      '''
lockPositionInBlock( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttribute {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs):
      '''
mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs):
      '''
mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def oblique (self, *args, **kwargs):
      '''
oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs):
      '''
setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setAttributeFromBlock (self, *args, **kwargs):
      '''
setAttributeFromBlock( (AttributeReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttributeFromBlock(class PyDbAttribute {lvalue},class AcGeMatrix3d)

setAttributeFromBlock( (AttributeReference)arg1, (AttributeDefinition)arg2, (Matrix3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttributeFromBlock(class PyDbAttribute {lvalue},class PyDbAttributeDefinition,class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setFieldLength (self, *args, **kwargs):
      '''
setFieldLength( (AttributeReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldLength(class PyDbAttribute {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs):
      '''
setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs):
      '''
setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs):
      '''
setInvisible( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInvisible(class PyDbAttribute {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLockPositionInBlock (self, *args, **kwargs):
      '''
setLockPositionInBlock( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLockPositionInBlock(class PyDbAttribute {lvalue},bool)'''
    ...
    def setMTextAttribute (self, *args, **kwargs):
      '''
setMTextAttribute( (AttributeReference)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMTextAttribute(class PyDbAttribute {lvalue},class PyDbMText {lvalue})'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs):
      '''
setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs):
      '''
setTag( (AttributeReference)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTag(class PyDbAttribute {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs):
      '''
setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > {lvalue})'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs):
      '''
setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs):
      '''
setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def tag (self, *args, **kwargs):
      '''
tag( (AttributeReference)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttribute {lvalue})'''
    ...
    def textString (self, *args, **kwargs):
      '''
textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateMTextAttribute (self, *args, **kwargs):
      '''
updateMTextAttribute( (AttributeReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def verticalMode (self, *args, **kwargs):
      '''
verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs):
      '''
widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class BlockBegin:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class BlockEnd:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class BlockReference:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendAttribute (self, *args, **kwargs):
      '''
appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def attributeIds (self, *args, **kwargs):
      '''
attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTableRecord (self, *args, **kwargs):
      '''
blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs):
      '''
explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def geomExtentsBestFit (self, *args, **kwargs):
      '''
geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs):
      '''
nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs):
      '''
nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs):
      '''
scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setBlockTableRecord (self, *args, **kwargs):
      '''
setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs):
      '''
setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (BlockReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (BlockReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (BlockReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs):
      '''
setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs):
      '''
treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class BlockScaling:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAny (self, *args, **kwargs):
      '''None'''
    ...
    def kUniform (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class BlockTable:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def add (self, *args, **kwargs):
      '''
add( (BlockTable)arg1, (BlockTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbBlockTable {lvalue},class PyDbBlockTableRecord)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getAt (self, *args, **kwargs):
      '''
getAt( (BlockTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbBlockTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def has (self, *args, **kwargs):
      '''
has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def recordIds (self, *args, **kwargs):
      '''
recordIds( (BlockTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbBlockTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class BlockTableRecord:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addAnnoScalestoBlkRefs (self, *args, **kwargs):
      '''
addAnnoScalestoBlkRefs( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addAnnoScalestoBlkRefs(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendAcDbEntity (self, *args, **kwargs):
      '''
appendAcDbEntity( (BlockTableRecord)arg1, (Entity)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAcDbEntity(class PyDbBlockTableRecord {lvalue},class PyDbEntity)'''
    ...
    def aslist (self, *args, **kwargs):
      '''
aslist( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list aslist(class PyDbBlockTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def assumeOwnershipOf (self, *args, **kwargs):
      '''
assumeOwnershipOf( (BlockTableRecord)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus assumeOwnershipOf(class PyDbBlockTableRecord {lvalue},class boost::python::list)'''
    ...
    def blockInsertUnits (self, *args, **kwargs):
      '''
blockInsertUnits( (BlockTableRecord)arg1) -> UnitsValue :

    C++ signature :
        enum AcDb::UnitsValue blockInsertUnits(class PyDbBlockTableRecord {lvalue})'''
    ...
    def blockScaling (self, *args, **kwargs):
      '''
blockScaling( (BlockTableRecord)arg1) -> BlockScaling :

    C++ signature :
        enum AcDbBlockTableRecord::BlockScaling blockScaling(class PyDbBlockTableRecord {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def comments (self, *args, **kwargs):
      '''
comments( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > comments(class PyDbBlockTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def explodable (self, *args, **kwargs):
      '''
explodable( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool explodable(class PyDbBlockTableRecord {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getBlockReferenceIds (self, *args, **kwargs):
      '''
getBlockReferenceIds( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> list :

    C++ signature :
        class boost::python::list getBlockReferenceIds(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def getErasedBlockReferenceIds (self, *args, **kwargs):
      '''
getErasedBlockReferenceIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list getErasedBlockReferenceIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getLayoutId (self, *args, **kwargs):
      '''
getLayoutId( (BlockTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayoutId(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasAttributeDefinitions (self, *args, **kwargs):
      '''
hasAttributeDefinitions( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAttributeDefinitions(class PyDbBlockTableRecord {lvalue})'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isAnonymous (self, *args, **kwargs):
      '''
isAnonymous( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isAnonymous(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs):
      '''
isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isFromExternalReference (self, *args, **kwargs):
      '''
isFromExternalReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromExternalReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isFromOverlayReference (self, *args, **kwargs):
      '''
isFromOverlayReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromOverlayReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isLayout (self, *args, **kwargs):
      '''
isLayout( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isLayout(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs):
      '''
isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUnloaded (self, *args, **kwargs):
      '''
isUnloaded( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isUnloaded(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def objectIds (self, *args, **kwargs):
      '''
objectIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list objectIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def openBlockBegin (self, *args, **kwargs):
      '''
openBlockBegin( (BlockTableRecord)arg1, (BlockBegin)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openBlockBegin(class PyDbBlockTableRecord {lvalue},class PyDbBlockBegin {lvalue},enum AcDb::OpenMode)'''
    ...
    def openBlockEnd (self, *args, **kwargs):
      '''
openBlockEnd( (BlockTableRecord)arg1, (BlockEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openBlockEnd(class PyDbBlockTableRecord {lvalue},class PyDbBlockEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def origin (self, *args, **kwargs):
      '''
origin( (BlockTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbBlockTableRecord {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def pathName (self, *args, **kwargs):
      '''
pathName( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > pathName(class PyDbBlockTableRecord {lvalue})'''
    ...
    def postProcessAnnotativeBTR (self, *args, **kwargs):
      '''
postProcessAnnotativeBTR( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> int :

    C++ signature :
        int postProcessAnnotativeBTR(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setBlockInsertUnits (self, *args, **kwargs):
      '''
setBlockInsertUnits( (BlockTableRecord)arg1, (UnitsValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockInsertUnits(class PyDbBlockTableRecord {lvalue},enum AcDb::UnitsValue)'''
    ...
    def setBlockScaling (self, *args, **kwargs):
      '''
setBlockScaling( (BlockTableRecord)arg1, (BlockScaling)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScaling(class PyDbBlockTableRecord {lvalue},enum AcDbBlockTableRecord::BlockScaling)'''
    ...
    def setComments (self, *args, **kwargs):
      '''
setComments( (BlockTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setComments(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setExplodable (self, *args, **kwargs):
      '''
setExplodable( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExplodable(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setIsFromOverlayReference (self, *args, **kwargs):
      '''
setIsFromOverlayReference( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsFromOverlayReference(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setIsUnloaded (self, *args, **kwargs):
      '''
setIsUnloaded( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsUnloaded(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setLayoutId (self, *args, **kwargs):
      '''
setLayoutId( (BlockTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayoutId(class PyDbBlockTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOrigin (self, *args, **kwargs):
      '''
setOrigin( (BlockTableRecord)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrigin(class PyDbBlockTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPathName (self, *args, **kwargs):
      '''
setPathName( (BlockTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPathName(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xrefDatabase (self, *args, **kwargs):
      '''
xrefDatabase( (BlockTableRecord)arg1, (bool)arg2) -> Database :

    C++ signature :
        class PyDbDatabase xrefDatabase(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def xrefStatus (self, *args, **kwargs):
      '''
xrefStatus( (BlockTableRecord)arg1) -> XrefStatus :

    C++ signature :
        enum AcDb::XrefStatus xrefStatus(class PyDbBlockTableRecord {lvalue})'''
    ...

class Cell:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def column (self, *args, **kwargs):
      '''None'''
    ...
    def row (self, *args, **kwargs):
      '''None'''
    ...

class CellAlignment:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBottomCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs):
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentLayout:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCellContentLayoutStackedHorizontal (self, *args, **kwargs):
      '''None'''
    ...
    def kCellContentLayoutStackedVertical (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCellContentTypeBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kCellContentTypeField (self, *args, **kwargs):
      '''None'''
    ...
    def kCellContentTypeUnknown (self, *args, **kwargs):
      '''None'''
    ...
    def kCellContentTypeValue (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellEdgeMask:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBottomMask (self, *args, **kwargs):
      '''None'''
    ...
    def kLeftMask (self, *args, **kwargs):
      '''None'''
    ...
    def kRightMask (self, *args, **kwargs):
      '''None'''
    ...
    def kTopMask (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellMargin:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCellMarginBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kCellMarginHorzSpacing (self, *args, **kwargs):
      '''None'''
    ...
    def kCellMarginLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kCellMarginRight (self, *args, **kwargs):
      '''None'''
    ...
    def kCellMarginTop (self, *args, **kwargs):
      '''None'''
    ...
    def kCellMarginVertSpacing (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellProperty:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCellPropAlignment (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropAll (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropAutoScale (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropBackgroundColor (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropBitProperties (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropContent (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropContentColor (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropContentLayout (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropDataFormat (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropDataType (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropDataTypeAndFormat (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropFlowDirBtoT (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropInvalid (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginHorzSpacing (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginRight (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginTop (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMarginVertSpacing (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropMergeAll (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropRotation (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropScale (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropTextHeight (self, *args, **kwargs):
      '''None'''
    ...
    def kCellPropTextStyle (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellRange:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def bottomRow (self, *args, **kwargs):
      '''None'''
    ...
    def leftColumn (self, *args, **kwargs):
      '''None'''
    ...
    def rightColumn (self, *args, **kwargs):
      '''None'''
    ...
    def topRow (self, *args, **kwargs):
      '''None'''
    ...

class CellState:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAllCellStates (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateContentLocked (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateContentModifiedAfterUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateContentReadOnly (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateFormatLocked (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateFormatModifiedAfterUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateFormatReadOnly (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateLinked (self, *args, **kwargs):
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBlockCell (self, *args, **kwargs):
      '''None'''
    ...
    def kMultipleContentCell (self, *args, **kwargs):
      '''None'''
    ...
    def kTextCell (self, *args, **kwargs):
      '''None'''
    ...
    def kUnknownCell (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CenterMarkType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kLine (self, *args, **kwargs):
      '''None'''
    ...
    def kMark (self, *args, **kwargs):
      '''None'''
    ...
    def kNone (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Circle:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (Circle)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbCircle {lvalue})'''
    ...
    def circumference (self, *args, **kwargs):
      '''
circumference( (Circle)arg1) -> float :

    C++ signature :
        double circumference(class PyDbCircle {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def diameter (self, *args, **kwargs):
      '''
diameter( (Circle)arg1) -> float :

    C++ signature :
        double diameter(class PyDbCircle {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Circle)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbCircle {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def radius (self, *args, **kwargs):
      '''
radius( (Circle)arg1) -> float :

    C++ signature :
        double radius(class PyDbCircle {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (Circle)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbCircle {lvalue},class AcGePoint3d)'''
    ...
    def setCircumference (self, *args, **kwargs):
      '''
setCircumference( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCircumference(class PyDbCircle {lvalue},double)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDiameter (self, *args, **kwargs):
      '''
setDiameter( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDiameter(class PyDbCircle {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Circle)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbCircle {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs):
      '''
setRadius( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRadius(class PyDbCircle {lvalue},double)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbCircle {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Circle)arg1) -> float :

    C++ signature :
        double thickness(class PyDbCircle {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class CollisionType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCollisionTypeNone (self, *args, **kwargs):
      '''None'''
    ...
    def kCollisionTypeSolid (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Color:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def blue (self, *args, **kwargs):
      '''
blue( (Color)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs):
      '''
getCOLORREF( (Color)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs):
      '''
getRGB( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs):
      '''
getRGBM( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmColor {lvalue})'''
    ...
    def green (self, *args, **kwargs):
      '''
green( (Color)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs):
      '''
isByACI( (Color)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs):
      '''
isByBlock( (Color)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs):
      '''
isByColor( (Color)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs):
      '''
isByLayer( (Color)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs):
      '''
isByPen( (Color)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs):
      '''
isForeground( (Color)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs):
      '''
isNone( (Color)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmColor {lvalue})'''
    ...
    def red (self, *args, **kwargs):
      '''
red( (Color)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs):
      '''
setByBlock( (Color)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs):
      '''
setByLayer( (Color)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs):
      '''
setCOLORREF( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmColor {lvalue},unsigned int)'''
    ...
    def setForeground (self, *args, **kwargs):
      '''
setForeground( (Color)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmColor {lvalue})'''
    ...
    def setLayerOff (self, *args, **kwargs):
      '''
setLayerOff( (Color)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs):
      '''
setNone( (Color)arg1) -> None :

    C++ signature :
        void setNone(class AcCmColor {lvalue})'''
    ...
    def setRGB (self, *args, **kwargs):
      '''
setRGB( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned int)

setRGB( (Color)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs):
      '''
setRGBM( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmColor {lvalue},unsigned int)'''
    ...

class ColorMethod:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kByACI (self, *args, **kwargs):
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kByColor (self, *args, **kwargs):
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kByPen (self, *args, **kwargs):
      '''None'''
    ...
    def kForeground (self, *args, **kwargs):
      '''None'''
    ...
    def kLayerFrozen (self, *args, **kwargs):
      '''None'''
    ...
    def kLayerOff (self, *args, **kwargs):
      '''None'''
    ...
    def kNone (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Core:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def entDel (self, *args, **kwargs):
      '''
entDel( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entDel(class PyDbObjectId)'''
    ...
    def entGet (self, *args, **kwargs):
      '''
entGet( (ObjectId)arg1) -> list :

    C++ signature :
        class boost::python::list entGet(class PyDbObjectId)'''
    ...
    def entLast (self, *args, **kwargs):
      '''
entLast() -> ObjectId :

    C++ signature :
        class PyDbObjectId entLast()'''
    ...
    def entMod (self, *args, **kwargs):
      '''
entMod( (list)arg1) -> bool :

    C++ signature :
        bool entMod(class boost::python::list)'''
    ...
    def entNext (self, *args, **kwargs):
      '''
entNext( (ObjectId)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId entNext(class PyDbObjectId)'''
    ...
    def entUpd (self, *args, **kwargs):
      '''
entUpd( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entUpd(class PyDbObjectId)'''
    ...
    def openDbEntity (self, *args, **kwargs):
      '''
openDbEntity( (ObjectId)arg1, (OpenMode)arg2) -> Entity :

    C++ signature :
        class PyDbEntity openDbEntity(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def openDbObject (self, *args, **kwargs):
      '''
openDbObject( (ObjectId)arg1, (OpenMode)arg2) -> DbObject :

    C++ signature :
        class PyDbObject openDbObject(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def regApp (self, *args, **kwargs):
      '''
regApp( (str)arg1) -> bool :

    C++ signature :
        bool regApp(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def updateDimension (self, *args, **kwargs):
      '''
updateDimension( (ObjectId)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDimension(class PyDbObjectId)'''
    ...

class Curve:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Database:
    def  setLimmin (self, *args, **kwargs):
      '''
 setLimmin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus  setLimmin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def UCSTableId (self, *args, **kwargs):
      '''
UCSTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId UCSTableId(class PyDbDatabase {lvalue})'''
    ...
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,bool)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def angbase (self, *args, **kwargs):
      '''
angbase( (Database)arg1) -> float :

    C++ signature :
        double angbase(class PyDbDatabase {lvalue})'''
    ...
    def angdir (self, *args, **kwargs):
      '''
angdir( (Database)arg1) -> bool :

    C++ signature :
        bool angdir(class PyDbDatabase {lvalue})'''
    ...
    def annoAllVisible (self, *args, **kwargs):
      '''
annoAllVisible( (Database)arg1) -> bool :

    C++ signature :
        bool annoAllVisible(class PyDbDatabase {lvalue})'''
    ...
    def annotativeDwg (self, *args, **kwargs):
      '''
annotativeDwg( (Database)arg1) -> bool :

    C++ signature :
        bool annotativeDwg(class PyDbDatabase {lvalue})'''
    ...
    def approxNumObjects (self, *args, **kwargs):
      '''
approxNumObjects( (Database)arg1) -> int :

    C++ signature :
        int approxNumObjects(class PyDbDatabase {lvalue})'''
    ...
    def attmode (self, *args, **kwargs):
      '''
attmode( (Database)arg1) -> int :

    C++ signature :
        short attmode(class PyDbDatabase {lvalue})'''
    ...
    def aunits (self, *args, **kwargs):
      '''
aunits( (Database)arg1) -> int :

    C++ signature :
        short aunits(class PyDbDatabase {lvalue})'''
    ...
    def auprec (self, *args, **kwargs):
      '''
auprec( (Database)arg1) -> int :

    C++ signature :
        short auprec(class PyDbDatabase {lvalue})'''
    ...
    def blipmode (self, *args, **kwargs):
      '''
blipmode( (Database)arg1) -> bool :

    C++ signature :
        bool blipmode(class PyDbDatabase {lvalue})'''
    ...
    def blockTableId (self, *args, **kwargs):
      '''
blockTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableId(class PyDbDatabase {lvalue})'''
    ...
    def byBlockLinetype (self, *args, **kwargs):
      '''
byBlockLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byBlockLinetype(class PyDbDatabase {lvalue})'''
    ...
    def byBlockMaterial (self, *args, **kwargs):
      '''
byBlockMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byBlockMaterial(class PyDbDatabase {lvalue})'''
    ...
    def byLayerLinetype (self, *args, **kwargs):
      '''
byLayerLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byLayerLinetype(class PyDbDatabase {lvalue})'''
    ...
    def byLayerMaterial (self, *args, **kwargs):
      '''
byLayerMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byLayerMaterial(class PyDbDatabase {lvalue})'''
    ...
    def cDynDisplayMode (self, *args, **kwargs):
      '''
cDynDisplayMode( (Database)arg1) -> int :

    C++ signature :
        short cDynDisplayMode(class PyDbDatabase {lvalue})'''
    ...
    def cameraDisplay (self, *args, **kwargs):
      '''
cameraDisplay( (Database)arg1) -> bool :

    C++ signature :
        bool cameraDisplay(class PyDbDatabase {lvalue})'''
    ...
    def cameraHeight (self, *args, **kwargs):
      '''
cameraHeight( (Database)arg1) -> float :

    C++ signature :
        double cameraHeight(class PyDbDatabase {lvalue})'''
    ...
    def celtscale (self, *args, **kwargs):
      '''
celtscale( (Database)arg1) -> float :

    C++ signature :
        double celtscale(class PyDbDatabase {lvalue})'''
    ...
    def celtype (self, *args, **kwargs):
      '''
celtype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId celtype(class PyDbDatabase {lvalue})'''
    ...
    def celweight (self, *args, **kwargs):
      '''
celweight( (Database)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight celweight(class PyDbDatabase {lvalue})'''
    ...
    def chamfera (self, *args, **kwargs):
      '''
chamfera( (Database)arg1) -> float :

    C++ signature :
        double chamfera(class PyDbDatabase {lvalue})'''
    ...
    def chamferb (self, *args, **kwargs):
      '''
chamferb( (Database)arg1) -> float :

    C++ signature :
        double chamferb(class PyDbDatabase {lvalue})'''
    ...
    def chamferc (self, *args, **kwargs):
      '''
chamferc( (Database)arg1) -> float :

    C++ signature :
        double chamferc(class PyDbDatabase {lvalue})'''
    ...
    def chamferd (self, *args, **kwargs):
      '''
chamferd( (Database)arg1) -> float :

    C++ signature :
        double chamferd(class PyDbDatabase {lvalue})'''
    ...
    def classDxfName (self, *args, **kwargs):
      '''
classDxfName( (Database)arg1, (RxClass)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > classDxfName(class PyDbDatabase {lvalue},class PyRxClass)'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clayer (self, *args, **kwargs):
      '''
clayer( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId clayer(class PyDbDatabase {lvalue})'''
    ...
    def closeInput (self, *args, **kwargs):
      '''
closeInput( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus closeInput(class PyDbDatabase {lvalue},bool)'''
    ...
    def cmaterial (self, *args, **kwargs):
      '''
cmaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId cmaterial(class PyDbDatabase {lvalue})'''
    ...
    def cmljust (self, *args, **kwargs):
      '''
cmljust( (Database)arg1) -> int :

    C++ signature :
        short cmljust(class PyDbDatabase {lvalue})'''
    ...
    def cmlscale (self, *args, **kwargs):
      '''
cmlscale( (Database)arg1) -> float :

    C++ signature :
        double cmlscale(class PyDbDatabase {lvalue})'''
    ...
    def cmlstyleID (self, *args, **kwargs):
      '''
cmlstyleID( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId cmlstyleID(class PyDbDatabase {lvalue})'''
    ...
    def colorDictionaryId (self, *args, **kwargs):
      '''
colorDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId colorDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def continuousLinetype (self, *args, **kwargs):
      '''
continuousLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId continuousLinetype(class PyDbDatabase {lvalue})'''
    ...
    def coords (self, *args, **kwargs):
      '''
coords( (Database)arg1) -> int :

    C++ signature :
        short coords(class PyDbDatabase {lvalue})'''
    ...
    def countEmptyObjects (self, *args, **kwargs):
      '''
countEmptyObjects( (Database)arg1, (int)arg2) -> int :

    C++ signature :
        unsigned int countEmptyObjects(class PyDbDatabase {lvalue},unsigned int)'''
    ...
    def currentSpaceId (self, *args, **kwargs):
      '''
currentSpaceId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId currentSpaceId(class PyDbDatabase {lvalue})'''
    ...
    def detailViewStyle (self, *args, **kwargs):
      '''
detailViewStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId detailViewStyle(class PyDbDatabase {lvalue})'''
    ...
    def detailViewStyleDictionaryId (self, *args, **kwargs):
      '''
detailViewStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId detailViewStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def dimAssoc (self, *args, **kwargs):
      '''
dimAssoc( (Database)arg1) -> int :

    C++ signature :
        unsigned char dimAssoc(class PyDbDatabase {lvalue})'''
    ...
    def dimStyleTableId (self, *args, **kwargs):
      '''
dimStyleTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimStyleTableId(class PyDbDatabase {lvalue})'''
    ...
    def dimapost (self, *args, **kwargs):
      '''
dimapost( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimapost(class PyDbDatabase {lvalue})'''
    ...
    def dimaso (self, *args, **kwargs):
      '''
dimaso( (Database)arg1) -> bool :

    C++ signature :
        bool dimaso(class PyDbDatabase {lvalue})'''
    ...
    def dimblk (self, *args, **kwargs):
      '''
dimblk( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk(class PyDbDatabase {lvalue})'''
    ...
    def dimblk1 (self, *args, **kwargs):
      '''
dimblk1( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk1(class PyDbDatabase {lvalue})'''
    ...
    def dimblk2 (self, *args, **kwargs):
      '''
dimblk2( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk2(class PyDbDatabase {lvalue})'''
    ...
    def dimfit (self, *args, **kwargs):
      '''
dimfit( (Database)arg1) -> int :

    C++ signature :
        int dimfit(class PyDbDatabase {lvalue})'''
    ...
    def dimpost (self, *args, **kwargs):
      '''
dimpost( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimpost(class PyDbDatabase {lvalue})'''
    ...
    def dimsho (self, *args, **kwargs):
      '''
dimsho( (Database)arg1) -> bool :

    C++ signature :
        bool dimsho(class PyDbDatabase {lvalue})'''
    ...
    def dimstyle (self, *args, **kwargs):
      '''
dimstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimstyle(class PyDbDatabase {lvalue})'''
    ...
    def dimunit (self, *args, **kwargs):
      '''
dimunit( (Database)arg1) -> int :

    C++ signature :
        int dimunit(class PyDbDatabase {lvalue})'''
    ...
    def disablePartialOpen (self, *args, **kwargs):
      '''
disablePartialOpen( (Database)arg1) -> None :

    C++ signature :
        void disablePartialOpen(class PyDbDatabase {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (Database)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbDatabase {lvalue},bool)'''
    ...
    def dispSilh (self, *args, **kwargs):
      '''
dispSilh( (Database)arg1) -> bool :

    C++ signature :
        bool dispSilh(class PyDbDatabase {lvalue})'''
    ...
    def dragVisStyle (self, *args, **kwargs):
      '''
dragVisStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dragVisStyle(class PyDbDatabase {lvalue})'''
    ...
    def dragmode (self, *args, **kwargs):
      '''
dragmode( (Database)arg1) -> int :

    C++ signature :
        short dragmode(class PyDbDatabase {lvalue})'''
    ...
    def drawOrderCtl (self, *args, **kwargs):
      '''
drawOrderCtl( (Database)arg1) -> int :

    C++ signature :
        unsigned char drawOrderCtl(class PyDbDatabase {lvalue})'''
    ...
    def dwfframe (self, *args, **kwargs):
      '''
dwfframe( (Database)arg1) -> int :

    C++ signature :
        unsigned char dwfframe(class PyDbDatabase {lvalue})'''
    ...
    def dwgFileWasSavedByAutodeskSoftware (self, *args, **kwargs):
      '''
dwgFileWasSavedByAutodeskSoftware( (Database)arg1) -> bool :

    C++ signature :
        bool dwgFileWasSavedByAutodeskSoftware(class PyDbDatabase {lvalue})'''
    ...
    def dxfIn (self, *args, **kwargs):
      '''
dxfIn( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus dxfIn(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dxfOut (self, *args, **kwargs):
      '''
dxfOut( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus dxfOut(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Database)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDatabase {lvalue})'''
    ...
    def eraseEmptyObjects (self, *args, **kwargs):
      '''
eraseEmptyObjects( (Database)arg1, (int)arg2) -> int :

    C++ signature :
        unsigned int eraseEmptyObjects(class PyDbDatabase {lvalue},unsigned int)'''
    ...
    def extmax (self, *args, **kwargs):
      '''
extmax( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d extmax(class PyDbDatabase {lvalue})'''
    ...
    def extmin (self, *args, **kwargs):
      '''
extmin( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d extmin(class PyDbDatabase {lvalue})'''
    ...
    def facetres (self, *args, **kwargs):
      '''
facetres( (Database)arg1) -> float :

    C++ signature :
        double facetres(class PyDbDatabase {lvalue})'''
    ...
    def filletrad (self, *args, **kwargs):
      '''
filletrad( (Database)arg1) -> float :

    C++ signature :
        double filletrad(class PyDbDatabase {lvalue})'''
    ...
    def fillmode (self, *args, **kwargs):
      '''
fillmode( (Database)arg1) -> bool :

    C++ signature :
        bool fillmode(class PyDbDatabase {lvalue})'''
    ...
    def forceWblockDatabaseCopy (self, *args, **kwargs):
      '''
forceWblockDatabaseCopy( (Database)arg1) -> None :

    C++ signature :
        void forceWblockDatabaseCopy(class PyDbDatabase {lvalue})'''
    ...
    def geoCoordinateSystemId (self, *args, **kwargs):
      '''
geoCoordinateSystemId( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > geoCoordinateSystemId(class PyDbDatabase {lvalue})'''
    ...
    def geoMarkerVisibility (self, *args, **kwargs):
      '''
geoMarkerVisibility( (Database)arg1) -> bool :

    C++ signature :
        bool geoMarkerVisibility(class PyDbDatabase {lvalue})'''
    ...
    def get3dDwfPrec (self, *args, **kwargs):
      '''
get3dDwfPrec( (Database)arg1) -> float :

    C++ signature :
        double get3dDwfPrec(class PyDbDatabase {lvalue})'''
    ...
    def getCePlotStyleNameId (self, *args, **kwargs):
      '''
getCePlotStyleNameId( (Database)arg1, (ObjectId)arg2) -> PlotStyleNameType :

    C++ signature :
        enum AcDb::PlotStyleNameType getCePlotStyleNameId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getDimstyleParentId (self, *args, **kwargs):
      '''
getDimstyleParentId( (Database)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDimstyleParentId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getFilename (self, *args, **kwargs):
      '''
getFilename( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFilename(class PyDbDatabase {lvalue})'''
    ...
    def getNearestLineWeight (self, *args, **kwargs):
      '''
getNearestLineWeight( (int)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getNearestLineWeight(int)'''
    ...
    def getViewportArray (self, *args, **kwargs):
      '''
getViewportArray( (Database)arg1) -> list :

    C++ signature :
        class boost::python::list getViewportArray(class PyDbDatabase {lvalue})'''
    ...
    def getVisualStyleList (self, *args, **kwargs):
      '''
getVisualStyleList( (Database)arg1) -> list :

    C++ signature :
        class boost::python::list getVisualStyleList(class PyDbDatabase {lvalue})'''
    ...
    def globalMaterial (self, *args, **kwargs):
      '''
globalMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId globalMaterial(class PyDbDatabase {lvalue})'''
    ...
    def groupDictionaryId (self, *args, **kwargs):
      '''
groupDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId groupDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def haloGap (self, *args, **kwargs):
      '''
haloGap( (Database)arg1) -> int :

    C++ signature :
        unsigned char haloGap(class PyDbDatabase {lvalue})'''
    ...
    def hasClass (self, *args, **kwargs):
      '''
hasClass( (Database)arg1, (RxClass)arg2) -> bool :

    C++ signature :
        bool hasClass(class PyDbDatabase {lvalue},class PyRxClass)'''
    ...
    def hideText (self, *args, **kwargs):
      '''
hideText( (Database)arg1) -> int :

    C++ signature :
        unsigned char hideText(class PyDbDatabase {lvalue})'''
    ...
    def hpInherit (self, *args, **kwargs):
      '''
hpInherit( (Database)arg1) -> bool :

    C++ signature :
        bool hpInherit(class PyDbDatabase {lvalue})'''
    ...
    def hpOrigin (self, *args, **kwargs):
      '''
hpOrigin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d hpOrigin(class PyDbDatabase {lvalue})

hpOrigin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d hpOrigin(class PyDbDatabase {lvalue})

hpOrigin( (Database)arg1) -> int :

    C++ signature :
        unsigned char hpOrigin(class PyDbDatabase {lvalue})'''
    ...
    def insert (self, *args, **kwargs):
      '''
insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (Database)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (Database)arg5, (bool)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (Matrix3d)arg2, (Database)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class AcGeMatrix3d,class PyDbDatabase {lvalue},bool)'''
    ...
    def insunits (self, *args, **kwargs):
      '''
insunits( (Database)arg1) -> UnitsValue :

    C++ signature :
        enum AcDb::UnitsValue insunits(class PyDbDatabase {lvalue})'''
    ...
    def interfereVpVisStyle (self, *args, **kwargs):
      '''
interfereVpVisStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId interfereVpVisStyle(class PyDbDatabase {lvalue})'''
    ...
    def intersectColor (self, *args, **kwargs):
      '''
intersectColor( (Database)arg1) -> int :

    C++ signature :
        unsigned short intersectColor(class PyDbDatabase {lvalue})'''
    ...
    def intersectDisplay (self, *args, **kwargs):
      '''
intersectDisplay( (Database)arg1) -> int :

    C++ signature :
        unsigned char intersectDisplay(class PyDbDatabase {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isAppRegistered (self, *args, **kwargs):
      '''
isAppRegistered( (Database)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isAppRegistered(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBeingDestroyed (self, *args, **kwargs):
      '''
isBeingDestroyed( (Database)arg1) -> bool :

    C++ signature :
        bool isBeingDestroyed(class PyDbDatabase {lvalue})'''
    ...
    def isEMR (self, *args, **kwargs):
      '''
isEMR( (Database)arg1) -> bool :

    C++ signature :
        bool isEMR(class PyDbDatabase {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isObjectNonPersistent (self, *args, **kwargs):
      '''
isObjectNonPersistent( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isObjectNonPersistent(class PyDbObjectId)'''
    ...
    def isPartiallyOpened (self, *args, **kwargs):
      '''
isPartiallyOpened( (Database)arg1) -> bool :

    C++ signature :
        bool isPartiallyOpened(class PyDbDatabase {lvalue})'''
    ...
    def isPucsOrthographic (self, *args, **kwargs):
      '''
isPucsOrthographic( (Database)arg1, (OrthographicView)arg2) -> bool :

    C++ signature :
        bool isPucsOrthographic(class PyDbDatabase {lvalue},enum AcDb::OrthographicView {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs):
      '''
isUcsOrthographic( (Database)arg1, (OrthographicView)arg2) -> bool :

    C++ signature :
        bool isUcsOrthographic(class PyDbDatabase {lvalue},enum AcDb::OrthographicView {lvalue})'''
    ...
    def isValidLineWeight (self, *args, **kwargs):
      '''
isValidLineWeight( (int)arg1) -> bool :

    C++ signature :
        bool isValidLineWeight(int)'''
    ...
    def isolines (self, *args, **kwargs):
      '''
isolines( (Database)arg1) -> int :

    C++ signature :
        short isolines(class PyDbDatabase {lvalue})'''
    ...
    def joinStyle (self, *args, **kwargs):
      '''
joinStyle( (Database)arg1) -> JoinStyle :

    C++ signature :
        enum AcDb::JoinStyle joinStyle(class PyDbDatabase {lvalue})'''
    ...
    def lastSavedAsMaintenanceVersion (self, *args, **kwargs):
      '''
lastSavedAsMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int lastSavedAsMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def lastSavedAsVersion (self, *args, **kwargs):
      '''
lastSavedAsVersion( (Database)arg1) -> int :

    C++ signature :
        int lastSavedAsVersion(class PyDbDatabase {lvalue})'''
    ...
    def latitude (self, *args, **kwargs):
      '''
latitude( (Database)arg1) -> float :

    C++ signature :
        double latitude(class PyDbDatabase {lvalue})'''
    ...
    def layerEval (self, *args, **kwargs):
      '''
layerEval( (Database)arg1) -> int :

    C++ signature :
        unsigned char layerEval(class PyDbDatabase {lvalue})'''
    ...
    def layerNotify (self, *args, **kwargs):
      '''
layerNotify( (Database)arg1) -> int :

    C++ signature :
        short layerNotify(class PyDbDatabase {lvalue})'''
    ...
    def layerTableId (self, *args, **kwargs):
      '''
layerTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerTableId(class PyDbDatabase {lvalue})'''
    ...
    def layerZero (self, *args, **kwargs):
      '''
layerZero( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerZero(class PyDbDatabase {lvalue})'''
    ...
    def layoutDictionaryId (self, *args, **kwargs):
      '''
layoutDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layoutDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def lensLength (self, *args, **kwargs):
      '''
lensLength( (Database)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbDatabase {lvalue})'''
    ...
    def lightGlyphDisplay (self, *args, **kwargs):
      '''
lightGlyphDisplay( (Database)arg1) -> int :

    C++ signature :
        unsigned char lightGlyphDisplay(class PyDbDatabase {lvalue})'''
    ...
    def lightingUnits (self, *args, **kwargs):
      '''
lightingUnits( (Database)arg1) -> int :

    C++ signature :
        unsigned char lightingUnits(class PyDbDatabase {lvalue})'''
    ...
    def lightsInBlocks (self, *args, **kwargs):
      '''
lightsInBlocks( (Database)arg1) -> bool :

    C++ signature :
        bool lightsInBlocks(class PyDbDatabase {lvalue})'''
    ...
    def limcheck (self, *args, **kwargs):
      '''
limcheck( (Database)arg1) -> bool :

    C++ signature :
        bool limcheck(class PyDbDatabase {lvalue})'''
    ...
    def limmax (self, *args, **kwargs):
      '''
limmax( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d limmax(class PyDbDatabase {lvalue})'''
    ...
    def limmin (self, *args, **kwargs):
      '''
limmin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d limmin(class PyDbDatabase {lvalue})'''
    ...
    def lineWeightDisplay (self, *args, **kwargs):
      '''
lineWeightDisplay( (Database)arg1) -> bool :

    C++ signature :
        bool lineWeightDisplay(class PyDbDatabase {lvalue})'''
    ...
    def linetypeTableId (self, *args, **kwargs):
      '''
linetypeTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeTableId(class PyDbDatabase {lvalue})'''
    ...
    def loadLineTypeFile (self, *args, **kwargs):
      '''
loadLineTypeFile( (Database)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus loadLineTypeFile(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def loftAng1 (self, *args, **kwargs):
      '''
loftAng1( (Database)arg1) -> float :

    C++ signature :
        double loftAng1(class PyDbDatabase {lvalue})'''
    ...
    def loftAng2 (self, *args, **kwargs):
      '''
loftAng2( (Database)arg1) -> float :

    C++ signature :
        double loftAng2(class PyDbDatabase {lvalue})'''
    ...
    def loftMag1 (self, *args, **kwargs):
      '''
loftMag1( (Database)arg1) -> float :

    C++ signature :
        double loftMag1(class PyDbDatabase {lvalue})'''
    ...
    def loftMag2 (self, *args, **kwargs):
      '''
loftMag2( (Database)arg1) -> float :

    C++ signature :
        double loftMag2(class PyDbDatabase {lvalue})'''
    ...
    def loftNormals (self, *args, **kwargs):
      '''
loftNormals( (Database)arg1) -> int :

    C++ signature :
        unsigned char loftNormals(class PyDbDatabase {lvalue})'''
    ...
    def loftParam (self, *args, **kwargs):
      '''
loftParam( (Database)arg1) -> int :

    C++ signature :
        unsigned short loftParam(class PyDbDatabase {lvalue})'''
    ...
    def longitude (self, *args, **kwargs):
      '''
longitude( (Database)arg1) -> float :

    C++ signature :
        double longitude(class PyDbDatabase {lvalue})'''
    ...
    def ltscale (self, *args, **kwargs):
      '''
ltscale( (Database)arg1) -> float :

    C++ signature :
        double ltscale(class PyDbDatabase {lvalue})'''
    ...
    def lunits (self, *args, **kwargs):
      '''
lunits( (Database)arg1) -> int :

    C++ signature :
        short lunits(class PyDbDatabase {lvalue})'''
    ...
    def luprec (self, *args, **kwargs):
      '''
luprec( (Database)arg1) -> int :

    C++ signature :
        short luprec(class PyDbDatabase {lvalue})'''
    ...
    def mLStyleDictionaryId (self, *args, **kwargs):
      '''
mLStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mLStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def maintenanceReleaseVersion (self, *args, **kwargs):
      '''
maintenanceReleaseVersion( (Database)arg1) -> int :

    C++ signature :
        int maintenanceReleaseVersion(class PyDbDatabase {lvalue})'''
    ...
    def markObjectNonPersistent (self, *args, **kwargs):
      '''
markObjectNonPersistent( (ObjectId)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus markObjectNonPersistent(class PyDbObjectId,bool)'''
    ...
    def materialDictionaryId (self, *args, **kwargs):
      '''
materialDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def maxactvp (self, *args, **kwargs):
      '''
maxactvp( (Database)arg1) -> int :

    C++ signature :
        short maxactvp(class PyDbDatabase {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Database)arg1) -> MeasurementValue :

    C++ signature :
        enum AcDb::MeasurementValue measurement(class PyDbDatabase {lvalue})'''
    ...
    def mirrtext (self, *args, **kwargs):
      '''
mirrtext( (Database)arg1) -> bool :

    C++ signature :
        bool mirrtext(class PyDbDatabase {lvalue})'''
    ...
    def mleaderStyleDictionaryId (self, *args, **kwargs):
      '''
mleaderStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mleaderStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def mleaderscale (self, *args, **kwargs):
      '''
mleaderscale( (Database)arg1) -> float :

    C++ signature :
        double mleaderscale(class PyDbDatabase {lvalue})'''
    ...
    def mleaderstyle (self, *args, **kwargs):
      '''
mleaderstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mleaderstyle(class PyDbDatabase {lvalue})'''
    ...
    def modelSpaceId (self, *args, **kwargs):
      '''
modelSpaceId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId modelSpaceId(class PyDbDatabase {lvalue})'''
    ...
    def msOleScale (self, *args, **kwargs):
      '''
msOleScale( (Database)arg1) -> float :

    C++ signature :
        double msOleScale(class PyDbDatabase {lvalue})'''
    ...
    def msltscale (self, *args, **kwargs):
      '''
msltscale( (Database)arg1) -> bool :

    C++ signature :
        bool msltscale(class PyDbDatabase {lvalue})'''
    ...
    def namedObjectsDictionaryId (self, *args, **kwargs):
      '''
namedObjectsDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId namedObjectsDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def needsRecovery (self, *args, **kwargs):
      '''
needsRecovery( (Database)arg1) -> bool :

    C++ signature :
        bool needsRecovery(class PyDbDatabase {lvalue})'''
    ...
    def northDirection (self, *args, **kwargs):
      '''
northDirection( (Database)arg1) -> float :

    C++ signature :
        double northDirection(class PyDbDatabase {lvalue})'''
    ...
    def numberOfSaves (self, *args, **kwargs):
      '''
numberOfSaves( (Database)arg1) -> int :

    C++ signature :
        int numberOfSaves(class PyDbDatabase {lvalue})'''
    ...
    def obscuredColor (self, *args, **kwargs):
      '''
obscuredColor( (Database)arg1) -> int :

    C++ signature :
        unsigned short obscuredColor(class PyDbDatabase {lvalue})'''
    ...
    def obscuredLineType (self, *args, **kwargs):
      '''
obscuredLineType( (Database)arg1) -> int :

    C++ signature :
        unsigned char obscuredLineType(class PyDbDatabase {lvalue})'''
    ...
    def oleStartUp (self, *args, **kwargs):
      '''
oleStartUp( (Database)arg1) -> bool :

    C++ signature :
        bool oleStartUp(class PyDbDatabase {lvalue})'''
    ...
    def originalFileMaintenanceVersion (self, *args, **kwargs):
      '''
originalFileMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileName (self, *args, **kwargs):
      '''
originalFileName( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > originalFileName(class PyDbDatabase {lvalue})'''
    ...
    def originalFileSavedByMaintenanceVersion (self, *args, **kwargs):
      '''
originalFileSavedByMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileSavedByMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileSavedByVersion (self, *args, **kwargs):
      '''
originalFileSavedByVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileSavedByVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileVersion (self, *args, **kwargs):
      '''
originalFileVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileVersion(class PyDbDatabase {lvalue})'''
    ...
    def orthomode (self, *args, **kwargs):
      '''
orthomode( (Database)arg1) -> bool :

    C++ signature :
        bool orthomode(class PyDbDatabase {lvalue})'''
    ...
    def paperSpaceVportId (self, *args, **kwargs):
      '''
paperSpaceVportId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId paperSpaceVportId(class PyDbDatabase {lvalue})'''
    ...
    def pdfframe (self, *args, **kwargs):
      '''
pdfframe( (Database)arg1) -> int :

    C++ signature :
        signed char pdfframe(class PyDbDatabase {lvalue})'''
    ...
    def pdmode (self, *args, **kwargs):
      '''
pdmode( (Database)arg1) -> int :

    C++ signature :
        short pdmode(class PyDbDatabase {lvalue})'''
    ...
    def pdsize (self, *args, **kwargs):
      '''
pdsize( (Database)arg1) -> float :

    C++ signature :
        double pdsize(class PyDbDatabase {lvalue})'''
    ...
    def pextmax (self, *args, **kwargs):
      '''
pextmax( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pextmax(class PyDbDatabase {lvalue})'''
    ...
    def pextmin (self, *args, **kwargs):
      '''
pextmin( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pextmin(class PyDbDatabase {lvalue})'''
    ...
    def pickstyle (self, *args, **kwargs):
      '''
pickstyle( (Database)arg1) -> int :

    C++ signature :
        short pickstyle(class PyDbDatabase {lvalue})'''
    ...
    def pinsbase (self, *args, **kwargs):
      '''
pinsbase( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pinsbase(class PyDbDatabase {lvalue})'''
    ...
    def plimcheck (self, *args, **kwargs):
      '''
plimcheck( (Database)arg1) -> bool :

    C++ signature :
        bool plimcheck(class PyDbDatabase {lvalue})'''
    ...
    def plimmax (self, *args, **kwargs):
      '''
plimmax( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d plimmax(class PyDbDatabase {lvalue})'''
    ...
    def plimmin (self, *args, **kwargs):
      '''
plimmin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d plimmin(class PyDbDatabase {lvalue})'''
    ...
    def plineEllipse (self, *args, **kwargs):
      '''
plineEllipse( (Database)arg1) -> bool :

    C++ signature :
        bool plineEllipse(class PyDbDatabase {lvalue})'''
    ...
    def plinegen (self, *args, **kwargs):
      '''
plinegen( (Database)arg1) -> bool :

    C++ signature :
        bool plinegen(class PyDbDatabase {lvalue})'''
    ...
    def plinewid (self, *args, **kwargs):
      '''
plinewid( (Database)arg1) -> float :

    C++ signature :
        double plinewid(class PyDbDatabase {lvalue})'''
    ...
    def plotSettingsDictionaryId (self, *args, **kwargs):
      '''
plotSettingsDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotSettingsDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def plotStyleMode (self, *args, **kwargs):
      '''
plotStyleMode( (Database)arg1) -> bool :

    C++ signature :
        bool plotStyleMode(class PyDbDatabase {lvalue})'''
    ...
    def plotStyleNameDictionaryId (self, *args, **kwargs):
      '''
plotStyleNameDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def previewType (self, *args, **kwargs):
      '''
previewType( (Database)arg1) -> int :

    C++ signature :
        short previewType(class PyDbDatabase {lvalue})'''
    ...
    def psltscale (self, *args, **kwargs):
      '''
psltscale( (Database)arg1) -> bool :

    C++ signature :
        bool psltscale(class PyDbDatabase {lvalue})'''
    ...
    def psolHeight (self, *args, **kwargs):
      '''
psolHeight( (Database)arg1) -> float :

    C++ signature :
        double psolHeight(class PyDbDatabase {lvalue})'''
    ...
    def psolWidth (self, *args, **kwargs):
      '''
psolWidth( (Database)arg1) -> float :

    C++ signature :
        double psolWidth(class PyDbDatabase {lvalue})'''
    ...
    def pucsBase (self, *args, **kwargs):
      '''
pucsBase( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId pucsBase(class PyDbDatabase {lvalue})'''
    ...
    def pucsname (self, *args, **kwargs):
      '''
pucsname( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId pucsname(class PyDbDatabase {lvalue})'''
    ...
    def pucsorg (self, *args, **kwargs):
      '''
pucsorg( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pucsorg(class PyDbDatabase {lvalue})'''
    ...
    def pucsxdir (self, *args, **kwargs):
      '''
pucsxdir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d pucsxdir(class PyDbDatabase {lvalue})'''
    ...
    def pucsydir (self, *args, **kwargs):
      '''
pucsydir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d pucsydir(class PyDbDatabase {lvalue})'''
    ...
    def qtextmode (self, *args, **kwargs):
      '''
qtextmode( (Database)arg1) -> bool :

    C++ signature :
        bool qtextmode(class PyDbDatabase {lvalue})'''
    ...
    def readDwgFile (self, *args, **kwargs):
      '''
readDwgFile( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus readDwgFile(class PyDbDatabase {lvalue},char const * __ptr64)'''
    ...
    def reclaimMemoryFromErasedObjects (self, *args, **kwargs):
      '''
reclaimMemoryFromErasedObjects( (Database)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reclaimMemoryFromErasedObjects(class PyDbDatabase {lvalue},class boost::python::list)'''
    ...
    def regAppTableId (self, *args, **kwargs):
      '''
regAppTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId regAppTableId(class PyDbDatabase {lvalue})'''
    ...
    def regenmode (self, *args, **kwargs):
      '''
regenmode( (Database)arg1) -> bool :

    C++ signature :
        bool regenmode(class PyDbDatabase {lvalue})'''
    ...
    def registerApp (self, *args, **kwargs):
      '''
registerApp( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus registerApp(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def resetTimes (self, *args, **kwargs):
      '''
resetTimes( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus resetTimes(class PyDbDatabase {lvalue})'''
    ...
    def restoreForwardingXrefSymbols (self, *args, **kwargs):
      '''
restoreForwardingXrefSymbols( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus restoreForwardingXrefSymbols(class PyDbDatabase {lvalue})'''
    ...
    def restoreOriginalXrefSymbols (self, *args, **kwargs):
      '''
restoreOriginalXrefSymbols( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus restoreOriginalXrefSymbols(class PyDbDatabase {lvalue})'''
    ...
    def retainOriginalThumbnailBitmap (self, *args, **kwargs):
      '''
retainOriginalThumbnailBitmap( (Database)arg1) -> bool :

    C++ signature :
        bool retainOriginalThumbnailBitmap(class PyDbDatabase {lvalue})'''
    ...
    def saveAs (self, *args, **kwargs):
      '''
saveAs( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus saveAs(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def saveproxygraphics (self, *args, **kwargs):
      '''
saveproxygraphics( (Database)arg1) -> int :

    C++ signature :
        short saveproxygraphics(class PyDbDatabase {lvalue})'''
    ...
    def scaleListDictionaryId (self, *args, **kwargs):
      '''
scaleListDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId scaleListDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def sectionViewStyle (self, *args, **kwargs):
      '''
sectionViewStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sectionViewStyle(class PyDbDatabase {lvalue})'''
    ...
    def sectionViewStyleDictionaryId (self, *args, **kwargs):
      '''
sectionViewStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sectionViewStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def set3dDwfPrec (self, *args, **kwargs):
      '''
set3dDwfPrec( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set3dDwfPrec(class PyDbDatabase {lvalue},double)'''
    ...
    def setAngbase (self, *args, **kwargs):
      '''
setAngbase( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAngbase(class PyDbDatabase {lvalue},double)'''
    ...
    def setAngdir (self, *args, **kwargs):
      '''
setAngdir( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAngdir(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAnnoAllVisible (self, *args, **kwargs):
      '''
setAnnoAllVisible( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnoAllVisible(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAttdia (self, *args, **kwargs):
      '''
setAttdia( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttdia(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAttmode (self, *args, **kwargs):
      '''
setAttmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setAttreq (self, *args, **kwargs):
      '''
setAttreq( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttreq(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAunits (self, *args, **kwargs):
      '''
setAunits( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAunits(class PyDbDatabase {lvalue},short)'''
    ...
    def setAuprec (self, *args, **kwargs):
      '''
setAuprec( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAuprec(class PyDbDatabase {lvalue},short)'''
    ...
    def setBlipmode (self, *args, **kwargs):
      '''
setBlipmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlipmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setCDynDisplayMode (self, *args, **kwargs):
      '''
setCDynDisplayMode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCDynDisplayMode(class PyDbDatabase {lvalue},short)'''
    ...
    def setCameraDisplay (self, *args, **kwargs):
      '''
setCameraDisplay( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCameraDisplay(class PyDbDatabase {lvalue},bool)'''
    ...
    def setCameraHeight (self, *args, **kwargs):
      '''
setCameraHeight( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCameraHeight(class PyDbDatabase {lvalue},double)'''
    ...
    def setCePlotStyleName (self, *args, **kwargs):
      '''
setCePlotStyleName( (Database)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCePlotStyleName(class PyDbDatabase {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId)'''
    ...
    def setCeltscale (self, *args, **kwargs):
      '''
setCeltscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCeltscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setCeltype (self, *args, **kwargs):
      '''
setCeltype( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCeltype(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCelweight (self, *args, **kwargs):
      '''
setCelweight( (Database)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCelweight(class PyDbDatabase {lvalue},enum AcDb::LineWeight)'''
    ...
    def setChamfera (self, *args, **kwargs):
      '''
setChamfera( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamfera(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferb (self, *args, **kwargs):
      '''
setChamferb( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferb(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferc (self, *args, **kwargs):
      '''
setChamferc( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferc(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferd (self, *args, **kwargs):
      '''
setChamferd( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferd(class PyDbDatabase {lvalue},double)'''
    ...
    def setClayer (self, *args, **kwargs):
      '''
setClayer( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClayer(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCmaterial (self, *args, **kwargs):
      '''
setCmaterial( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmaterial(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCmljust (self, *args, **kwargs):
      '''
setCmljust( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmljust(class PyDbDatabase {lvalue},short)'''
    ...
    def setCmlscale (self, *args, **kwargs):
      '''
setCmlscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmlscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setCmlstyleID (self, *args, **kwargs):
      '''
setCmlstyleID( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmlstyleID(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCoords (self, *args, **kwargs):
      '''
setCoords( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCoords(class PyDbDatabase {lvalue},short)'''
    ...
    def setCshadow (self, *args, **kwargs):
      '''
setCshadow( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCshadow(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDelUsedObj (self, *args, **kwargs):
      '''
setDelUsedObj( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDelUsedObj(class PyDbDatabase {lvalue},short)'''
    ...
    def setDgnframe (self, *args, **kwargs):
      '''
setDgnframe( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDgnframe(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDimAssoc (self, *args, **kwargs):
      '''
setDimAssoc( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimAssoc(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDimaso (self, *args, **kwargs):
      '''
setDimaso( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimaso(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDimfit (self, *args, **kwargs):
      '''
setDimfit( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimfit(class PyDbDatabase {lvalue},int)'''
    ...
    def setDimsho (self, *args, **kwargs):
      '''
setDimsho( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimsho(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDimstyle (self, *args, **kwargs):
      '''
setDimstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDimunit (self, *args, **kwargs):
      '''
setDimunit( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimunit(class PyDbDatabase {lvalue},int)'''
    ...
    def setDispSilh (self, *args, **kwargs):
      '''
setDispSilh( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDispSilh(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDragVisStyle (self, *args, **kwargs):
      '''
setDragVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDragVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDragmode (self, *args, **kwargs):
      '''
setDragmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDragmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setDrawOrderCtl (self, *args, **kwargs):
      '''
setDrawOrderCtl( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawOrderCtl(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDwfframe (self, *args, **kwargs):
      '''
setDwfframe( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDwfframe(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDatabase {lvalue},double)'''
    ...
    def setEndCaps (self, *args, **kwargs):
      '''
setEndCaps( (Database)arg1, (EndCaps)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndCaps(class PyDbDatabase {lvalue},enum AcDb::EndCaps)'''
    ...
    def setExtmax (self, *args, **kwargs):
      '''
setExtmax( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtmax(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setExtmin (self, *args, **kwargs):
      '''
setExtmin( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtmin(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setFacetres (self, *args, **kwargs):
      '''
setFacetres( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFacetres(class PyDbDatabase {lvalue},double)'''
    ...
    def setFilletrad (self, *args, **kwargs):
      '''
setFilletrad( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFilletrad(class PyDbDatabase {lvalue},double)'''
    ...
    def setFillmode (self, *args, **kwargs):
      '''
setFillmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFillmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setFingerprintGuid (self, *args, **kwargs):
      '''
setFingerprintGuid( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFingerprintGuid(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFullSaveRequired (self, *args, **kwargs):
      '''
setFullSaveRequired( (Database)arg1) -> None :

    C++ signature :
        void setFullSaveRequired(class PyDbDatabase {lvalue})'''
    ...
    def setGeoMarkerVisibility (self, *args, **kwargs):
      '''
setGeoMarkerVisibility( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGeoMarkerVisibility(class PyDbDatabase {lvalue},bool)'''
    ...
    def setHaloGap (self, *args, **kwargs):
      '''
setHaloGap( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHaloGap(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setHideText (self, *args, **kwargs):
      '''
setHideText( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHideText(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setHpInherit (self, *args, **kwargs):
      '''
setHpInherit( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHpInherit(class PyDbDatabase {lvalue},bool)'''
    ...
    def setHpOrigin (self, *args, **kwargs):
      '''
setHpOrigin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHpOrigin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setHyperlinkBase (self, *args, **kwargs):
      '''
setHyperlinkBase( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHyperlinkBase(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIndexctl (self, *args, **kwargs):
      '''
setIndexctl( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIndexctl(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setInsbase (self, *args, **kwargs):
      '''
setInsbase( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInsbase(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setInsunits (self, *args, **kwargs):
      '''
setInsunits( (Database)arg1, (UnitsValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInsunits(class PyDbDatabase {lvalue},enum AcDb::UnitsValue)'''
    ...
    def setInterfereObjVisStyle (self, *args, **kwargs):
      '''
setInterfereObjVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInterfereObjVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setInterfereVpVisStyle (self, *args, **kwargs):
      '''
setInterfereVpVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInterfereVpVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setIntersectColor (self, *args, **kwargs):
      '''
setIntersectColor( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIntersectColor(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setIntersectDisplay (self, *args, **kwargs):
      '''
setIntersectDisplay( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIntersectDisplay(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setIsolines (self, *args, **kwargs):
      '''
setIsolines( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsolines(class PyDbDatabase {lvalue},short)'''
    ...
    def setJoinStyle (self, *args, **kwargs):
      '''
setJoinStyle( (Database)arg1, (JoinStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJoinStyle(class PyDbDatabase {lvalue},enum AcDb::JoinStyle)'''
    ...
    def setLatitude (self, *args, **kwargs):
      '''
setLatitude( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLatitude(class PyDbDatabase {lvalue},double)'''
    ...
    def setLayerEval (self, *args, **kwargs):
      '''
setLayerEval( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerEval(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLayerNotify (self, *args, **kwargs):
      '''
setLayerNotify( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerNotify(class PyDbDatabase {lvalue},short)'''
    ...
    def setLensLength (self, *args, **kwargs):
      '''
setLensLength( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLensLength(class PyDbDatabase {lvalue},double)'''
    ...
    def setLightGlyphDisplay (self, *args, **kwargs):
      '''
setLightGlyphDisplay( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightGlyphDisplay(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLightingUnits (self, *args, **kwargs):
      '''
setLightingUnits( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightingUnits(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLightsInBlocks (self, *args, **kwargs):
      '''
setLightsInBlocks( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightsInBlocks(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLimcheck (self, *args, **kwargs):
      '''
setLimcheck( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLimcheck(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLimmax (self, *args, **kwargs):
      '''
setLimmax( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLimmax(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setLineWeightDisplay (self, *args, **kwargs):
      '''
setLineWeightDisplay( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeightDisplay(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLoftAng1 (self, *args, **kwargs):
      '''
setLoftAng1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftAng1(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftAng2 (self, *args, **kwargs):
      '''
setLoftAng2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftAng2(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftMag1 (self, *args, **kwargs):
      '''
setLoftMag1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftMag1(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftMag2 (self, *args, **kwargs):
      '''
setLoftMag2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftMag2(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftNormals (self, *args, **kwargs):
      '''
setLoftNormals( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftNormals(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLoftParam (self, *args, **kwargs):
      '''
setLoftParam( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftParam(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setLongitude (self, *args, **kwargs):
      '''
setLongitude( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLongitude(class PyDbDatabase {lvalue},double)'''
    ...
    def setLtscale (self, *args, **kwargs):
      '''
setLtscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLtscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setLunits (self, *args, **kwargs):
      '''
setLunits( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLunits(class PyDbDatabase {lvalue},short)'''
    ...
    def setLuprec (self, *args, **kwargs):
      '''
setLuprec( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLuprec(class PyDbDatabase {lvalue},short)'''
    ...
    def setMLeaderscale (self, *args, **kwargs):
      '''
setMLeaderscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setMLeaderstyle (self, *args, **kwargs):
      '''
setMLeaderstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setMaxactvp (self, *args, **kwargs):
      '''
setMaxactvp( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaxactvp(class PyDbDatabase {lvalue},short)'''
    ...
    def setMeasurement (self, *args, **kwargs):
      '''
setMeasurement( (Database)arg1, (MeasurementValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMeasurement(class PyDbDatabase {lvalue},enum AcDb::MeasurementValue)'''
    ...
    def setMirrtext (self, *args, **kwargs):
      '''
setMirrtext( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMirrtext(class PyDbDatabase {lvalue},bool)'''
    ...
    def setMsOleScale (self, *args, **kwargs):
      '''
setMsOleScale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMsOleScale(class PyDbDatabase {lvalue},double)'''
    ...
    def setMsltscale (self, *args, **kwargs):
      '''
setMsltscale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMsltscale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setNorthDirection (self, *args, **kwargs):
      '''
setNorthDirection( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNorthDirection(class PyDbDatabase {lvalue},double)'''
    ...
    def setObscuredColor (self, *args, **kwargs):
      '''
setObscuredColor( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObscuredColor(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setObscuredLineType (self, *args, **kwargs):
      '''
setObscuredLineType( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObscuredLineType(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setOleStartUp (self, *args, **kwargs):
      '''
setOleStartUp( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOleStartUp(class PyDbDatabase {lvalue},bool)'''
    ...
    def setOrthomode (self, *args, **kwargs):
      '''
setOrthomode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrthomode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPdfframe (self, *args, **kwargs):
      '''
setPdfframe( (Database)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdfframe(class PyDbDatabase {lvalue},signed char)'''
    ...
    def setPdmode (self, *args, **kwargs):
      '''
setPdmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setPdsize (self, *args, **kwargs):
      '''
setPdsize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdsize(class PyDbDatabase {lvalue},double)'''
    ...
    def setPelevation (self, *args, **kwargs):
      '''
setPelevation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPelevation(class PyDbDatabase {lvalue},double)'''
    ...
    def setPextmax (self, *args, **kwargs):
      '''
setPextmax( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPextmax(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPextmin (self, *args, **kwargs):
      '''
setPextmin( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPextmin(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPickstyle (self, *args, **kwargs):
      '''
setPickstyle( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPickstyle(class PyDbDatabase {lvalue},short)'''
    ...
    def setPinsbase (self, *args, **kwargs):
      '''
setPinsbase( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPinsbase(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPlimcheck (self, *args, **kwargs):
      '''
setPlimcheck( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimcheck(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlimmax (self, *args, **kwargs):
      '''
setPlimmax( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimmax(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setPlimmin (self, *args, **kwargs):
      '''
setPlimmin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimmin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setPlineEllipse (self, *args, **kwargs):
      '''
setPlineEllipse( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlineEllipse(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlinegen (self, *args, **kwargs):
      '''
setPlinegen( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlinegen(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlinewid (self, *args, **kwargs):
      '''
setPlinewid( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlinewid(class PyDbDatabase {lvalue},double)'''
    ...
    def setPreviewType (self, *args, **kwargs):
      '''
setPreviewType( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviewType(class PyDbDatabase {lvalue},short)'''
    ...
    def setProjectName (self, *args, **kwargs):
      '''
setProjectName( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setProjectName(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPsltscale (self, *args, **kwargs):
      '''
setPsltscale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsltscale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPsolHeight (self, *args, **kwargs):
      '''
setPsolHeight( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsolHeight(class PyDbDatabase {lvalue},double)'''
    ...
    def setPsolWidth (self, *args, **kwargs):
      '''
setPsolWidth( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsolWidth(class PyDbDatabase {lvalue},double)'''
    ...
    def setPucs (self, *args, **kwargs):
      '''
setPucs( (Database)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucs(class PyDbDatabase {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setPucsBase (self, *args, **kwargs):
      '''
setPucsBase( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucsBase(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setPucsname (self, *args, **kwargs):
      '''
setPucsname( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucsname(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setQtextmode (self, *args, **kwargs):
      '''
setQtextmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setQtextmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRealWorldScale (self, *args, **kwargs):
      '''
setRealWorldScale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRealWorldScale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRegenmode (self, *args, **kwargs):
      '''
setRegenmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRegenmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRetainOriginalThumbnailBitmap (self, *args, **kwargs):
      '''
setRetainOriginalThumbnailBitmap( (Database)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRetainOriginalThumbnailBitmap(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSaveproxygraphics (self, *args, **kwargs):
      '''
setSaveproxygraphics( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSaveproxygraphics(class PyDbDatabase {lvalue},short)'''
    ...
    def setSectionViewStyle (self, *args, **kwargs):
      '''
setSectionViewStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSectionViewStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setShadedge (self, *args, **kwargs):
      '''
setShadedge( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadedge(class PyDbDatabase {lvalue},short)'''
    ...
    def setShadedif (self, *args, **kwargs):
      '''
setShadedif( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadedif(class PyDbDatabase {lvalue},short)'''
    ...
    def setShadowPlaneLocation (self, *args, **kwargs):
      '''
setShadowPlaneLocation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadowPlaneLocation(class PyDbDatabase {lvalue},double)'''
    ...
    def setShowHist (self, *args, **kwargs):
      '''
setShowHist( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShowHist(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSketchinc (self, *args, **kwargs):
      '''
setSketchinc( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSketchinc(class PyDbDatabase {lvalue},double)'''
    ...
    def setSkpoly (self, *args, **kwargs):
      '''
setSkpoly( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSkpoly(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSolidHist (self, *args, **kwargs):
      '''
setSolidHist( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSolidHist(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSortEnts (self, *args, **kwargs):
      '''
setSortEnts( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSortEnts(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSplframe (self, *args, **kwargs):
      '''
setSplframe( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplframe(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSplinesegs (self, *args, **kwargs):
      '''
setSplinesegs( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplinesegs(class PyDbDatabase {lvalue},short)'''
    ...
    def setSplinetype (self, *args, **kwargs):
      '''
setSplinetype( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplinetype(class PyDbDatabase {lvalue},short)'''
    ...
    def setStepSize (self, *args, **kwargs):
      '''
setStepSize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStepSize(class PyDbDatabase {lvalue},double)'''
    ...
    def setStepsPerSec (self, *args, **kwargs):
      '''
setStepsPerSec( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStepsPerSec(class PyDbDatabase {lvalue},double)'''
    ...
    def setStyleSheet (self, *args, **kwargs):
      '''
setStyleSheet( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStyleSheet(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSurftab1 (self, *args, **kwargs):
      '''
setSurftab1( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftab1(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurftab2 (self, *args, **kwargs):
      '''
setSurftab2( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftab2(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurftype (self, *args, **kwargs):
      '''
setSurftype( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftype(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurfu (self, *args, **kwargs):
      '''
setSurfu( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurfu(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurfv (self, *args, **kwargs):
      '''
setSurfv( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurfv(class PyDbDatabase {lvalue},short)'''
    ...
    def setTStackAlign (self, *args, **kwargs):
      '''
setTStackAlign( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTStackAlign(class PyDbDatabase {lvalue},int)'''
    ...
    def setTStackSize (self, *args, **kwargs):
      '''
setTStackSize( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTStackSize(class PyDbDatabase {lvalue},int)'''
    ...
    def setTablestyle (self, *args, **kwargs):
      '''
setTablestyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTablestyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setTextsize (self, *args, **kwargs):
      '''
setTextsize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextsize(class PyDbDatabase {lvalue},double)'''
    ...
    def setTextstyle (self, *args, **kwargs):
      '''
setTextstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbDatabase {lvalue},double)'''
    ...
    def setTilemode (self, *args, **kwargs):
      '''
setTilemode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTilemode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setTimeZone (self, *args, **kwargs):
      '''
setTimeZone( (Database)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTimeZone(class PyDbDatabase {lvalue},enum AcDb::TimeZone)'''
    ...
    def setTimeZoneAsUtcOffset (self, *args, **kwargs):
      '''
setTimeZoneAsUtcOffset( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTimeZoneAsUtcOffset(class PyDbDatabase {lvalue},double)'''
    ...
    def setTracewid (self, *args, **kwargs):
      '''
setTracewid( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTracewid(class PyDbDatabase {lvalue},double)'''
    ...
    def setTreedepth (self, *args, **kwargs):
      '''
setTreedepth( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTreedepth(class PyDbDatabase {lvalue},short)'''
    ...
    def setUcs (self, *args, **kwargs):
      '''
setUcs( (Database)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbDatabase {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setUcsBase (self, *args, **kwargs):
      '''
setUcsBase( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsBase(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setUcsname (self, *args, **kwargs):
      '''
setUcsname( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsname(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setUnitmode (self, *args, **kwargs):
      '''
setUnitmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUnitmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setUpdateThumbnail (self, *args, **kwargs):
      '''
setUpdateThumbnail( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUpdateThumbnail(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setUseri1 (self, *args, **kwargs):
      '''
setUseri1( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri1(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri2 (self, *args, **kwargs):
      '''
setUseri2( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri2(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri3 (self, *args, **kwargs):
      '''
setUseri3( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri3(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri4 (self, *args, **kwargs):
      '''
setUseri4( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri4(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri5 (self, *args, **kwargs):
      '''
setUseri5( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri5(class PyDbDatabase {lvalue},short)'''
    ...
    def setUserr1 (self, *args, **kwargs):
      '''
setUserr1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr1(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr2 (self, *args, **kwargs):
      '''
setUserr2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr2(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr3 (self, *args, **kwargs):
      '''
setUserr3( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr3(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr4 (self, *args, **kwargs):
      '''
setUserr4( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr4(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr5 (self, *args, **kwargs):
      '''
setUserr5( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr5(class PyDbDatabase {lvalue},double)'''
    ...
    def setUsrtimer (self, *args, **kwargs):
      '''
setUsrtimer( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsrtimer(class PyDbDatabase {lvalue},bool)'''
    ...
    def setVersionGuid (self, *args, **kwargs):
      '''
setVersionGuid( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVersionGuid(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setViewportScaleDefault (self, *args, **kwargs):
      '''
setViewportScaleDefault( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewportScaleDefault(class PyDbDatabase {lvalue},double)'''
    ...
    def setVisretain (self, *args, **kwargs):
      '''
setVisretain( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisretain(class PyDbDatabase {lvalue},bool)'''
    ...
    def setWorldPucsBaseOrigin (self, *args, **kwargs):
      '''
setWorldPucsBaseOrigin( (Database)arg1, (Point3d)arg2, (OrthographicView)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldPucsBaseOrigin(class PyDbDatabase {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setWorldUcsBaseOrigin (self, *args, **kwargs):
      '''
setWorldUcsBaseOrigin( (Database)arg1, (Point3d)arg2, (OrthographicView)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldUcsBaseOrigin(class PyDbDatabase {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setWorldview (self, *args, **kwargs):
      '''
setWorldview( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldview(class PyDbDatabase {lvalue},bool)'''
    ...
    def setXclipFrame (self, *args, **kwargs):
      '''
setXclipFrame( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXclipFrame(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setXrefEditEnabled (self, *args, **kwargs):
      '''
setXrefEditEnabled( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXrefEditEnabled(class PyDbDatabase {lvalue},bool)'''
    ...
    def shadedge (self, *args, **kwargs):
      '''
shadedge( (Database)arg1) -> int :

    C++ signature :
        short shadedge(class PyDbDatabase {lvalue})'''
    ...
    def shadedif (self, *args, **kwargs):
      '''
shadedif( (Database)arg1) -> int :

    C++ signature :
        short shadedif(class PyDbDatabase {lvalue})'''
    ...
    def shadowPlaneLocation (self, *args, **kwargs):
      '''
shadowPlaneLocation( (Database)arg1) -> float :

    C++ signature :
        double shadowPlaneLocation(class PyDbDatabase {lvalue})'''
    ...
    def showHist (self, *args, **kwargs):
      '''
showHist( (Database)arg1) -> int :

    C++ signature :
        unsigned char showHist(class PyDbDatabase {lvalue})'''
    ...
    def sketchinc (self, *args, **kwargs):
      '''
sketchinc( (Database)arg1) -> float :

    C++ signature :
        double sketchinc(class PyDbDatabase {lvalue})'''
    ...
    def skpoly (self, *args, **kwargs):
      '''
skpoly( (Database)arg1) -> bool :

    C++ signature :
        bool skpoly(class PyDbDatabase {lvalue})'''
    ...
    def solidHist (self, *args, **kwargs):
      '''
solidHist( (Database)arg1) -> int :

    C++ signature :
        unsigned char solidHist(class PyDbDatabase {lvalue})'''
    ...
    def sortEnts (self, *args, **kwargs):
      '''
sortEnts( (Database)arg1) -> int :

    C++ signature :
        unsigned char sortEnts(class PyDbDatabase {lvalue})'''
    ...
    def splframe (self, *args, **kwargs):
      '''
splframe( (Database)arg1) -> bool :

    C++ signature :
        bool splframe(class PyDbDatabase {lvalue})'''
    ...
    def splinesegs (self, *args, **kwargs):
      '''
splinesegs( (Database)arg1) -> int :

    C++ signature :
        short splinesegs(class PyDbDatabase {lvalue})'''
    ...
    def splinetype (self, *args, **kwargs):
      '''
splinetype( (Database)arg1) -> int :

    C++ signature :
        short splinetype(class PyDbDatabase {lvalue})'''
    ...
    def stepSize (self, *args, **kwargs):
      '''
stepSize( (Database)arg1) -> float :

    C++ signature :
        double stepSize(class PyDbDatabase {lvalue})'''
    ...
    def stepsPerSec (self, *args, **kwargs):
      '''
stepsPerSec( (Database)arg1) -> float :

    C++ signature :
        double stepsPerSec(class PyDbDatabase {lvalue})'''
    ...
    def surftab1 (self, *args, **kwargs):
      '''
surftab1( (Database)arg1) -> int :

    C++ signature :
        short surftab1(class PyDbDatabase {lvalue})'''
    ...
    def surftab2 (self, *args, **kwargs):
      '''
surftab2( (Database)arg1) -> int :

    C++ signature :
        short surftab2(class PyDbDatabase {lvalue})'''
    ...
    def surftype (self, *args, **kwargs):
      '''
surftype( (Database)arg1) -> int :

    C++ signature :
        short surftype(class PyDbDatabase {lvalue})'''
    ...
    def surfu (self, *args, **kwargs):
      '''
surfu( (Database)arg1) -> int :

    C++ signature :
        short surfu(class PyDbDatabase {lvalue})'''
    ...
    def surfv (self, *args, **kwargs):
      '''
surfv( (Database)arg1) -> int :

    C++ signature :
        short surfv(class PyDbDatabase {lvalue})'''
    ...
    def tableStyleDictionaryId (self, *args, **kwargs):
      '''
tableStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tableStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def tablestyle (self, *args, **kwargs):
      '''
tablestyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tablestyle(class PyDbDatabase {lvalue})'''
    ...
    def textStyleTableId (self, *args, **kwargs):
      '''
textStyleTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleTableId(class PyDbDatabase {lvalue})'''
    ...
    def textsize (self, *args, **kwargs):
      '''
textsize( (Database)arg1) -> float :

    C++ signature :
        double textsize(class PyDbDatabase {lvalue})'''
    ...
    def textstyle (self, *args, **kwargs):
      '''
textstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textstyle(class PyDbDatabase {lvalue})'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Database)arg1) -> float :

    C++ signature :
        double thickness(class PyDbDatabase {lvalue})'''
    ...
    def tileModeLightSynch (self, *args, **kwargs):
      '''
tileModeLightSynch( (Database)arg1) -> int :

    C++ signature :
        unsigned char tileModeLightSynch(class PyDbDatabase {lvalue})'''
    ...
    def tilemode (self, *args, **kwargs):
      '''
tilemode( (Database)arg1) -> bool :

    C++ signature :
        bool tilemode(class PyDbDatabase {lvalue})'''
    ...
    def timeZone (self, *args, **kwargs):
      '''
timeZone( (Database)arg1) -> int :

    C++ signature :
        int timeZone(class PyDbDatabase {lvalue})'''
    ...
    def tracewid (self, *args, **kwargs):
      '''
tracewid( (Database)arg1) -> float :

    C++ signature :
        double tracewid(class PyDbDatabase {lvalue})'''
    ...
    def treedepth (self, *args, **kwargs):
      '''
treedepth( (Database)arg1) -> int :

    C++ signature :
        short treedepth(class PyDbDatabase {lvalue})'''
    ...
    def tstackalign (self, *args, **kwargs):
      '''
tstackalign( (Database)arg1) -> int :

    C++ signature :
        int tstackalign(class PyDbDatabase {lvalue})'''
    ...
    def tstacksize (self, *args, **kwargs):
      '''
tstacksize( (Database)arg1) -> int :

    C++ signature :
        int tstacksize(class PyDbDatabase {lvalue})'''
    ...
    def ucsBase (self, *args, **kwargs):
      '''
ucsBase( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsBase(class PyDbDatabase {lvalue})'''
    ...
    def ucsname (self, *args, **kwargs):
      '''
ucsname( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsname(class PyDbDatabase {lvalue})'''
    ...
    def ucsorg (self, *args, **kwargs):
      '''
ucsorg( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d ucsorg(class PyDbDatabase {lvalue})'''
    ...
    def ucsxdir (self, *args, **kwargs):
      '''
ucsxdir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d ucsxdir(class PyDbDatabase {lvalue})'''
    ...
    def ucsydir (self, *args, **kwargs):
      '''
ucsydir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d ucsydir(class PyDbDatabase {lvalue})'''
    ...
    def undoRecording (self, *args, **kwargs):
      '''
undoRecording( (Database)arg1) -> bool :

    C++ signature :
        bool undoRecording(class PyDbDatabase {lvalue})'''
    ...
    def unitmode (self, *args, **kwargs):
      '''
unitmode( (Database)arg1) -> int :

    C++ signature :
        short unitmode(class PyDbDatabase {lvalue})'''
    ...
    def updateDataLink (self, *args, **kwargs):
      '''
updateDataLink( (Database)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbDatabase {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def updateExt (self, *args, **kwargs):
      '''
updateExt( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateExt(class PyDbDatabase {lvalue},bool)'''
    ...
    def updateThumbnail (self, *args, **kwargs):
      '''
updateThumbnail( (Database)arg1) -> int :

    C++ signature :
        unsigned char updateThumbnail(class PyDbDatabase {lvalue})'''
    ...
    def useri1 (self, *args, **kwargs):
      '''
useri1( (Database)arg1) -> int :

    C++ signature :
        short useri1(class PyDbDatabase {lvalue})'''
    ...
    def useri2 (self, *args, **kwargs):
      '''
useri2( (Database)arg1) -> int :

    C++ signature :
        short useri2(class PyDbDatabase {lvalue})'''
    ...
    def useri3 (self, *args, **kwargs):
      '''
useri3( (Database)arg1) -> int :

    C++ signature :
        short useri3(class PyDbDatabase {lvalue})'''
    ...
    def useri4 (self, *args, **kwargs):
      '''
useri4( (Database)arg1) -> int :

    C++ signature :
        short useri4(class PyDbDatabase {lvalue})'''
    ...
    def useri5 (self, *args, **kwargs):
      '''
useri5( (Database)arg1) -> int :

    C++ signature :
        short useri5(class PyDbDatabase {lvalue})'''
    ...
    def userr1 (self, *args, **kwargs):
      '''
userr1( (Database)arg1) -> float :

    C++ signature :
        double userr1(class PyDbDatabase {lvalue})'''
    ...
    def userr2 (self, *args, **kwargs):
      '''
userr2( (Database)arg1) -> float :

    C++ signature :
        double userr2(class PyDbDatabase {lvalue})'''
    ...
    def userr3 (self, *args, **kwargs):
      '''
userr3( (Database)arg1) -> float :

    C++ signature :
        double userr3(class PyDbDatabase {lvalue})'''
    ...
    def userr4 (self, *args, **kwargs):
      '''
userr4( (Database)arg1) -> float :

    C++ signature :
        double userr4(class PyDbDatabase {lvalue})'''
    ...
    def userr5 (self, *args, **kwargs):
      '''
userr5( (Database)arg1) -> float :

    C++ signature :
        double userr5(class PyDbDatabase {lvalue})'''
    ...
    def usrtimer (self, *args, **kwargs):
      '''
usrtimer( (Database)arg1) -> bool :

    C++ signature :
        bool usrtimer(class PyDbDatabase {lvalue})'''
    ...
    def viewTableId (self, *args, **kwargs):
      '''
viewTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId viewTableId(class PyDbDatabase {lvalue})'''
    ...
    def viewportScaleDefault (self, *args, **kwargs):
      '''
viewportScaleDefault( (Database)arg1) -> float :

    C++ signature :
        double viewportScaleDefault(class PyDbDatabase {lvalue})'''
    ...
    def viewportTableId (self, *args, **kwargs):
      '''
viewportTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId viewportTableId(class PyDbDatabase {lvalue})'''
    ...
    def visretain (self, *args, **kwargs):
      '''
visretain( (Database)arg1) -> bool :

    C++ signature :
        bool visretain(class PyDbDatabase {lvalue})'''
    ...
    def visualStyleDictionaryId (self, *args, **kwargs):
      '''
visualStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def wblock (self, *args, **kwargs):
      '''
wblock( (Database)arg1, (Database)arg2, (list)arg3, (Point3d)arg4 [, (DuplicateRecordCloning)arg5]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue},class boost::python::list,class AcGePoint3d [,enum AcDb::DuplicateRecordCloning])

wblock( (Database)arg1, (Database)arg2 [, (ObjectId)arg3]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue} [,class PyDbObjectId])'''
    ...
    def worldPucsBaseOrigin (self, *args, **kwargs):
      '''
worldPucsBaseOrigin( (Database)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d worldPucsBaseOrigin(class PyDbDatabase {lvalue},enum AcDb::OrthographicView)'''
    ...
    def worldUcsBaseOrigin (self, *args, **kwargs):
      '''
worldUcsBaseOrigin( (Database)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d worldUcsBaseOrigin(class PyDbDatabase {lvalue},enum AcDb::OrthographicView)'''
    ...
    def worldview (self, *args, **kwargs):
      '''
worldview( (Database)arg1) -> bool :

    C++ signature :
        bool worldview(class PyDbDatabase {lvalue})'''
    ...
    def xclipFrame (self, *args, **kwargs):
      '''
xclipFrame( (Database)arg1) -> int :

    C++ signature :
        unsigned char xclipFrame(class PyDbDatabase {lvalue})'''
    ...
    def xrefBlockId (self, *args, **kwargs):
      '''
xrefBlockId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId xrefBlockId(class PyDbDatabase {lvalue})'''
    ...
    def xrefEditEnabled (self, *args, **kwargs):
      '''
xrefEditEnabled( (Database)arg1) -> bool :

    C++ signature :
        bool xrefEditEnabled(class PyDbDatabase {lvalue})'''
    ...

class DbObject:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class DiametricDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs):
      '''
chordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extArcEndAngle (self, *args, **kwargs):
      '''
extArcEndAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs):
      '''
extArcStartAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def farChordPoint (self, *args, **kwargs):
      '''
farChordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d farChordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLength (self, *args, **kwargs):
      '''
leaderLength( (DiametricDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbDiametricDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setChordPoint (self, *args, **kwargs):
      '''
setChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs):
      '''
setExtArcEndAngle( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs):
      '''
setExtArcStartAngle( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setFarChordPoint (self, *args, **kwargs):
      '''
setFarChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFarChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLength (self, *args, **kwargs):
      '''
setLeaderLength( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLength(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Dictionary:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def asdict (self, *args, **kwargs):
      '''
asdict( (Dictionary)arg1) -> dict :

    C++ signature :
        class boost::python::dict asdict(class PyDbDictionary {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getAt (self, *args, **kwargs):
      '''
getAt( (Dictionary)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def has (self, *args, **kwargs):
      '''
has( (Dictionary)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class DimInspect:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kShapeAngular (self, *args, **kwargs):
      '''None'''
    ...
    def kShapeLabel (self, *args, **kwargs):
      '''None'''
    ...
    def kShapeNone (self, *args, **kwargs):
      '''None'''
    ...
    def kShapeRate (self, *args, **kwargs):
      '''None'''
    ...
    def kShapeRemove (self, *args, **kwargs):
      '''None'''
    ...
    def kShapeRound (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DimStyleTable:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def add (self, *args, **kwargs):
      '''
add( (DimStyleTable)arg1, (DimStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbDimStyleTable {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getAt (self, *args, **kwargs):
      '''
getAt( (DimStyleTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbDimStyleTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def has (self, *args, **kwargs):
      '''
has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def recordIds (self, *args, **kwargs):
      '''
recordIds( (DimStyleTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbDimStyleTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class DimStyleTableRecord:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs):
      '''
isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs):
      '''
isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Dimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class DrawLeaderOrderType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDrawLeaderHeadFirst (self, *args, **kwargs):
      '''None'''
    ...
    def kDrawLeaderTailFirst (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DrawMLeaderOrderType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDrawContentFirst (self, *args, **kwargs):
      '''None'''
    ...
    def kDrawLeaderFirst (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DuplicateRecordCloning:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDrcIgnore (self, *args, **kwargs):
      '''None'''
    ...
    def kDrcMangleName (self, *args, **kwargs):
      '''None'''
    ...
    def kDrcNotApplicable (self, *args, **kwargs):
      '''None'''
    ...
    def kDrcReplace (self, *args, **kwargs):
      '''None'''
    ...
    def kDrcUnmangleName (self, *args, **kwargs):
      '''None'''
    ...
    def kDrcXrefMangleName (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DxfCode:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDxfAlpha (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfArbHandle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfAttributePrompt (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfAttributeTag (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfBinaryChunk (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfBlockName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfBool (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfCLShapeName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfCLShapeText (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfCircleSides (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfColor (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfColorName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfColorRGB (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfComment (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfControlString (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDashLength (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDefaultLightingOn (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDefaultLightingType (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDescription (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimAPostStr (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimBlk (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimBlk1 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimBlk2 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimPostStr (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimStyleName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDimVarHandle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfDragVisualStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfEdgeStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfElevation (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfEmbeddedObjectStart (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfEnd (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfFaceStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfFirstEntId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientColCount (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientColVal (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientObjType (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientPatType (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientShift (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientTintType (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfGradientTintVal (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfHandle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfHardOwnershipId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfHardPointerId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfHasSubentities (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfHeaderId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfInt16 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfInt32 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfInt64 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfInt8 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfInvalid (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLayerLinetype (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLayerName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLayoutName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLineWeight (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypeAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypeElement (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypeName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypePDC (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypeProse (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLinetypeScale (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLiveSectionId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfLiveSectionName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfMaterialId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfMlineOffset (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfMstyleName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfNormalX (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfNormalY (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfNormalZ (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfObjVisualStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfOperator (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfPReactors (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfPixelScale (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfPlotStyleNameId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfPlotStyleNameType (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfReal (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfRegAppFlags (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfRegAppName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfRenderMode (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShadePlotId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShadowFlags (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShapeName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShapeScale (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShapeXOffset (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfShapeYOffset (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSoftOwnershipId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSoftPointerId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfStart (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSubclass (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSunId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSymTableRecComments (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSymTableRecName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfSymbolTableName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfText (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTextBigFontFile (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTextFontFile (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTextStyleName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfThickness (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTxtSize (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTxtStyleFlags (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTxtStylePSize (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfTxtStyleXScale (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfUCSOrg (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfUCSOriX (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfUCSOriY (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfVertexIdentifier (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewBackClip (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewBackgroundId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewBrightness (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewContrast (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewFrontClip (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewHeight (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewLensLength (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewMode (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewWidth (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportActive (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportAspect (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportGrid (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportGridDisplay (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportGridMajor (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportHeight (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportIcon (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportNumber (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportSnap (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportSnapAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportSnapPair (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportSnapStyle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportTwist (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportVisibility (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfViewportZoom (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfVisibility (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfVisualStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfVpVisualStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXDataStart (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXDictionary (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXInt16 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXReal (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXRefPath (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXTextString (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXXInt16 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXXXInt16 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdAsciiString (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdBinaryChunk (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdControlString (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdDist (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdHandle (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdInteger16 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdInteger32 (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdLayerName (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdMax (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdReal (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdScale (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldXCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldXDir (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldXDisp (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldYCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldYDir (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldYDisp (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldZCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldZDir (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdWorldZDisp (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdXCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdYCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfXdZCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfYCoord (self, *args, **kwargs):
      '''None'''
    ...
    def kDxfZCoord (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class EndCaps:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kEndCapAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kEndCapNone (self, *args, **kwargs):
      '''None'''
    ...
    def kEndCapRound (self, *args, **kwargs):
      '''None'''
    ...
    def kEndCapSquare (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Entity:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class EntityColor:
    def ByBlock (self, *args, **kwargs):
      '''
ByBlock() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByBlock()'''
    ...
    def ByLayer (self, *args, **kwargs):
      '''
ByLayer() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByLayer()'''
    ...
    def Foreground (self, *args, **kwargs):
      '''
Foreground() -> EntityColor :

    C++ signature :
        class AcCmEntityColor Foreground()'''
    ...
    def None (self, *args, **kwargs):
      '''
None() -> EntityColor :

    C++ signature :
        class AcCmEntityColor None()'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char,unsigned char,unsigned char)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def black (self, *args, **kwargs):
      '''
black() -> EntityColor :

    C++ signature :
        class AcCmEntityColor black()'''
    ...
    def blue (self, *args, **kwargs):
      '''
blue( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmEntityColor {lvalue})'''
    ...
    def canResolveRGB (self, *args, **kwargs):
      '''
canResolveRGB( (EntityColor)arg1) -> bool :

    C++ signature :
        bool canResolveRGB(class AcCmEntityColor {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (EntityColor)arg1) -> int :

    C++ signature :
        short colorIndex(class AcCmEntityColor {lvalue})'''
    ...
    def colorMethod (self, *args, **kwargs):
      '''
colorMethod( (EntityColor)arg1) -> ColorMethod :

    C++ signature :
        enum AcCmEntityColor::ColorMethod colorMethod(class AcCmEntityColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs):
      '''
getCOLORREF( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmEntityColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs):
      '''
getRGB( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmEntityColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs):
      '''
getRGBM( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmEntityColor {lvalue})'''
    ...
    def green (self, *args, **kwargs):
      '''
green( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmEntityColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs):
      '''
isByACI( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmEntityColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs):
      '''
isByBlock( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs):
      '''
isByColor( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmEntityColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs):
      '''
isByLayer( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs):
      '''
isByPen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmEntityColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs):
      '''
isForeground( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozen (self, *args, **kwargs):
      '''
isLayerFrozen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozen(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozenOrOff (self, *args, **kwargs):
      '''
isLayerFrozenOrOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozenOrOff(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerOff (self, *args, **kwargs):
      '''
isLayerOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs):
      '''
isNone( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmEntityColor {lvalue})'''
    ...
    def layerIndex (self, *args, **kwargs):
      '''
layerIndex( (EntityColor)arg1) -> int :

    C++ signature :
        int layerIndex(class AcCmEntityColor {lvalue})'''
    ...
    def makeTrueColor (self, *args, **kwargs):
      '''
makeTrueColor( (EntityColor)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor makeTrueColor(class AcCmEntityColor {lvalue})'''
    ...
    def penIndex (self, *args, **kwargs):
      '''
penIndex( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned short penIndex(class AcCmEntityColor {lvalue})'''
    ...
    def red (self, *args, **kwargs):
      '''
red( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmEntityColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs):
      '''
setByBlock( (EntityColor)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs):
      '''
setByLayer( (EntityColor)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs):
      '''
setCOLORREF( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (EntityColor)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class AcCmEntityColor {lvalue},short)'''
    ...
    def setForeground (self, *args, **kwargs):
      '''
setForeground( (EntityColor)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmEntityColor {lvalue})'''
    ...
    def setLayerIndex (self, *args, **kwargs):
      '''
setLayerIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerIndex(class AcCmEntityColor {lvalue},int)'''
    ...
    def setLayerOff (self, *args, **kwargs):
      '''
setLayerOff( (EntityColor)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs):
      '''
setNone( (EntityColor)arg1) -> None :

    C++ signature :
        void setNone(class AcCmEntityColor {lvalue})'''
    ...
    def setPenIndex (self, *args, **kwargs):
      '''
setPenIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPenIndex(class AcCmEntityColor {lvalue},unsigned short)'''
    ...
    def setRGB (self, *args, **kwargs):
      '''
setRGB( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned int)

setRGB( (EntityColor)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs):
      '''
setRGBM( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def white (self, *args, **kwargs):
      '''
white() -> EntityColor :

    C++ signature :
        class AcCmEntityColor white()'''
    ...

class ErrorStatus:
    def Ok (self, *args, **kwargs):
      '''None'''
    ...
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def eAbortPreview (self, *args, **kwargs):
      '''None'''
    ...
    def eAllInSameRigidSet (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyActive (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyHasRepresentation (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyInDb (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyInGroup (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyInactive (self, *args, **kwargs):
      '''None'''
    ...
    def eAlreadyInferred (self, *args, **kwargs):
      '''None'''
    ...
    def eAmbiguousInput (self, *args, **kwargs):
      '''None'''
    ...
    def eAmbiguousOutput (self, *args, **kwargs):
      '''None'''
    ...
    def eAnonymousEntry (self, *args, **kwargs):
      '''None'''
    ...
    def eAtMaxReaders (self, *args, **kwargs):
      '''None'''
    ...
    def eBackgroundPlotInProgress (self, *args, **kwargs):
      '''None'''
    ...
    def eBadColor (self, *args, **kwargs):
      '''None'''
    ...
    def eBadColorIndex (self, *args, **kwargs):
      '''None'''
    ...
    def eBadDwgHeader (self, *args, **kwargs):
      '''None'''
    ...
    def eBadDxfFile (self, *args, **kwargs):
      '''None'''
    ...
    def eBadDxfSequence (self, *args, **kwargs):
      '''None'''
    ...
    def eBadLayerName (self, *args, **kwargs):
      '''None'''
    ...
    def eBadLineWeightValue (self, *args, **kwargs):
      '''None'''
    ...
    def eBadLinetypeName (self, *args, **kwargs):
      '''None'''
    ...
    def eBadLinetypeScale (self, *args, **kwargs):
      '''None'''
    ...
    def eBadMaterialName (self, *args, **kwargs):
      '''None'''
    ...
    def eBadPaperspaceView (self, *args, **kwargs):
      '''None'''
    ...
    def eBadPlotStyleName (self, *args, **kwargs):
      '''None'''
    ...
    def eBadPlotStyleNameHandle (self, *args, **kwargs):
      '''None'''
    ...
    def eBadPlotStyleType (self, *args, **kwargs):
      '''None'''
    ...
    def eBadUCS (self, *args, **kwargs):
      '''None'''
    ...
    def eBadVisibilityValue (self, *args, **kwargs):
      '''None'''
    ...
    def eBadlyNestedAppData (self, *args, **kwargs):
      '''None'''
    ...
    def eBinaryDataSizeExceeded (self, *args, **kwargs):
      '''None'''
    ...
    def eBlockDefInEntitySection (self, *args, **kwargs):
      '''None'''
    ...
    def eBrokenHandle (self, *args, **kwargs):
      '''None'''
    ...
    def eBufferTooSmall (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotBeErasedByCaller (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotBeResurrected (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotChangeActiveViewport (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotChangeColumnType (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotExplodeEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotNestBlockDefs (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotPlotToFile (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotRestoreFromAcisFile (self, *args, **kwargs):
      '''None'''
    ...
    def eCannotScaleNonUniformly (self, *args, **kwargs):
      '''None'''
    ...
    def eCantOpenFile (self, *args, **kwargs):
      '''None'''
    ...
    def eChangedAgainstAssociativity (self, *args, **kwargs):
      '''None'''
    ...
    def eCloseFailObjectDamaged (self, *args, **kwargs):
      '''None'''
    ...
    def eCloseModifyAborted (self, *args, **kwargs):
      '''None'''
    ...
    def eClosePartialFailure (self, *args, **kwargs):
      '''None'''
    ...
    def eCloseWasNotifying (self, *args, **kwargs):
      '''None'''
    ...
    def eCommandWasInProgress (self, *args, **kwargs):
      '''None'''
    ...
    def eContainerNotEmpty (self, *args, **kwargs):
      '''None'''
    ...
    def eConvertImageFormatFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eCopyDoesNotExist (self, *args, **kwargs):
      '''None'''
    ...
    def eCopyFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eCopyInvalidName (self, *args, **kwargs):
      '''None'''
    ...
    def eCopyIsModelSpace (self, *args, **kwargs):
      '''None'''
    ...
    def eCopyNameExists (self, *args, **kwargs):
      '''None'''
    ...
    def eCreateFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eCreateInvalidName (self, *args, **kwargs):
      '''None'''
    ...
    def eCustomSizeNotPossible (self, *args, **kwargs):
      '''None'''
    ...
    def eCyclicDependency (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkAdapterNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkBadConnectionString (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkConnectionFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkExcelNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkInvalidAdapterId (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkNotUpdatedYet (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkOtherError (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkSourceIsWriteProtected (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkSourceNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDataLinkSourceUpdateNotAllowed (self, *args, **kwargs):
      '''None'''
    ...
    def eDataTooLarge (self, *args, **kwargs):
      '''None'''
    ...
    def eDatabaseObjectsOpen (self, *args, **kwargs):
      '''None'''
    ...
    def eDegenerateGeometry (self, *args, **kwargs):
      '''None'''
    ...
    def eDelDoesNotExist (self, *args, **kwargs):
      '''None'''
    ...
    def eDelIsModelSpace (self, *args, **kwargs):
      '''None'''
    ...
    def eDelLastLayout (self, *args, **kwargs):
      '''None'''
    ...
    def eDelUnableToFind (self, *args, **kwargs):
      '''None'''
    ...
    def eDelUnableToSetCurrent (self, *args, **kwargs):
      '''None'''
    ...
    def eDelayMore (self, *args, **kwargs):
      '''None'''
    ...
    def eDeleteEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eDeletedEntry (self, *args, **kwargs):
      '''None'''
    ...
    def eDependentOnObjectErased (self, *args, **kwargs):
      '''None'''
    ...
    def eDeviceNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDocumentSwitchDisabled (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateBlockDefinition (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateBlockName (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateDxfField (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateIndex (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateKey (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateLayerName (self, *args, **kwargs):
      '''None'''
    ...
    def eDuplicateRecordName (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgCRCDoesNotMatch (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgNeedsAFullSave (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgNotRecoverable (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgObjectImproperlyRead (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgRecoveredOK (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgSentinelDoesNotMatch (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgShareDemandLoad (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgShareReadAccess (self, *args, **kwargs):
      '''None'''
    ...
    def eDwgShareWriteAccess (self, *args, **kwargs):
      '''None'''
    ...
    def eDwkLockFileFound (self, *args, **kwargs):
      '''None'''
    ...
    def eDxbPartiallyRead (self, *args, **kwargs):
      '''None'''
    ...
    def eDxbReadAborted (self, *args, **kwargs):
      '''None'''
    ...
    def eDxfPartiallyRead (self, *args, **kwargs):
      '''None'''
    ...
    def eDxfReadAborted (self, *args, **kwargs):
      '''None'''
    ...
    def eEmbeddedIntersections (self, *args, **kwargs):
      '''None'''
    ...
    def eEmptyOperand (self, *args, **kwargs):
      '''None'''
    ...
    def eEndOfFile (self, *args, **kwargs):
      '''None'''
    ...
    def eEndOfObject (self, *args, **kwargs):
      '''None'''
    ...
    def eEndPreview (self, *args, **kwargs):
      '''None'''
    ...
    def eEntityInInactiveLayout (self, *args, **kwargs):
      '''None'''
    ...
    def eEntityRestricedInDOF (self, *args, **kwargs):
      '''None'''
    ...
    def eExcessiveItemCount (self, *args, **kwargs):
      '''None'''
    ...
    def eExplodeBeforeTransform (self, *args, **kwargs):
      '''None'''
    ...
    def eFSMError (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedCurveCheck (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToBlend (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToEvaluate (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToEvaluateDependents (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToSetEdgeChamfers (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToSetEdgeRounds (self, *args, **kwargs):
      '''None'''
    ...
    def eFailedToSetVertexRounds (self, *args, **kwargs):
      '''None'''
    ...
    def eFileAccessErr (self, *args, **kwargs):
      '''None'''
    ...
    def eFileExists (self, *args, **kwargs):
      '''None'''
    ...
    def eFileInternalErr (self, *args, **kwargs):
      '''None'''
    ...
    def eFileLockedByACAD (self, *args, **kwargs):
      '''None'''
    ...
    def eFileMissingSections (self, *args, **kwargs):
      '''None'''
    ...
    def eFileNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eFileNotInCloud (self, *args, **kwargs):
      '''None'''
    ...
    def eFileSharingViolation (self, *args, **kwargs):
      '''None'''
    ...
    def eFileSystemErr (self, *args, **kwargs):
      '''None'''
    ...
    def eFileTooManyOpen (self, *args, **kwargs):
      '''None'''
    ...
    def eFilerError (self, *args, **kwargs):
      '''None'''
    ...
    def eFixedAllErrors (self, *args, **kwargs):
      '''None'''
    ...
    def eGeneralModelingFailure (self, *args, **kwargs):
      '''None'''
    ...
    def eGetAdIntImgServicesFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eGetImageBytesFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eGetImageDIBFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eGetPreviewImageFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphContainsProxies (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphCyclesFound (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphEdgeAlreadyExists (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphEdgeNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphNodeAlreadyExists (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphNodeNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eGraphicsNotGenerated (self, *args, **kwargs):
      '''None'''
    ...
    def eGuidNoAddress (self, *args, **kwargs):
      '''None'''
    ...
    def eHadMultipleReaders (self, *args, **kwargs):
      '''None'''
    ...
    def eHandleExists (self, *args, **kwargs):
      '''None'''
    ...
    def eHandleInUse (self, *args, **kwargs):
      '''None'''
    ...
    def eHatchTooDense (self, *args, **kwargs):
      '''None'''
    ...
    def eIgnoredLinetypeRedef (self, *args, **kwargs):
      '''None'''
    ...
    def eIllegalEntityType (self, *args, **kwargs):
      '''None'''
    ...
    def eIllegalReplacement (self, *args, **kwargs):
      '''None'''
    ...
    def eInProcessOfCommitting (self, *args, **kwargs):
      '''None'''
    ...
    def eIncompatiblePlotSettings (self, *args, **kwargs):
      '''None'''
    ...
    def eIncompleteBlockDefinition (self, *args, **kwargs):
      '''None'''
    ...
    def eIncompleteComplexObject (self, *args, **kwargs):
      '''None'''
    ...
    def eInconsistentConstraint (self, *args, **kwargs):
      '''None'''
    ...
    def eInetBadPath (self, *args, **kwargs):
      '''None'''
    ...
    def eInetBase (self, *args, **kwargs):
      '''None'''
    ...
    def eInetCreateInternetSessionFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eInetDirectoryFull (self, *args, **kwargs):
      '''None'''
    ...
    def eInetDiskFull (self, *args, **kwargs):
      '''None'''
    ...
    def eInetFileAccessDenied (self, *args, **kwargs):
      '''None'''
    ...
    def eInetFileGenericError (self, *args, **kwargs):
      '''None'''
    ...
    def eInetFileNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eInetFileOpenFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eInetGenericException (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHardwareError (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpAccessDenied (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpBadGateway (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpBadMethod (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpBadRequest (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpConflict (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpGatewayTimeout (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpLengthRequired (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpNoAcceptableResponse (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpNotSupported (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpObjectNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpOpenRequestFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpPaymentRequired (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpPreconditionFailure (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpProxyAuthorizationRequired (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpRequestForbidden (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpRequestTooLarge (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpResourceGone (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpServerError (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpServiceUnavailable (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpTimedOut (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpUnsupportedMedia (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpUriTooLong (self, *args, **kwargs):
      '''None'''
    ...
    def eInetHttpVersionNotSupported (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInCache (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInternetError (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInternetSessionConnectFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInternetSessionOpenFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInvalidAccessType (self, *args, **kwargs):
      '''None'''
    ...
    def eInetInvalidFileHandle (self, *args, **kwargs):
      '''None'''
    ...
    def eInetNoAcadInet (self, *args, **kwargs):
      '''None'''
    ...
    def eInetNoWinInet (self, *args, **kwargs):
      '''None'''
    ...
    def eInetNotAnURL (self, *args, **kwargs):
      '''None'''
    ...
    def eInetNotImplemented (self, *args, **kwargs):
      '''None'''
    ...
    def eInetOk (self, *args, **kwargs):
      '''None'''
    ...
    def eInetOldWinInet (self, *args, **kwargs):
      '''None'''
    ...
    def eInetProtocolNotSupported (self, *args, **kwargs):
      '''None'''
    ...
    def eInetSharingViolation (self, *args, **kwargs):
      '''None'''
    ...
    def eInetTooManyOpenFiles (self, *args, **kwargs):
      '''None'''
    ...
    def eInetUnknownError (self, *args, **kwargs):
      '''None'''
    ...
    def eInetUserCancelledTransfer (self, *args, **kwargs):
      '''None'''
    ...
    def eInetValidURL (self, *args, **kwargs):
      '''None'''
    ...
    def eInsertAfter (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidAdsName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidAxis (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidBlockName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidContext (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDimStyle (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDwgVersion (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDxf2dPoint (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDxf3dPoint (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDxfCode (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidDxfSectionName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidEngineState (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidExpression (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidExtents (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidFaceVertexIndex (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidFileExtension (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidFix (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidIdMap (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidIndex (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidInput (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidKey (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidLayer (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidMeshVertexIndex (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidNormal (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidObjectId (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidOffset (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidOpenState  (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidOwnerObject (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidParameterName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidPlotArea (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidPlotInfo (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidPreviewImage (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidProfileName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidREFIID (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidResBuf (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidStyle (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidSymTableFlag (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidSymbolTableName (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidTextStyle (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidView (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidWindowArea (self, *args, **kwargs):
      '''None'''
    ...
    def eInvalidXrefObjectId (self, *args, **kwargs):
      '''None'''
    ...
    def eIsAnEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eIsReading (self, *args, **kwargs):
      '''None'''
    ...
    def eIsWriteProtected (self, *args, **kwargs):
      '''None'''
    ...
    def eIsWriting (self, *args, **kwargs):
      '''None'''
    ...
    def eIsXRefObject (self, *args, **kwargs):
      '''None'''
    ...
    def eItemCountChanged (self, *args, **kwargs):
      '''None'''
    ...
    def eIteratorDone (self, *args, **kwargs):
      '''None'''
    ...
    def eKeyNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eLISPActive (self, *args, **kwargs):
      '''None'''
    ...
    def eLayerGroupCodeMissing (self, *args, **kwargs):
      '''None'''
    ...
    def eLayoutNotCurrent (self, *args, **kwargs):
      '''None'''
    ...
    def eLeftErrorsUnfixed (self, *args, **kwargs):
      '''None'''
    ...
    def eLoadFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eLockChangeInProgress (self, *args, **kwargs):
      '''None'''
    ...
    def eLockConflict (self, *args, **kwargs):
      '''None'''
    ...
    def eLockViolation (self, *args, **kwargs):
      '''None'''
    ...
    def eLongTransReferenceError (self, *args, **kwargs):
      '''None'''
    ...
    def eMakeMeProxy (self, *args, **kwargs):
      '''None'''
    ...
    def eMakeMeProxyAndResurrect (self, *args, **kwargs):
      '''None'''
    ...
    def eMaxLayouts (self, *args, **kwargs):
      '''None'''
    ...
    def eMaxNodes (self, *args, **kwargs):
      '''None'''
    ...
    def eMissingBlockName (self, *args, **kwargs):
      '''None'''
    ...
    def eMissingDxfField (self, *args, **kwargs):
      '''None'''
    ...
    def eMissingDxfSection (self, *args, **kwargs):
      '''None'''
    ...
    def eMissingSymbolTable (self, *args, **kwargs):
      '''None'''
    ...
    def eMissingSymbolTableRec (self, *args, **kwargs):
      '''None'''
    ...
    def eModifyingAssociativeEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eModifyingDimensionWithExpression (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe0to2 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe0to3 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe0to4 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe0to5 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe0to8 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe1to15 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe1to6 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBe1to8 (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBeInteger (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBeNonNegative (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBeNonZero (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBePositive (self, *args, **kwargs):
      '''None'''
    ...
    def eMustBePositiveInteger (self, *args, **kwargs):
      '''None'''
    ...
    def eMustFirstAddBlockToDb (self, *args, **kwargs):
      '''None'''
    ...
    def eMustOpenThruOwner (self, *args, **kwargs):
      '''None'''
    ...
    def eMustPlotToFile (self, *args, **kwargs):
      '''None'''
    ...
    def eNLSFileNotAvailable (self, *args, **kwargs):
      '''None'''
    ...
    def eNearSizeLimit (self, *args, **kwargs):
      '''None'''
    ...
    def eNegativeValueNotAllowed (self, *args, **kwargs):
      '''None'''
    ...
    def eNoAcDbHostApplication (self, *args, **kwargs):
      '''None'''
    ...
    def eNoActiveTransactions (self, *args, **kwargs):
      '''None'''
    ...
    def eNoBlockBegin (self, *args, **kwargs):
      '''None'''
    ...
    def eNoClassId (self, *args, **kwargs):
      '''None'''
    ...
    def eNoConnectedBlendSet (self, *args, **kwargs):
      '''None'''
    ...
    def eNoCurrentConfig (self, *args, **kwargs):
      '''None'''
    ...
    def eNoDatabase (self, *args, **kwargs):
      '''None'''
    ...
    def eNoDocument (self, *args, **kwargs):
      '''None'''
    ...
    def eNoEntitiesFromPersistentIds (self, *args, **kwargs):
      '''None'''
    ...
    def eNoErrorHandler (self, *args, **kwargs):
      '''None'''
    ...
    def eNoFileName (self, *args, **kwargs):
      '''None'''
    ...
    def eNoInputFiler (self, *args, **kwargs):
      '''None'''
    ...
    def eNoInputPath (self, *args, **kwargs):
      '''None'''
    ...
    def eNoInternalSpace (self, *args, **kwargs):
      '''None'''
    ...
    def eNoIntersections (self, *args, **kwargs):
      '''None'''
    ...
    def eNoLabelBlock (self, *args, **kwargs):
      '''None'''
    ...
    def eNoLayout (self, *args, **kwargs):
      '''None'''
    ...
    def eNoMatchingMedia (self, *args, **kwargs):
      '''None'''
    ...
    def eNoNodeActive (self, *args, **kwargs):
      '''None'''
    ...
    def eNoOverride (self, *args, **kwargs):
      '''None'''
    ...
    def eNoPlotStyleTranslationTable (self, *args, **kwargs):
      '''None'''
    ...
    def eNoPreviewContext (self, *args, **kwargs):
      '''None'''
    ...
    def eNoRepresentation (self, *args, **kwargs):
      '''None'''
    ...
    def eNoStoredOverrides (self, *args, **kwargs):
      '''None'''
    ...
    def eNoStoredReconcileStatus (self, *args, **kwargs):
      '''None'''
    ...
    def eNoThumbnailBitmap (self, *args, **kwargs):
      '''None'''
    ...
    def eNoUnderlayHost (self, *args, **kwargs):
      '''None'''
    ...
    def eNoViewAssociation (self, *args, **kwargs):
      '''None'''
    ...
    def eNoWorkSet (self, *args, **kwargs):
      '''None'''
    ...
    def eNonCoplanarGeometry (self, *args, **kwargs):
      '''None'''
    ...
    def eNonPlanarEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eNonePlotDevice (self, *args, **kwargs):
      '''None'''
    ...
    def eNotAllowedForThisProxy (self, *args, **kwargs):
      '''None'''
    ...
    def eNotAnEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eNotApplicable (self, *args, **kwargs):
      '''None'''
    ...
    def eNotAssociative (self, *args, **kwargs):
      '''None'''
    ...
    def eNotClonedPrimaryProxy (self, *args, **kwargs):
      '''None'''
    ...
    def eNotConnected (self, *args, **kwargs):
      '''None'''
    ...
    def eNotCurrentDatabase (self, *args, **kwargs):
      '''None'''
    ...
    def eNotDxfHeaderGroupCode (self, *args, **kwargs):
      '''None'''
    ...
    def eNotFromThisDocument (self, *args, **kwargs):
      '''None'''
    ...
    def eNotG1Continuous (self, *args, **kwargs):
      '''None'''
    ...
    def eNotHandled (self, *args, **kwargs):
      '''None'''
    ...
    def eNotImplementedYet (self, *args, **kwargs):
      '''None'''
    ...
    def eNotInBlock (self, *args, **kwargs):
      '''None'''
    ...
    def eNotInDatabase (self, *args, **kwargs):
      '''None'''
    ...
    def eNotInGroup (self, *args, **kwargs):
      '''None'''
    ...
    def eNotInPaperspace (self, *args, **kwargs):
      '''None'''
    ...
    def eNotInitializedYet (self, *args, **kwargs):
      '''None'''
    ...
    def eNotMultiPageCapable (self, *args, **kwargs):
      '''None'''
    ...
    def eNotNewlyCreated (self, *args, **kwargs):
      '''None'''
    ...
    def eNotOnBoundary (self, *args, **kwargs):
      '''None'''
    ...
    def eNotOpenForRead (self, *args, **kwargs):
      '''None'''
    ...
    def eNotOpenForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def eNotShownInPropertyPalette (self, *args, **kwargs):
      '''None'''
    ...
    def eNotSupportedInDwgApi (self, *args, **kwargs):
      '''None'''
    ...
    def eNotThatKindOfClass (self, *args, **kwargs):
      '''None'''
    ...
    def eNotTopTransaction (self, *args, **kwargs):
      '''None'''
    ...
    def eNullBlockName (self, *args, **kwargs):
      '''None'''
    ...
    def eNullEntityPointer (self, *args, **kwargs):
      '''None'''
    ...
    def eNullExtents (self, *args, **kwargs):
      '''None'''
    ...
    def eNullHandle (self, *args, **kwargs):
      '''None'''
    ...
    def eNullIterator (self, *args, **kwargs):
      '''None'''
    ...
    def eNullNodeId (self, *args, **kwargs):
      '''None'''
    ...
    def eNullObjectId (self, *args, **kwargs):
      '''None'''
    ...
    def eNullObjectPointer (self, *args, **kwargs):
      '''None'''
    ...
    def eNullPtr (self, *args, **kwargs):
      '''None'''
    ...
    def eNumberOfCopiesNotSupported (self, *args, **kwargs):
      '''None'''
    ...
    def eObjectIsReferenced (self, *args, **kwargs):
      '''None'''
    ...
    def eObjectToBeDeleted (self, *args, **kwargs):
      '''None'''
    ...
    def eObsoleteFileFormat (self, *args, **kwargs):
      '''None'''
    ...
    def eOk (self, *args, **kwargs):
      '''None'''
    ...
    def eOnLockedLayer (self, *args, **kwargs):
      '''None'''
    ...
    def eOpenFileCancelled (self, *args, **kwargs):
      '''None'''
    ...
    def eOtherObjectsBusy (self, *args, **kwargs):
      '''None'''
    ...
    def eOutOfDisk (self, *args, **kwargs):
      '''None'''
    ...
    def eOutOfMemory (self, *args, **kwargs):
      '''None'''
    ...
    def eOutOfPagerMemory (self, *args, **kwargs):
      '''None'''
    ...
    def eOutOfRange (self, *args, **kwargs):
      '''None'''
    ...
    def eOverDefinedConstraint (self, *args, **kwargs):
      '''None'''
    ...
    def eOwnerNotInDatabase (self, *args, **kwargs):
      '''None'''
    ...
    def eOwnerNotOpenForRead (self, *args, **kwargs):
      '''None'''
    ...
    def eOwnerNotOpenForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def eOwnerNotSet (self, *args, **kwargs):
      '''None'''
    ...
    def eOwnerToBeTransformed (self, *args, **kwargs):
      '''None'''
    ...
    def ePCCoordSysAssignFail (self, *args, **kwargs):
      '''None'''
    ...
    def ePCCoordSysReprojectFail (self, *args, **kwargs):
      '''None'''
    ...
    def ePCDiskSpaceTooSmall (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileDataSelectorInvalid (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotClosed (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotCreated (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotErased (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotOpened (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileNotWritten (self, *args, **kwargs):
      '''None'''
    ...
    def ePCFileWrongFormat (self, *args, **kwargs):
      '''None'''
    ...
    def ePCInProgress (self, *args, **kwargs):
      '''None'''
    ...
    def ePCLargeData (self, *args, **kwargs):
      '''None'''
    ...
    def ePCLastImporterUnfinished (self, *args, **kwargs):
      '''None'''
    ...
    def ePCNoEngineInfo (self, *args, **kwargs):
      '''None'''
    ...
    def ePCThreadTerminated (self, *args, **kwargs):
      '''None'''
    ...
    def ePCUnknown (self, *args, **kwargs):
      '''None'''
    ...
    def ePCUnknownFileType (self, *args, **kwargs):
      '''None'''
    ...
    def ePageCancelled (self, *args, **kwargs):
      '''None'''
    ...
    def ePagerError (self, *args, **kwargs):
      '''None'''
    ...
    def ePagerWriteError (self, *args, **kwargs):
      '''None'''
    ...
    def ePermanentlyErased (self, *args, **kwargs):
      '''None'''
    ...
    def ePlotAlreadyStarted (self, *args, **kwargs):
      '''None'''
    ...
    def ePlotCancelled (self, *args, **kwargs):
      '''None'''
    ...
    def ePlotStyleInColorDependentMode (self, *args, **kwargs):
      '''None'''
    ...
    def ePointNotOnEntity (self, *args, **kwargs):
      '''None'''
    ...
    def ePolyWidthLost (self, *args, **kwargs):
      '''None'''
    ...
    def ePreviewFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eProfileDoesNotExist (self, *args, **kwargs):
      '''None'''
    ...
    def eProfileIsInUse (self, *args, **kwargs):
      '''None'''
    ...
    def eProperClassSeparatorExpected (self, *args, **kwargs):
      '''None'''
    ...
    def eReadImageBufferFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eRecordNotInTable (self, *args, **kwargs):
      '''None'''
    ...
    def eReferencedInEquation (self, *args, **kwargs):
      '''None'''
    ...
    def eRegappIdNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eRegistryAccessError (self, *args, **kwargs):
      '''None'''
    ...
    def eRegistryCreateError (self, *args, **kwargs):
      '''None'''
    ...
    def eRenameDoesNotExist (self, *args, **kwargs):
      '''None'''
    ...
    def eRenameInvalidLayoutName (self, *args, **kwargs):
      '''None'''
    ...
    def eRenameInvalidName (self, *args, **kwargs):
      '''None'''
    ...
    def eRenameIsModelSpace (self, *args, **kwargs):
      '''None'''
    ...
    def eRenameLayoutAlreadyExists (self, *args, **kwargs):
      '''None'''
    ...
    def eRepeatEntity (self, *args, **kwargs):
      '''None'''
    ...
    def eRepeatedDwgRead (self, *args, **kwargs):
      '''None'''
    ...
    def eRowsMustMatchColumns (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorCipherNotSupported (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorComputingSignature (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorDecryptingData (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorEncryptingData (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorGeneratingTimestamp (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorReadingFile (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorWritingFile (self, *args, **kwargs):
      '''None'''
    ...
    def eSecErrorWritingSignature (self, *args, **kwargs):
      '''None'''
    ...
    def eSecInitializationFailure (self, *args, **kwargs):
      '''None'''
    ...
    def eSecInvalidDigitalID (self, *args, **kwargs):
      '''None'''
    ...
    def eSelfIntersecting (self, *args, **kwargs):
      '''None'''
    ...
    def eSelfReference (self, *args, **kwargs):
      '''None'''
    ...
    def eSetFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eSilentOpenFileCancelled (self, *args, **kwargs):
      '''None'''
    ...
    def eSingularPoint (self, *args, **kwargs):
      '''None'''
    ...
    def eSomeInputDataLeftUnread (self, *args, **kwargs):
      '''None'''
    ...
    def eStringNotAllowedInExpression (self, *args, **kwargs):
      '''None'''
    ...
    def eStringTooLong (self, *args, **kwargs):
      '''None'''
    ...
    def eSubSelectionSetEmpty (self, *args, **kwargs):
      '''None'''
    ...
    def eSubentitiesStillOpen (self, *args, **kwargs):
      '''None'''
    ...
    def eTargetDocNotQuiescent (self, *args, **kwargs):
      '''None'''
    ...
    def eTooFewLineTypeElements (self, *args, **kwargs):
      '''None'''
    ...
    def eTooFewVertices (self, *args, **kwargs):
      '''None'''
    ...
    def eTooManyActiveCommands (self, *args, **kwargs):
      '''None'''
    ...
    def eTooManyLineTypeElements (self, *args, **kwargs):
      '''None'''
    ...
    def eTooManyVertices (self, *args, **kwargs):
      '''None'''
    ...
    def eTransactionOpenWhileCommandEnded (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToGetLabelBlock (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToGetViewAssociation (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToRemoveAssociation  (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToRemoveOverrides (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToRetrieveOverrides (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToSetLabelBlock (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToSetViewAssociation (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToStoreOverrides (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToStoreReconcileStatus (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToSyncModelView (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToTrimLastPiece (self, *args, **kwargs):
      '''None'''
    ...
    def eUnableToTrimSurface (self, *args, **kwargs):
      '''None'''
    ...
    def eUndefineShapeName (self, *args, **kwargs):
      '''None'''
    ...
    def eUndefinedDxfGroupCode (self, *args, **kwargs):
      '''None'''
    ...
    def eUndefinedLineType (self, *args, **kwargs):
      '''None'''
    ...
    def eUndoNoGroupBegin (self, *args, **kwargs):
      '''None'''
    ...
    def eUndoOperationNotAvailable (self, *args, **kwargs):
      '''None'''
    ...
    def eUnknownDxfFileFormat (self, *args, **kwargs):
      '''None'''
    ...
    def eUnknownHandle (self, *args, **kwargs):
      '''None'''
    ...
    def eUnrecoverableErrors (self, *args, **kwargs):
      '''None'''
    ...
    def eUnsupportedFileFormat (self, *args, **kwargs):
      '''None'''
    ...
    def eUserBreak (self, *args, **kwargs):
      '''None'''
    ...
    def eUserUnloaded (self, *args, **kwargs):
      '''None'''
    ...
    def eVSAPIOnlyValues (self, *args, **kwargs):
      '''None'''
    ...
    def eVSAlreadyExists (self, *args, **kwargs):
      '''None'''
    ...
    def eVSFalse (self, *args, **kwargs):
      '''None'''
    ...
    def eVSIsAcadDefault (self, *args, **kwargs):
      '''None'''
    ...
    def eVSIsInUse (self, *args, **kwargs):
      '''None'''
    ...
    def eVSNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def eVSOneOffCreated (self, *args, **kwargs):
      '''None'''
    ...
    def eVSTrue (self, *args, **kwargs):
      '''None'''
    ...
    def eVertexAfterFace (self, *args, **kwargs):
      '''None'''
    ...
    def eVetoed (self, *args, **kwargs):
      '''None'''
    ...
    def eWasErased (self, *args, **kwargs):
      '''None'''
    ...
    def eWasNotErased (self, *args, **kwargs):
      '''None'''
    ...
    def eWasNotForwarding (self, *args, **kwargs):
      '''None'''
    ...
    def eWasNotOpenForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def eWasNotifying (self, *args, **kwargs):
      '''None'''
    ...
    def eWasOpenForNotify (self, *args, **kwargs):
      '''None'''
    ...
    def eWasOpenForRead (self, *args, **kwargs):
      '''None'''
    ...
    def eWasOpenForUndo (self, *args, **kwargs):
      '''None'''
    ...
    def eWasOpenForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def eWriteImageBufferFailed (self, *args, **kwargs):
      '''None'''
    ...
    def eWrongCellType (self, *args, **kwargs):
      '''None'''
    ...
    def eWrongDatabase (self, *args, **kwargs):
      '''None'''
    ...
    def eWrongObjectType (self, *args, **kwargs):
      '''None'''
    ...
    def eWrongSubentityType (self, *args, **kwargs):
      '''None'''
    ...
    def eXRefDependent (self, *args, **kwargs):
      '''None'''
    ...
    def eXdataSizeExceeded (self, *args, **kwargs):
      '''None'''
    ...
    def eXrefReloadImpossibleAtThisTime (self, *args, **kwargs):
      '''None'''
    ...
    def eXrefReloaded (self, *args, **kwargs):
      '''None'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Extents:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def addExt (self, *args, **kwargs):
      '''
addExt( (Extents)arg1, (Extents)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents {lvalue},class AcDbExtents)'''
    ...
    def addPoint (self, *args, **kwargs):
      '''
addPoint( (Extents)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents {lvalue},class AcGePoint3d)'''
    ...
    def expandBy (self, *args, **kwargs):
      '''
expandBy( (Extents)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents {lvalue},class AcGeVector3d)'''
    ...
    def maxPoint (self, *args, **kwargs):
      '''
maxPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d maxPoint(class AcDbExtents {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs):
      '''
minPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d minPoint(class AcDbExtents {lvalue})'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Extents)arg1, (Point3d)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents {lvalue},class AcGePoint3d,class AcGePoint3d)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Extents)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents {lvalue},class AcGeMatrix3d)'''
    ...

class Extents2d:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents2d)

__init__( (object)arg1, (Point2d)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d,class AcGePoint2d)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def addExt (self, *args, **kwargs):
      '''
addExt( (Extents2d)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents2d {lvalue},class AcDbExtents2d)'''
    ...
    def addPoint (self, *args, **kwargs):
      '''
addPoint( (Extents2d)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents2d {lvalue},class AcGePoint2d)'''
    ...
    def expandBy (self, *args, **kwargs):
      '''
expandBy( (Extents2d)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents2d {lvalue},class AcGeVector2d)'''
    ...
    def maxPoint (self, *args, **kwargs):
      '''
maxPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d maxPoint(class AcDbExtents2d {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs):
      '''
minPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d minPoint(class AcDbExtents2d {lvalue})'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Extents2d)arg1, (Point2d)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents2d {lvalue},class AcGePoint2d,class AcGePoint2d)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Extents2d)arg1, (Matrix2d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents2d {lvalue},class AcGeMatrix2d)'''
    ...

class ExtrudedSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Face:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (bool)arg5, (bool)arg6, (bool)arg7, (bool)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (bool)arg6, (bool)arg7, (bool)arg8, (bool)arg9) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getVertexAt (self, *args, **kwargs):
      '''
getVertexAt( (Face)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertexAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs):
      '''
isEdgeVisibleAt( (Face)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs):
      '''
makeEdgeInvisibleAt( (Face)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeInvisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs):
      '''
makeEdgeVisibleAt( (Face)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVertexAt (self, *args, **kwargs):
      '''
setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)

setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class FaceRecord:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (DxfCode)arg2, (DxfCode)arg3, (DxfCode)arg4, (DxfCode)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,short,short,short,short)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getVertexAt (self, *args, **kwargs):
      '''
getVertexAt( (FaceRecord)arg1, (int)arg2) -> int :

    C++ signature :
        short getVertexAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs):
      '''
isEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs):
      '''
makeEdgeInvisibleAt( (FaceRecord)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeInvisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs):
      '''
makeEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVertexAt (self, *args, **kwargs):
      '''
setVertexAt( (FaceRecord)arg1, (int)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFaceRecord {lvalue},unsigned short,short)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Fcf:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (str)arg2, (Point3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimclrd (self, *args, **kwargs):
      '''
dimclrd( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbFcf {lvalue})'''
    ...
    def dimclrt (self, *args, **kwargs):
      '''
dimclrt( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrt(class PyDbFcf {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Fcf)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbFcf {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs):
      '''
dimgap( (Fcf)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbFcf {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs):
      '''
dimscale( (Fcf)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbFcf {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs):
      '''
dimtxsty( (Fcf)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbFcf {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs):
      '''
dimtxt( (Fcf)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbFcf {lvalue})'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbFcf {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getBoundingPline (self, *args, **kwargs):
      '''
getBoundingPline( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPline(class PyDbFcf {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs):
      '''
getBoundingPoints( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbFcf {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Fcf)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbFcf {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def location (self, *args, **kwargs):
      '''
location( (Fcf)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbFcf {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbFcf {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimVars (self, *args, **kwargs):
      '''
setDimVars( (Fcf)arg1) -> None :

    C++ signature :
        void setDimVars(class PyDbFcf {lvalue})'''
    ...
    def setDimclrd (self, *args, **kwargs):
      '''
setDimclrd( (Fcf)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrd(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimclrt (self, *args, **kwargs):
      '''
setDimclrt( (Fcf)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrt(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Fcf)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbFcf {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs):
      '''
setDimgap( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimgap(class PyDbFcf {lvalue},double)'''
    ...
    def setDimscale (self, *args, **kwargs):
      '''
setDimscale( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimscale(class PyDbFcf {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Fcf)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbFcf {lvalue},class PyDbDimStyleTableRecord)

setDimstyleData( (Fcf)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbFcf {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxsty (self, *args, **kwargs):
      '''
setDimtxsty( (Fcf)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxsty(class PyDbFcf {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDimtxt (self, *args, **kwargs):
      '''
setDimtxt( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxt(class PyDbFcf {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLocation (self, *args, **kwargs):
      '''
setLocation( (Fcf)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbFcf {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOrientation (self, *args, **kwargs):
      '''
setOrientation( (Fcf)arg1, (Vector3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setOrientation(class PyDbFcf {lvalue},class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setText (self, *args, **kwargs):
      '''
setText( (Fcf)arg1, (str)arg2) -> None :

    C++ signature :
        void setText(class PyDbFcf {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def text (self, *args, **kwargs):
      '''
text( (Fcf)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbFcf {lvalue},int)'''
    ...
    def textAll (self, *args, **kwargs):
      '''
textAll( (Fcf)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAll(class PyDbFcf {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Field:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > {lvalue},bool)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def childCount (self, *args, **kwargs):
      '''
childCount( (Field)arg1) -> int :

    C++ signature :
        int childCount(class PyDbField {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def convertToTextField (self, *args, **kwargs):
      '''
convertToTextField( (Field)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToTextField(class PyDbField {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def evaluationOption (self, *args, **kwargs):
      '''
evaluationOption( (Field)arg1) -> FieldEvalOption :

    C++ signature :
        enum AcDbField::EvalOption evaluationOption(class PyDbField {lvalue})'''
    ...
    def evaluationStatus (self, *args, **kwargs):
      '''
evaluationStatus( (Field)arg1) -> FieldEvalStatus :

    C++ signature :
        enum AcDbField::EvalStatus evaluationStatus(class PyDbField {lvalue})'''
    ...
    def evaluatorId (self, *args, **kwargs):
      '''
evaluatorId( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > evaluatorId(class PyDbField {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getFormat (self, *args, **kwargs):
      '''
getFormat( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormat(class PyDbField {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getValue(class PyDbField {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTextField (self, *args, **kwargs):
      '''
isTextField( (Field)arg1) -> bool :

    C++ signature :
        bool isTextField(class PyDbField {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def postInDatabase (self, *args, **kwargs):
      '''
postInDatabase( (Field)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus postInDatabase(class PyDbField {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setEvaluationOption (self, *args, **kwargs):
      '''
setEvaluationOption( (Field)arg1, (FieldEvalOption)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEvaluationOption(class PyDbField {lvalue},enum AcDbField::EvalOption)'''
    ...
    def setEvaluatorId (self, *args, **kwargs):
      '''
setEvaluatorId( (Field)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEvaluatorId(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFormat (self, *args, **kwargs):
      '''
setFormat( (Field)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setInObject (self, *args, **kwargs):
      '''
setInObject( (Field)arg1, (DbObject)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInObject(class PyDbField {lvalue},class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def state (self, *args, **kwargs):
      '''
state( (Field)arg1) -> FieldState :

    C++ signature :
        enum AcDbField::State state(class PyDbField {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class FieldCodeFlag:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAddMarkers (self, *args, **kwargs):
      '''None'''
    ...
    def kChildObjectReference (self, *args, **kwargs):
      '''None'''
    ...
    def kDetachChildren (self, *args, **kwargs):
      '''None'''
    ...
    def kEscapeBackslash (self, *args, **kwargs):
      '''None'''
    ...
    def kEvaluatedChildren (self, *args, **kwargs):
      '''None'''
    ...
    def kEvaluatedText (self, *args, **kwargs):
      '''None'''
    ...
    def kFieldCode (self, *args, **kwargs):
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs):
      '''None'''
    ...
    def kObjectReference (self, *args, **kwargs):
      '''None'''
    ...
    def kPreserveFields (self, *args, **kwargs):
      '''None'''
    ...
    def kPreserveOptions (self, *args, **kwargs):
      '''None'''
    ...
    def kStripOptions (self, *args, **kwargs):
      '''None'''
    ...
    def kTextField (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalContext:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDemand (self, *args, **kwargs):
      '''None'''
    ...
    def kEtransmit (self, *args, **kwargs):
      '''None'''
    ...
    def kOpen (self, *args, **kwargs):
      '''None'''
    ...
    def kPlot (self, *args, **kwargs):
      '''None'''
    ...
    def kPlotPreview (self, *args, **kwargs):
      '''None'''
    ...
    def kPreview (self, *args, **kwargs):
      '''None'''
    ...
    def kRegen (self, *args, **kwargs):
      '''None'''
    ...
    def kSave (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalOption:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAutomatic (self, *args, **kwargs):
      '''None'''
    ...
    def kDisable (self, *args, **kwargs):
      '''None'''
    ...
    def kOnDemand (self, *args, **kwargs):
      '''None'''
    ...
    def kOnEtransmit (self, *args, **kwargs):
      '''None'''
    ...
    def kOnOpen (self, *args, **kwargs):
      '''None'''
    ...
    def kOnPlot (self, *args, **kwargs):
      '''None'''
    ...
    def kOnRegen (self, *args, **kwargs):
      '''None'''
    ...
    def kOnSave (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalStatus:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kEvaluatorNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def kInvalidCode (self, *args, **kwargs):
      '''None'''
    ...
    def kInvalidContext (self, *args, **kwargs):
      '''None'''
    ...
    def kNotYetEvaluated (self, *args, **kwargs):
      '''None'''
    ...
    def kOtherError (self, *args, **kwargs):
      '''None'''
    ...
    def kSuccess (self, *args, **kwargs):
      '''None'''
    ...
    def kSyntaxError (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldState:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCompiled (self, *args, **kwargs):
      '''None'''
    ...
    def kEvaluated (self, *args, **kwargs):
      '''None'''
    ...
    def kHasCache (self, *args, **kwargs):
      '''None'''
    ...
    def kHasFormattedString (self, *args, **kwargs):
      '''None'''
    ...
    def kInitialized (self, *args, **kwargs):
      '''None'''
    ...
    def kModified (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineStyle:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kGridLineStyleDouble (self, *args, **kwargs):
      '''None'''
    ...
    def kGridLineStyleSingle (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAllGridLineTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kHorzBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kHorzGridLineTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kHorzInside (self, *args, **kwargs):
      '''None'''
    ...
    def kHorzTop (self, *args, **kwargs):
      '''None'''
    ...
    def kInnerGridLineTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kInvalidGridLine (self, *args, **kwargs):
      '''None'''
    ...
    def kOuterGridLineTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kVertGridLineTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kVertInside (self, *args, **kwargs):
      '''None'''
    ...
    def kVertLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kVertRight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridProperty:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kGridPropAll (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropColor (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropDoubleLineSpacing (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropInvalid (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropLineStyle (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropLineWeight (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropLinetype (self, *args, **kwargs):
      '''None'''
    ...
    def kGridPropVisibility (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HostApplicationServices:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def workingDatabase (self, *args, **kwargs):
      '''
workingDatabase( (HostApplicationServices)arg1) -> Database :

    C++ signature :
        class PyDbDatabase workingDatabase(class PyDbHostApplicationServices {lvalue})'''
    ...

class IdMapping:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...

class JoinStyle:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kJnStylAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kJnStylFlat (self, *args, **kwargs):
      '''None'''
    ...
    def kJnStylNone (self, *args, **kwargs):
      '''None'''
    ...
    def kJnStylRound (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LayerTableRecord:
    def VPDFLT (self, *args, **kwargs):
      '''
VPDFLT( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool VPDFLT(class PyDbLayerTableRecord {lvalue})'''
    ...
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (LayerTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue})

color( (LayerTableRecord)arg1, (ObjectId)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs):
      '''
description( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbLayerTableRecord {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (LayerTableRecord)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbLayerTableRecord {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasAnyOverrides (self, *args, **kwargs):
      '''
hasAnyOverrides( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAnyOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def hasOverrides (self, *args, **kwargs):
      '''
hasOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs):
      '''
isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isFrozen (self, *args, **kwargs):
      '''
isFrozen( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isFrozen(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isHidden (self, *args, **kwargs):
      '''
isHidden( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbLayerTableRecord {lvalue})

isHidden( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbObjectId)'''
    ...
    def isInUse (self, *args, **kwargs):
      '''
isInUse( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isInUse(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isLocked (self, *args, **kwargs):
      '''
isLocked( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isLocked(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOff (self, *args, **kwargs):
      '''
isOff( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isOff(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isPlottable (self, *args, **kwargs):
      '''
isPlottable( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isPlottable(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isReconciled (self, *args, **kwargs):
      '''
isReconciled( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbLayerTableRecord {lvalue})

isReconciled( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbObjectId)'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs):
      '''
isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (LayerTableRecord)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue})

lineWeight( (LayerTableRecord)arg1, (ObjectId)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def linetypeObjectId (self, *args, **kwargs):
      '''
linetypeObjectId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeObjectId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue})

plotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def plotStyleNameId (self, *args, **kwargs):
      '''
plotStyleNameId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue})

plotStyleNameId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeAllOverrides (self, *args, **kwargs):
      '''
removeAllOverrides( (LayerTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbLayerTableRecord {lvalue})

removeAllOverrides( (LayerTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def removeColorOverride (self, *args, **kwargs):
      '''
removeColorOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeColorOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLineWeightOverride (self, *args, **kwargs):
      '''
removeLineWeightOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLineWeightOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLinetypeOverride (self, *args, **kwargs):
      '''
removeLinetypeOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLinetypeOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removePlotStyleOverride (self, *args, **kwargs):
      '''
removePlotStyleOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePlotStyleOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeTransparencyOverride (self, *args, **kwargs):
      '''
removeTransparencyOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTransparencyOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeViewportOverrides (self, *args, **kwargs):
      '''
removeViewportOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeViewportOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (LayerTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor)

setColor( (LayerTableRecord)arg1, (Color)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor,class PyDbObjectId)'''
    ...
    def setDescription (self, *args, **kwargs):
      '''
setDescription( (LayerTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIsFrozen (self, *args, **kwargs):
      '''
setIsFrozen( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsFrozen(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsHidden (self, *args, **kwargs):
      '''
setIsHidden( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsHidden(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsLocked (self, *args, **kwargs):
      '''
setIsLocked( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsLocked(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsOff (self, *args, **kwargs):
      '''
setIsOff( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOff(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsPlottable (self, *args, **kwargs):
      '''
setIsPlottable( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsPlottable(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight)

setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight,class PyDbObjectId)'''
    ...
    def setLinetypeObjectId (self, *args, **kwargs):
      '''
setLinetypeObjectId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeObjectId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setMaterialId (self, *args, **kwargs):
      '''
setMaterialId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterialId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (LayerTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId,class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (str)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def setTransparency (self, *args, **kwargs):
      '''
setTransparency( (LayerTableRecord)arg1, (Transparency)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency)

setTransparency( (LayerTableRecord)arg1, (Transparency)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency,class PyDbObjectId)'''
    ...
    def setVPDFLT (self, *args, **kwargs):
      '''
setVPDFLT( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVPDFLT(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transparency (self, *args, **kwargs):
      '''
transparency( (LayerTableRecord)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue})

transparency( (LayerTableRecord)arg1, (ObjectId)arg2) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Leader:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def annoHeight (self, *args, **kwargs):
      '''
annoHeight( (Leader)arg1) -> float :

    C++ signature :
        double annoHeight(class PyDbLeader {lvalue})'''
    ...
    def annoType (self, *args, **kwargs):
      '''
annoType( (Leader)arg1) -> AnnoType :

    C++ signature :
        enum AcDbLeader::AnnoType annoType(class PyDbLeader {lvalue})'''
    ...
    def annoWidth (self, *args, **kwargs):
      '''
annoWidth( (Leader)arg1) -> float :

    C++ signature :
        double annoWidth(class PyDbLeader {lvalue})'''
    ...
    def annotationObjId (self, *args, **kwargs):
      '''
annotationObjId( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId annotationObjId(class PyDbLeader {lvalue})'''
    ...
    def annotationOffset (self, *args, **kwargs):
      '''
annotationOffset( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d annotationOffset(class PyDbLeader {lvalue})'''
    ...
    def appendVertex (self, *args, **kwargs):
      '''
appendVertex( (Leader)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool appendVertex(class PyDbLeader {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def attachAnnotation (self, *args, **kwargs):
      '''
attachAnnotation( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus attachAnnotation(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def copied (self, *args, **kwargs):
      '''
copied( (Leader)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbLeader {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def detachAnnotation (self, *args, **kwargs):
      '''
detachAnnotation( (Leader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus detachAnnotation(class PyDbLeader {lvalue})'''
    ...
    def dimasz (self, *args, **kwargs):
      '''
dimasz( (Leader)arg1) -> float :

    C++ signature :
        double dimasz(class PyDbLeader {lvalue})'''
    ...
    def dimclrd (self, *args, **kwargs):
      '''
dimclrd( (Leader)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbLeader {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Leader)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbLeader {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs):
      '''
dimgap( (Leader)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbLeader {lvalue})'''
    ...
    def dimlwd (self, *args, **kwargs):
      '''
dimlwd( (Leader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight dimlwd(class PyDbLeader {lvalue})'''
    ...
    def dimsah (self, *args, **kwargs):
      '''
dimsah( (Leader)arg1) -> bool :

    C++ signature :
        bool dimsah(class PyDbLeader {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs):
      '''
dimscale( (Leader)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbLeader {lvalue})'''
    ...
    def dimtad (self, *args, **kwargs):
      '''
dimtad( (Leader)arg1) -> int :

    C++ signature :
        int dimtad(class PyDbLeader {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs):
      '''
dimtxsty( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbLeader {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs):
      '''
dimtxt( (Leader)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbLeader {lvalue})'''
    ...
    def disableArrowHead (self, *args, **kwargs):
      '''
disableArrowHead( (Leader)arg1) -> None :

    C++ signature :
        void disableArrowHead(class PyDbLeader {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def erased (self, *args, **kwargs):
      '''
erased( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject)

erased( (Leader)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject,bool)'''
    ...
    def evaluateLeader (self, *args, **kwargs):
      '''
evaluateLeader( (Leader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateLeader(class PyDbLeader {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def firstVertex (self, *args, **kwargs):
      '''
firstVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d firstVertex(class PyDbLeader {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def goodbye (self, *args, **kwargs):
      '''
goodbye( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void goodbye(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasArrowHead (self, *args, **kwargs):
      '''
hasArrowHead( (Leader)arg1) -> bool :

    C++ signature :
        bool hasArrowHead(class PyDbLeader {lvalue})'''
    ...
    def hasHookLine (self, *args, **kwargs):
      '''
hasHookLine( (Leader)arg1) -> bool :

    C++ signature :
        bool hasHookLine(class PyDbLeader {lvalue})'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isSplined (self, *args, **kwargs):
      '''
isSplined( (Leader)arg1) -> bool :

    C++ signature :
        bool isSplined(class PyDbLeader {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def lastVertex (self, *args, **kwargs):
      '''
lastVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d lastVertex(class PyDbLeader {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def modified (self, *args, **kwargs):
      '''
modified( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs):
      '''
numVertices( (Leader)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbLeader {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeLastVertex (self, *args, **kwargs):
      '''
removeLastVertex( (Leader)arg1) -> None :

    C++ signature :
        void removeLastVertex(class PyDbLeader {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setAnnotationObjId (self, *args, **kwargs):
      '''
setAnnotationObjId( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationObjId(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setAnnotationOffset (self, *args, **kwargs):
      '''
setAnnotationOffset( (Leader)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationOffset(class PyDbLeader {lvalue},class AcGeVector3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Leader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbLeader {lvalue},unsigned short)

setColorIndex( (Leader)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbLeader {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimasz (self, *args, **kwargs):
      '''
setDimasz( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimasz(class PyDbLeader {lvalue},double)'''
    ...
    def setDimclrd (self, *args, **kwargs):
      '''
setDimclrd( (Leader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrd(class PyDbLeader {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Leader)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbLeader {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs):
      '''
setDimgap( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimgap(class PyDbLeader {lvalue},double)'''
    ...
    def setDimldrblk (self, *args, **kwargs):
      '''
setDimldrblk( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimldrblk(class PyDbLeader {lvalue},class PyDbObjectId)

setDimldrblk( (Leader)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimldrblk(class PyDbLeader {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimlwd (self, *args, **kwargs):
      '''
setDimlwd( (Leader)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimlwd(class PyDbLeader {lvalue},enum AcDb::LineWeight)'''
    ...
    def setDimsah (self, *args, **kwargs):
      '''
setDimsah( (Leader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimsah(class PyDbLeader {lvalue},bool)'''
    ...
    def setDimscale (self, *args, **kwargs):
      '''
setDimscale( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimscale(class PyDbLeader {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtad (self, *args, **kwargs):
      '''
setDimtad( (Leader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtad(class PyDbLeader {lvalue},int)'''
    ...
    def setDimtxsty (self, *args, **kwargs):
      '''
setDimtxsty( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxsty(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxt (self, *args, **kwargs):
      '''
setDimtxt( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxt(class PyDbLeader {lvalue},double)'''
    ...
    def setHasArrowHead (self, *args, **kwargs):
      '''
setHasArrowHead( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasArrowHead(class PyDbLeader {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlane (self, *args, **kwargs):
      '''
setPlane( (Leader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setSplined (self, *args, **kwargs):
      '''
setSplined( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSplined(class PyDbLeader {lvalue},bool)'''
    ...
    def setToSplineLeader (self, *args, **kwargs):
      '''
setToSplineLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToSplineLeader(class PyDbLeader {lvalue})'''
    ...
    def setToStraightLeader (self, *args, **kwargs):
      '''
setToStraightLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToStraightLeader(class PyDbLeader {lvalue})'''
    ...
    def setVertexAt (self, *args, **kwargs):
      '''
setVertexAt( (Leader)arg1, (int)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool setVertexAt(class PyDbLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexAt (self, *args, **kwargs):
      '''
vertexAt( (Leader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbLeader {lvalue},int)'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Line:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endPoint (self, *args, **kwargs):
      '''
endPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d endPoint(class PyDbLine {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Line)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbLine {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Line)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLine {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndPoint (self, *args, **kwargs):
      '''
setEndPoint( (Line)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Line)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbLine {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartPoint (self, *args, **kwargs):
      '''
setStartPoint( (Line)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Line)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbLine {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def startPoint (self, *args, **kwargs):
      '''
startPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d startPoint(class PyDbLine {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Line)arg1) -> float :

    C++ signature :
        double thickness(class PyDbLine {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class LineAngularDimension2:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs):
      '''
arcPoint( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extArcOn (self, *args, **kwargs):
      '''
extArcOn( (LineAngularDimension2)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs):
      '''
setArcPoint( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs):
      '''
setExtArcOn( (LineAngularDimension2)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcOn(class PyDb2LineAngularDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXLine1End (self, *args, **kwargs):
      '''
setXLine1End( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine1Start (self, *args, **kwargs):
      '''
setXLine1Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2End (self, *args, **kwargs):
      '''
setXLine2End( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Start (self, *args, **kwargs):
      '''
setXLine2Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xLine1End (self, *args, **kwargs):
      '''
xLine1End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine1Start (self, *args, **kwargs):
      '''
xLine1Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Start(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2End (self, *args, **kwargs):
      '''
xLine2End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2Start (self, *args, **kwargs):
      '''
xLine2Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Start(class PyDb2LineAngularDimension {lvalue})'''
    ...

class LineSpacingStyle:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAtLeast (self, *args, **kwargs):
      '''None'''
    ...
    def kExactly (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LineWeight:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kLnWt000 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt005 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt009 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt013 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt015 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt018 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt020 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt025 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt030 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt035 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt040 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt050 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt053 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt060 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt070 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt080 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt090 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt100 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt106 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt120 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt140 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt158 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt200 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWt211 (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWtByBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWtByLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kLnWtByLwDefault (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LoftedSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MInsertBlock:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3, (int)arg4, (int)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId,unsigned short,unsigned short,double,double)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendAttribute (self, *args, **kwargs):
      '''
appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def attributeIds (self, *args, **kwargs):
      '''
attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTableRecord (self, *args, **kwargs):
      '''
blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def columnSpacing (self, *args, **kwargs):
      '''
columnSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double columnSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def columns (self, *args, **kwargs):
      '''
columns( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short columns(class PyDbMInsertBlock {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs):
      '''
explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def geomExtentsBestFit (self, *args, **kwargs):
      '''
geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs):
      '''
nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs):
      '''
nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def rowSpacing (self, *args, **kwargs):
      '''
rowSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double rowSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def rows (self, *args, **kwargs):
      '''
rows( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short rows(class PyDbMInsertBlock {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs):
      '''
scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setBlockTableRecord (self, *args, **kwargs):
      '''
setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs):
      '''
setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnSpacing (self, *args, **kwargs):
      '''
setColumnSpacing( (MInsertBlock)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setColumns (self, *args, **kwargs):
      '''
setColumns( (MInsertBlock)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumns(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (BlockReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (BlockReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (BlockReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setRowSpacing (self, *args, **kwargs):
      '''
setRowSpacing( (MInsertBlock)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setRows (self, *args, **kwargs):
      '''
setRows( (MInsertBlock)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRows(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setScaleFactors (self, *args, **kwargs):
      '''
setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs):
      '''
treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MLeader:
    def MLeaderStyle (self, *args, **kwargs):
      '''
MLeaderStyle( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId MLeaderStyle(class PyDbMLeader {lvalue})'''
    ...
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addFirstVertex (self, *args, **kwargs):
      '''
addFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLastVertex (self, *args, **kwargs):
      '''
addLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLeader (self, *args, **kwargs):
      '''
addLeader( (MLeader)arg1) -> int :

    C++ signature :
        int addLeader(class PyDbMLeader {lvalue})'''
    ...
    def addLeaderLine (self, *args, **kwargs):
      '''
addLeaderLine( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},int)

addLeaderLine( (MLeader)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def arrowSize (self, *args, **kwargs):
      '''
arrowSize( (MLeader)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeader {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs):
      '''
arrowSymbolId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeader {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs):
      '''
blockColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeader {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs):
      '''
blockConnectionType( (MLeader)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeader {lvalue})'''
    ...
    def blockContentId (self, *args, **kwargs):
      '''
blockContentId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockContentId(class PyDbMLeader {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs):
      '''
blockRotation( (MLeader)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeader {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs):
      '''
blockScale( (MLeader)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeader {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def connectionPoint (self, *args, **kwargs):
      '''
connectionPoint( (MLeader)arg1, (Vector3d)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d)

connectionPoint( (MLeader)arg1, (Vector3d)arg2, (MLeaderTextAttachmentDirection)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def contentType (self, *args, **kwargs):
      '''
contentType( (MLeader)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeader {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def doglegLength (self, *args, **kwargs):
      '''
doglegLength( (MLeader)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeader {lvalue})'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def enableAnnotationScale (self, *args, **kwargs):
      '''
enableAnnotationScale( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableAnnotationScale(class PyDbMLeader {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs):
      '''
enableDogleg( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeader {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs):
      '''
enableFrameText( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeader {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs):
      '''
enableLanding( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeader {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extendLeaderToText (self, *args, **kwargs):
      '''
extendLeaderToText( (MLeader)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeader {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArrowSize (self, *args, **kwargs):
      '''
getArrowSize( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getArrowSize(class PyDbMLeader {lvalue},int)'''
    ...
    def getArrowSymbolId (self, *args, **kwargs):
      '''
getArrowSymbolId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getArrowSymbolId(class PyDbMLeader {lvalue},int)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs):
      '''
getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> AttributeReference :

    C++ signature :
        class PyDbAttribute getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)

getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def getBlockPosition (self, *args, **kwargs):
      '''
getBlockPosition( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getBlockPosition(class PyDbMLeader {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getContentGeomExtents (self, *args, **kwargs):
      '''
getContentGeomExtents( (MLeader)arg1) -> Extents :

    C++ signature :
        class AcDbExtents getContentGeomExtents(class PyDbMLeader {lvalue})'''
    ...
    def getDoglegDirection (self, *args, **kwargs):
      '''
getDoglegDirection( (MLeader)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getDoglegDirection(class PyDbMLeader {lvalue},int)'''
    ...
    def getDoglegLength (self, *args, **kwargs):
      '''
getDoglegLength( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getDoglegLength(class PyDbMLeader {lvalue},int)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getFirstVertex (self, *args, **kwargs):
      '''
getFirstVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getLastVertex (self, *args, **kwargs):
      '''
getLastVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndex (self, *args, **kwargs):
      '''
getLeaderIndex( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int getLeaderIndex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndexes (self, *args, **kwargs):
      '''
getLeaderIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderIndexes(class PyDbMLeader {lvalue})'''
    ...
    def getLeaderLineColor (self, *args, **kwargs):
      '''
getLeaderLineColor( (MLeader)arg1, (int)arg2) -> Color :

    C++ signature :
        class AcCmColor getLeaderLineColor(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineIndexes (self, *args, **kwargs):
      '''
getLeaderLineIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue})

getLeaderLineIndexes( (MLeader)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineType (self, *args, **kwargs):
      '''
getLeaderLineType( (MLeader)arg1, (int)arg2) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType getLeaderLineType(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineTypeId (self, *args, **kwargs):
      '''
getLeaderLineTypeId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLeaderLineTypeId(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineWeight (self, *args, **kwargs):
      '''
getLeaderLineWeight( (MLeader)arg1, (int)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getLeaderLineWeight(class PyDbMLeader {lvalue},int)'''
    ...
    def getOverridedMLeaderStyle (self, *args, **kwargs):
      '''
getOverridedMLeaderStyle( (MLeader)arg1, (MLeaderStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getOverridedMLeaderStyle(class PyDbMLeader {lvalue},class PyDbMLeaderStyle {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getTextLocation (self, *args, **kwargs):
      '''
getTextLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getTextLocation(class PyDbMLeader {lvalue})'''
    ...
    def getToleranceLocation (self, *args, **kwargs):
      '''
getToleranceLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getToleranceLocation(class PyDbMLeader {lvalue})'''
    ...
    def getVertex (self, *args, **kwargs):
      '''
getVertex( (MLeader)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertex(class PyDbMLeader {lvalue},int,int)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasContent (self, *args, **kwargs):
      '''
hasContent( (MLeader)arg1) -> bool :

    C++ signature :
        bool hasContent(class PyDbMLeader {lvalue})'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOverride (self, *args, **kwargs):
      '''
isOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> bool :

    C++ signature :
        bool isOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def landingGap (self, *args, **kwargs):
      '''
landingGap( (MLeader)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeader {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs):
      '''
leaderLineColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs):
      '''
leaderLineType( (MLeader)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs):
      '''
leaderLineTypeId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs):
      '''
leaderLineWeight( (MLeader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeader {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def modified (self, *args, **kwargs):
      '''
modified( (MLeader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbMLeader {lvalue},class PyDbObject)'''
    ...
    def moveMLeader (self, *args, **kwargs):
      '''
moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType)

moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType,bool)'''
    ...
    def mtext (self, *args, **kwargs):
      '''
mtext( (MLeader)arg1) -> MText :

    C++ signature :
        class PyDbMText mtext(class PyDbMLeader {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (MLeader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMLeader {lvalue})'''
    ...
    def numLeaderLines (self, *args, **kwargs):
      '''
numLeaderLines( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaderLines(class PyDbMLeader {lvalue})'''
    ...
    def numLeaders (self, *args, **kwargs):
      '''
numLeaders( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaders(class PyDbMLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs):
      '''
numVertices( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int numVertices(class PyDbMLeader {lvalue},int)'''
    ...
    def objectClosed (self, *args, **kwargs):
      '''
objectClosed( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void objectClosed(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plane (self, *args, **kwargs):
      '''
plane( (MLeader)arg1) -> Plane :

    C++ signature :
        class PyGePlane plane(class PyDbMLeader {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def postMLeaderToDb (self, *args, **kwargs):
      '''
postMLeaderToDb( (MLeader)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus postMLeaderToDb(class PyDbMLeader {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeBreakPoints (self, *args, **kwargs):
      '''
recomputeBreakPoints( (MLeader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeBreakPoints(class PyDbMLeader {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeFirstVertex (self, *args, **kwargs):
      '''
removeFirstVertex( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLastVertex (self, *args, **kwargs):
      '''
removeLastVertex( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeader (self, *args, **kwargs):
      '''
removeLeader( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeader(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLine (self, *args, **kwargs):
      '''
removeLeaderLine( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeaderLine(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLineRefAssoc (self, *args, **kwargs):
      '''
removeLeaderLineRefAssoc( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeaderLineRefAssoc(class PyDbMLeader {lvalue},int)'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (MLeader)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeader {lvalue})'''
    ...
    def setArrowSize (self, *args, **kwargs):
      '''
setArrowSize( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeader {lvalue},double)

setArrowSize( (MLeader)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs):
      '''
setArrowSymbolId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeader {lvalue},class PyDbObjectId)

setArrowSymbolId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs):
      '''
setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (AttributeReference)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class PyDbAttribute)

setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockColor (self, *args, **kwargs):
      '''
setBlockColor( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs):
      '''
setBlockConnectionType( (MLeader)arg1, (MLeaderBlockConnectionType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockConnectionType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockContentId (self, *args, **kwargs):
      '''
setBlockContentId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockContentId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setBlockPosition (self, *args, **kwargs):
      '''
setBlockPosition( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockPosition(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setBlockRotation (self, *args, **kwargs):
      '''
setBlockRotation( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbMLeader {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs):
      '''
setBlockScale( (MLeader)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbMLeader {lvalue},class AcGeScale3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContentType (self, *args, **kwargs):
      '''
setContentType( (MLeader)arg1, (MLeaderContentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDoglegDirection (self, *args, **kwargs):
      '''
setDoglegDirection( (MLeader)arg1, (int)arg2, (Vector3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegDirection(class PyDbMLeader {lvalue},int,class AcGeVector3d)'''
    ...
    def setDoglegLength (self, *args, **kwargs):
      '''
setDoglegLength( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeader {lvalue},double)

setDoglegLength( (MLeader)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setEnableAnnotationScale (self, *args, **kwargs):
      '''
setEnableAnnotationScale( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableAnnotationScale(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs):
      '''
setEnableDogleg( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableDogleg(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs):
      '''
setEnableFrameText( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableFrameText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs):
      '''
setEnableLanding( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableLanding(class PyDbMLeader {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs):
      '''
setExtendLeaderToText( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtendLeaderToText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setFirstVertex (self, *args, **kwargs):
      '''
setFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLandingGap (self, *args, **kwargs):
      '''
setLandingGap( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLandingGap(class PyDbMLeader {lvalue},double)'''
    ...
    def setLastVertex (self, *args, **kwargs):
      '''
setLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLineColor1 (self, *args, **kwargs):
      '''
setLeaderLineColor1( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor1(class PyDbMLeader {lvalue},class AcCmColor)

setLeaderLineColor1( (MLeader)arg1, (int)arg2, (Color)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor1(class PyDbMLeader {lvalue},int,class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs):
      '''
setLeaderLineType( (MLeader)arg1, (MLeaderLeaderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderType)

setLeaderLineType( (MLeader)arg1, (int)arg2, (MLeaderLeaderType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeader {lvalue},int,enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs):
      '''
setLeaderLineTypeId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeader {lvalue},class PyDbObjectId)

setLeaderLineTypeId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setLeaderLineWeight1 (self, *args, **kwargs):
      '''
setLeaderLineWeight1( (MLeader)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight1(class PyDbMLeader {lvalue},enum AcDb::LineWeight)

setLeaderLineWeight1( (MLeader)arg1, (int)arg2, (LineWeight)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight1(class PyDbMLeader {lvalue},int,enum AcDb::LineWeight)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMLeaderStyle (self, *args, **kwargs):
      '''
setMLeaderStyle( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderStyle(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setMText (self, *args, **kwargs):
      '''
setMText( (MLeader)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMText(class PyDbMLeader {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOverride (self, *args, **kwargs):
      '''
setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)

setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlane (self, *args, **kwargs):
      '''
setPlane( (MLeader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbMLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setScale (self, *args, **kwargs):
      '''
setScale( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs):
      '''
setTextAlignmentType( (MLeader)arg1, (MLeaderTextAlignmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs):
      '''
setTextAngleType( (MLeader)arg1, (MLeaderTextAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAngleType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs):
      '''
setTextAttachmentDirection( (MLeader)arg1, (MLeaderTextAttachmentDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentDirection(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs):
      '''
setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType)

setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2, (MLeaderLeaderDirectionType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType,enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def setTextColor (self, *args, **kwargs):
      '''
setTextColor( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs):
      '''
setTextHeight( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextLocation (self, *args, **kwargs):
      '''
setTextLocation( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setTextStyleId (self, *args, **kwargs):
      '''
setTextStyleId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyleId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setToleranceLocation (self, *args, **kwargs):
      '''
setToleranceLocation( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setVertex (self, *args, **kwargs):
      '''
setVertex( (MLeader)arg1, (int)arg2, (int)arg3, (Point3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertex(class PyDbMLeader {lvalue},int,int,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAlignmentType (self, *args, **kwargs):
      '''
textAlignmentType( (MLeader)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeader {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs):
      '''
textAngleType( (MLeader)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs):
      '''
textAttachmentDirection( (MLeader)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs):
      '''
textAttachmentType( (MLeader)arg1) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue})

textAttachmentType( (MLeader)arg1, (MLeaderLeaderDirectionType)arg2) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def textColor (self, *args, **kwargs):
      '''
textColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeader {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs):
      '''
textHeight( (MLeader)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeader {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs):
      '''
textStyleId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeader {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateLeaderLinePosition (self, *args, **kwargs):
      '''
updateLeaderLinePosition( (MLeader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateLeaderLinePosition(class PyDbMLeader {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MLeaderBlockConnectionType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kConnectBase (self, *args, **kwargs):
      '''None'''
    ...
    def kConnectExtents (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderContentType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBlockContent (self, *args, **kwargs):
      '''None'''
    ...
    def kMTextContent (self, *args, **kwargs):
      '''None'''
    ...
    def kNoneContent (self, *args, **kwargs):
      '''None'''
    ...
    def kToleranceContent (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderGsMarkType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kArrowMark (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockAttribute (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockMark (self, *args, **kwargs):
      '''None'''
    ...
    def kDoglegMark (self, *args, **kwargs):
      '''None'''
    ...
    def kLeaderLineMark (self, *args, **kwargs):
      '''None'''
    ...
    def kMTextMark (self, *args, **kwargs):
      '''None'''
    ...
    def kMTextUnderLineMark (self, *args, **kwargs):
      '''None'''
    ...
    def kNone (self, *args, **kwargs):
      '''None'''
    ...
    def kToleranceMark (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderDirectionType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBottomLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kLeftLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kRightLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kTopLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kUnknownLeader (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kInVisibleLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kSplineLeader (self, *args, **kwargs):
      '''None'''
    ...
    def kStraightLeader (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderMoveType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kMoveAllExceptArrowHeaderPoints (self, *args, **kwargs):
      '''None'''
    ...
    def kMoveAllPoints (self, *args, **kwargs):
      '''None'''
    ...
    def kMoveContentAndDoglegPoints (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderPropertyOverrideType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kArrowSize (self, *args, **kwargs):
      '''None'''
    ...
    def kArrowSymbolId (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockColor (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockConnectionType (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockId (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockRotation (self, *args, **kwargs):
      '''None'''
    ...
    def kBlockScale (self, *args, **kwargs):
      '''None'''
    ...
    def kContentType (self, *args, **kwargs):
      '''None'''
    ...
    def kDefaultMText (self, *args, **kwargs):
      '''None'''
    ...
    def kDoglegLength (self, *args, **kwargs):
      '''None'''
    ...
    def kEnableDogleg (self, *args, **kwargs):
      '''None'''
    ...
    def kEnableFrameText (self, *args, **kwargs):
      '''None'''
    ...
    def kEnableLanding (self, *args, **kwargs):
      '''None'''
    ...
    def kExtendLeaderToText (self, *args, **kwargs):
      '''None'''
    ...
    def kLandingGap (self, *args, **kwargs):
      '''None'''
    ...
    def kLeaderLineColor (self, *args, **kwargs):
      '''None'''
    ...
    def kLeaderLineType (self, *args, **kwargs):
      '''None'''
    ...
    def kLeaderLineTypeId (self, *args, **kwargs):
      '''None'''
    ...
    def kLeaderLineWeight (self, *args, **kwargs):
      '''None'''
    ...
    def kScale (self, *args, **kwargs):
      '''None'''
    ...
    def kSize (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAngleType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAttachmentDirection (self, *args, **kwargs):
      '''None'''
    ...
    def kTextBottomAttachmentType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextColor (self, *args, **kwargs):
      '''None'''
    ...
    def kTextHeight (self, *args, **kwargs):
      '''None'''
    ...
    def kTextLeftAttachmentType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextRightAttachmentType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextStyleId (self, *args, **kwargs):
      '''None'''
    ...
    def kTextSwitchAlignmentType (self, *args, **kwargs):
      '''None'''
    ...
    def kTextTopAttachmentType (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderSegmentAngleType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def k15 (self, *args, **kwargs):
      '''None'''
    ...
    def k30 (self, *args, **kwargs):
      '''None'''
    ...
    def k45 (self, *args, **kwargs):
      '''None'''
    ...
    def k60 (self, *args, **kwargs):
      '''None'''
    ...
    def k90 (self, *args, **kwargs):
      '''None'''
    ...
    def kAny (self, *args, **kwargs):
      '''None'''
    ...
    def kHorz (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderStyle:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def alignSpace (self, *args, **kwargs):
      '''
alignSpace( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double alignSpace(class PyDbMLeaderStyle {lvalue})'''
    ...
    def annotative (self, *args, **kwargs):
      '''
annotative( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool annotative(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSize (self, *args, **kwargs):
      '''
arrowSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs):
      '''
arrowSymbolId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def bitFlags (self, *args, **kwargs):
      '''
bitFlags( (MLeaderStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs):
      '''
blockColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs):
      '''
blockConnectionType( (MLeaderStyle)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs):
      '''
blockRotation( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs):
      '''
blockScale( (MLeaderStyle)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def breakSize (self, *args, **kwargs):
      '''
breakSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double breakSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def contentType (self, *args, **kwargs):
      '''
contentType( (MLeaderStyle)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def defaultMText (self, *args, **kwargs):
      '''
defaultMText( (MLeaderStyle)arg1) -> MText :

    C++ signature :
        class PyDbMText defaultMText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs):
      '''
description( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMLeaderStyle {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def doglegLength (self, *args, **kwargs):
      '''
doglegLength( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeaderStyle {lvalue})'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def drawLeaderOrderType (self, *args, **kwargs):
      '''
drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})

drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawMLeaderOrderType (self, *args, **kwargs):
      '''
drawMLeaderOrderType( (MLeaderStyle)arg1) -> DrawMLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawMLeaderOrderType drawMLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockRotation (self, *args, **kwargs):
      '''
enableBlockRotation( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockScale (self, *args, **kwargs):
      '''
enableBlockScale( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs):
      '''
enableDogleg( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs):
      '''
enableFrameText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs):
      '''
enableLanding( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeaderStyle {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extendLeaderToText (self, *args, **kwargs):
      '''
extendLeaderToText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def firstSegmentAngleConstraint (self, *args, **kwargs):
      '''
firstSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType firstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbMLeaderStyle {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbMLeaderStyle {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def landingGap (self, *args, **kwargs):
      '''
landingGap( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs):
      '''
leaderLineColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs):
      '''
leaderLineType( (MLeaderStyle)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs):
      '''
leaderLineTypeId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs):
      '''
leaderLineWeight( (MLeaderStyle)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def maxLeaderSegmentsPoints (self, *args, **kwargs):
      '''
maxLeaderSegmentsPoints( (MLeaderStyle)arg1) -> int :

    C++ signature :
        int maxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def overwritePropChanged (self, *args, **kwargs):
      '''
overwritePropChanged( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool overwritePropChanged(class PyDbMLeaderStyle {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def postMLeaderStyleToDb (self, *args, **kwargs):
      '''
postMLeaderStyleToDb( (MLeaderStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postMLeaderStyleToDb(class PyDbMLeaderStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def secondSegmentAngleConstraint (self, *args, **kwargs):
      '''
secondSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType secondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def setAlignSpace (self, *args, **kwargs):
      '''
setAlignSpace( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignSpace(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setAnnotative (self, *args, **kwargs):
      '''
setAnnotative( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotative(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setArrowSize (self, *args, **kwargs):
      '''
setArrowSize( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs):
      '''
setArrowSymbolId( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setArrowSymbolId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBitFlags (self, *args, **kwargs):
      '''
setBitFlags( (MLeaderStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBitFlags(class PyDbMLeaderStyle {lvalue},unsigned int)'''
    ...
    def setBlockColor (self, *args, **kwargs):
      '''
setBlockColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs):
      '''
setBlockConnectionType( (MLeaderStyle)arg1, (MLeaderBlockConnectionType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockConnectionType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockId (self, *args, **kwargs):
      '''
setBlockId( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBlockRotation (self, *args, **kwargs):
      '''
setBlockRotation( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs):
      '''
setBlockScale( (MLeaderStyle)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbMLeaderStyle {lvalue},class AcGeScale3d)'''
    ...
    def setBreakSize (self, *args, **kwargs):
      '''
setBreakSize( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setContentType (self, *args, **kwargs):
      '''
setContentType( (MLeaderStyle)arg1, (MLeaderContentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDefaultMText (self, *args, **kwargs):
      '''
setDefaultMText( (MLeaderStyle)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultMText(class PyDbMLeaderStyle {lvalue},class PyDbMText)'''
    ...
    def setDescription (self, *args, **kwargs):
      '''
setDescription( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDoglegLength (self, *args, **kwargs):
      '''
setDoglegLength( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setDrawLeaderOrderType (self, *args, **kwargs):
      '''
setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)

setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)'''
    ...
    def setDrawMLeaderOrderType (self, *args, **kwargs):
      '''
setDrawMLeaderOrderType( (MLeaderStyle)arg1, (DrawMLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawMLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawMLeaderOrderType)'''
    ...
    def setEnableBlockRotation (self, *args, **kwargs):
      '''
setEnableBlockRotation( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableBlockRotation(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableBlockScale (self, *args, **kwargs):
      '''
setEnableBlockScale( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableBlockScale(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs):
      '''
setEnableDogleg( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableDogleg(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs):
      '''
setEnableFrameText( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableFrameText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs):
      '''
setEnableLanding( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableLanding(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs):
      '''
setExtendLeaderToText( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtendLeaderToText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setFirstSegmentAngleConstraint (self, *args, **kwargs):
      '''
setFirstSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFirstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setLandingGap (self, *args, **kwargs):
      '''
setLandingGap( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLandingGap(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setLeaderLineColor (self, *args, **kwargs):
      '''
setLeaderLineColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs):
      '''
setLeaderLineType( (MLeaderStyle)arg1, (MLeaderLeaderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs):
      '''
setLeaderLineTypeId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setLeaderLineWeight (self, *args, **kwargs):
      '''
setLeaderLineWeight( (MLeaderStyle)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight(class PyDbMLeaderStyle {lvalue},enum AcDb::LineWeight)'''
    ...
    def setMaxLeaderSegmentsPoints (self, *args, **kwargs):
      '''
setMaxLeaderSegmentsPoints( (MLeaderStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue},int)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setScale (self, *args, **kwargs):
      '''
setScale( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setSecondSegmentAngleConstraint (self, *args, **kwargs):
      '''
setSecondSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSecondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setTextAlignAlwaysLeft (self, *args, **kwargs):
      '''
setTextAlignAlwaysLeft( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs):
      '''
setTextAlignmentType( (MLeaderStyle)arg1, (MLeaderTextAlignmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs):
      '''
setTextAngleType( (MLeaderStyle)arg1, (MLeaderTextAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAngleType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs):
      '''
setTextAttachmentDirection( (MLeaderStyle)arg1, (MLeaderTextAttachmentDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentDirection(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs):
      '''
setTextAttachmentType( (MLeaderStyle)arg1, (MLeaderTextAttachmentType)arg2 [, (MLeaderLeaderDirectionType)arg3]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentType [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def setTextColor (self, *args, **kwargs):
      '''
setTextColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs):
      '''
setTextHeight( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setTextStyleId (self, *args, **kwargs):
      '''
setTextStyleId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyleId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAlignAlwaysLeft (self, *args, **kwargs):
      '''
textAlignAlwaysLeft( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool textAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAlignmentType (self, *args, **kwargs):
      '''
textAlignmentType( (MLeaderStyle)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs):
      '''
textAngleType( (MLeaderStyle)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs):
      '''
textAttachmentDirection( (MLeaderStyle)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs):
      '''
textAttachmentType( (MLeaderStyle)arg1 [, (MLeaderLeaderDirectionType)arg2]) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeaderStyle {lvalue} [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def textColor (self, *args, **kwargs):
      '''
textColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs):
      '''
textHeight( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs):
      '''
textStyleId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MLeaderTextAlignmentType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kCenterAlignment (self, *args, **kwargs):
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs):
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAngleType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAlwaysRightReadingAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kHorizontalAngle (self, *args, **kwargs):
      '''None'''
    ...
    def kInsertAngle (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentDirection:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentHorizontal (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentVertical (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentAllLine (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentBottomLine (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentBottomOfBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentBottomOfTop (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentBottomOfTopLine (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentLinedCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentMiddle (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentMiddleOfBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentMiddleOfTop (self, *args, **kwargs):
      '''None'''
    ...
    def kAttachmentTopOfTop (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MText:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def actualHeight (self, *args, **kwargs):
      '''
actualHeight( (MText)arg1) -> float :

    C++ signature :
        double actualHeight(class PyDbMText {lvalue})'''
    ...
    def actualWidth (self, *args, **kwargs):
      '''
actualWidth( (MText)arg1) -> float :

    C++ signature :
        double actualWidth(class PyDbMText {lvalue})'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def ascent (self, *args, **kwargs):
      '''
ascent( (MText)arg1) -> float :

    C++ signature :
        double ascent(class PyDbMText {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def attachment (self, *args, **kwargs):
      '''
attachment( (MText)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint attachment(class PyDbMText {lvalue})'''
    ...
    def backgroundFillOn (self, *args, **kwargs):
      '''
backgroundFillOn( (MText)arg1) -> bool :

    C++ signature :
        bool backgroundFillOn(class PyDbMText {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contents (self, *args, **kwargs):
      '''
contents( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contents(class PyDbMText {lvalue})'''
    ...
    def contentsRTF (self, *args, **kwargs):
      '''
contentsRTF( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contentsRTF(class PyDbMText {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs):
      '''
convertFieldToText( (MText)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbMText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs):
      '''
correctSpelling( (MText)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbMText {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def descent (self, *args, **kwargs):
      '''
descent( (MText)arg1) -> float :

    C++ signature :
        double descent(class PyDbMText {lvalue})'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbMText {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def flowDirection (self, *args, **kwargs):
      '''
flowDirection( (MText)arg1) -> MTextFlowDirection :

    C++ signature :
        enum AcDbMText::FlowDirection flowDirection(class PyDbMText {lvalue})'''
    ...
    def getBackgroundFillColor (self, *args, **kwargs):
      '''
getBackgroundFillColor( (MText)arg1) -> Color :

    C++ signature :
        class AcCmColor getBackgroundFillColor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundScaleFactor (self, *args, **kwargs):
      '''
getBackgroundScaleFactor( (MText)arg1) -> float :

    C++ signature :
        double getBackgroundScaleFactor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundTransparency (self, *args, **kwargs):
      '''
getBackgroundTransparency( (MText)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency getBackgroundTransparency(class PyDbMText {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs):
      '''
getBoundingPoints( (MText)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbMText {lvalue})'''
    ...
    def getColumnAutoHeight (self, *args, **kwargs):
      '''
getColumnAutoHeight( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnAutoHeight(class PyDbMText {lvalue})'''
    ...
    def getColumnCount (self, *args, **kwargs):
      '''
getColumnCount( (MText)arg1) -> int :

    C++ signature :
        int getColumnCount(class PyDbMText {lvalue})'''
    ...
    def getColumnFlowReversed (self, *args, **kwargs):
      '''
getColumnFlowReversed( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnFlowReversed(class PyDbMText {lvalue})'''
    ...
    def getColumnGutterWidth (self, *args, **kwargs):
      '''
getColumnGutterWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnGutterWidth(class PyDbMText {lvalue})'''
    ...
    def getColumnHeight (self, *args, **kwargs):
      '''
getColumnHeight( (MText)arg1, (int)arg2) -> float :

    C++ signature :
        double getColumnHeight(class PyDbMText {lvalue},int)'''
    ...
    def getColumnType (self, *args, **kwargs):
      '''
getColumnType( (MText)arg1) -> MTextColumnType :

    C++ signature :
        enum AcDbMText::ColumnType getColumnType(class PyDbMText {lvalue})'''
    ...
    def getColumnWidth (self, *args, **kwargs):
      '''
getColumnWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnWidth(class PyDbMText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def height (self, *args, **kwargs):
      '''
height( (MText)arg1) -> float :

    C++ signature :
        double height(class PyDbMText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs):
      '''
hitTest( (MText)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineSpacingFactor (self, *args, **kwargs):
      '''
lineSpacingFactor( (MText)arg1) -> float :

    C++ signature :
        double lineSpacingFactor(class PyDbMText {lvalue})'''
    ...
    def lineSpacingStyle (self, *args, **kwargs):
      '''
lineSpacingStyle( (MText)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle lineSpacingStyle(class PyDbMText {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def location (self, *args, **kwargs):
      '''
location( (MText)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbMText {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMText {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (MText)arg1) -> float :

    C++ signature :
        double rotation(class PyDbMText {lvalue})'''
    ...
    def setAttachment (self, *args, **kwargs):
      '''
setAttachment( (MText)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttachment(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttachmentMovingLocation (self, *args, **kwargs):
      '''
setAttachmentMovingLocation( (MText)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttachmentMovingLocation(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setBackgroundFill (self, *args, **kwargs):
      '''
setBackgroundFill( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundFill(class PyDbMText {lvalue},bool)'''
    ...
    def setBackgroundFillColor (self, *args, **kwargs):
      '''
setBackgroundFillColor( (MText)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundFillColor(class PyDbMText {lvalue},class AcCmColor)'''
    ...
    def setBackgroundScaleFactor (self, *args, **kwargs):
      '''
setBackgroundScaleFactor( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundScaleFactor(class PyDbMText {lvalue},double)'''
    ...
    def setBackgroundTransparency (self, *args, **kwargs):
      '''
setBackgroundTransparency( (MText)arg1, (Transparency)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundTransparency(class PyDbMText {lvalue},class AcCmTransparency)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnAutoHeight (self, *args, **kwargs):
      '''
setColumnAutoHeight( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnAutoHeight(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnCount (self, *args, **kwargs):
      '''
setColumnCount( (MText)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnCount(class PyDbMText {lvalue},int)'''
    ...
    def setColumnFlowReversed (self, *args, **kwargs):
      '''
setColumnFlowReversed( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnFlowReversed(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnGutterWidth (self, *args, **kwargs):
      '''
setColumnGutterWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnGutterWidth(class PyDbMText {lvalue},double)'''
    ...
    def setColumnHeight (self, *args, **kwargs):
      '''
setColumnHeight( (MText)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnHeight(class PyDbMText {lvalue},int,double)'''
    ...
    def setColumnType (self, *args, **kwargs):
      '''
setColumnType( (MText)arg1, (MTextColumnType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnType(class PyDbMText {lvalue},enum AcDbMText::ColumnType)'''
    ...
    def setColumnWidth (self, *args, **kwargs):
      '''
setColumnWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbMText {lvalue},double)'''
    ...
    def setContents (self, *args, **kwargs):
      '''
setContents( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContents(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setContentsRTF (self, *args, **kwargs):
      '''
setContentsRTF( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContentsRTF(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDirection (self, *args, **kwargs):
      '''
setDirection( (MText)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDirection(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setDynamicColumns (self, *args, **kwargs):
      '''
setDynamicColumns( (MText)arg1, (float)arg2, (float)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicColumns(class PyDbMText {lvalue},double,double,bool)'''
    ...
    def setFlowDirection (self, *args, **kwargs):
      '''
setFlowDirection( (MText)arg1, (MTextFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbMText {lvalue},enum AcDbMText::FlowDirection)'''
    ...
    def setHeight (self, *args, **kwargs):
      '''
setHeight( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbMText {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineSpacingFactor (self, *args, **kwargs):
      '''
setLineSpacingFactor( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineSpacingFactor(class PyDbMText {lvalue},double)'''
    ...
    def setLineSpacingStyle (self, *args, **kwargs):
      '''
setLineSpacingStyle( (MText)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineSpacingStyle(class PyDbMText {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLocation (self, *args, **kwargs):
      '''
setLocation( (MText)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLocation(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (MText)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbMText {lvalue},double)'''
    ...
    def setStaticColumns (self, *args, **kwargs):
      '''
setStaticColumns( (MText)arg1, (float)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStaticColumns(class PyDbMText {lvalue},double,double,int)'''
    ...
    def setTextHeight (self, *args, **kwargs):
      '''
setTextHeight( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMText {lvalue},double)'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (MText)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbMText {lvalue},class PyDbObjectId)'''
    ...
    def setUseBackgroundColor (self, *args, **kwargs):
      '''
setUseBackgroundColor( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseBackgroundColor(class PyDbMText {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs):
      '''
setWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbMText {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def text (self, *args, **kwargs):
      '''
text( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbMText {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs):
      '''
textHeight( (MText)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (MText)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbMText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useBackgroundColorOn (self, *args, **kwargs):
      '''
useBackgroundColorOn( (MText)arg1) -> bool :

    C++ signature :
        bool useBackgroundColorOn(class PyDbMText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs):
      '''
width( (MText)arg1) -> float :

    C++ signature :
        double width(class PyDbMText {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MTextAttachmentPoint:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBaseAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kBaseCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kBaseFit (self, *args, **kwargs):
      '''None'''
    ...
    def kBaseLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kBaseMid (self, *args, **kwargs):
      '''None'''
    ...
    def kBaseRight (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomFit (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomMid (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleFit (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleMid (self, *args, **kwargs):
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs):
      '''None'''
    ...
    def kTopAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTopFit (self, *args, **kwargs):
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTopMid (self, *args, **kwargs):
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextColumnType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDynamicColumns (self, *args, **kwargs):
      '''None'''
    ...
    def kNoColumns (self, *args, **kwargs):
      '''None'''
    ...
    def kStaticColumns (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextFlowDirection:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBtoT (self, *args, **kwargs):
      '''None'''
    ...
    def kByStyle (self, *args, **kwargs):
      '''None'''
    ...
    def kLtoR (self, *args, **kwargs):
      '''None'''
    ...
    def kRtoL (self, *args, **kwargs):
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MeasurementValue:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kEnglish (self, *args, **kwargs):
      '''None'''
    ...
    def kMetric (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MergeCellStyleOption:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kMergeCellStyleConvertDuplicatesToOverrides (self, *args, **kwargs):
      '''None'''
    ...
    def kMergeCellStyleCopyDuplicates (self, *args, **kwargs):
      '''None'''
    ...
    def kMergeCellStyleIgnoreNewStyles (self, *args, **kwargs):
      '''None'''
    ...
    def kMergeCellStyleNone (self, *args, **kwargs):
      '''None'''
    ...
    def kMergeCellStyleOverwriteDuplicates (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Mline:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendSeg (self, *args, **kwargs):
      '''
appendSeg( (Mline)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendSeg(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def axisAt (self, *args, **kwargs):
      '''
axisAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d axisAt(class PyDbMline {lvalue},int)'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def closedMline (self, *args, **kwargs):
      '''
closedMline( (Mline)arg1) -> bool :

    C++ signature :
        bool closedMline(class PyDbMline {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def element (self, *args, **kwargs):
      '''
element( (Mline)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int element(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4, (bool)arg5) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Mline)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbMline {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def justification (self, *args, **kwargs):
      '''
justification( (Mline)arg1) -> int :

    C++ signature :
        signed char justification(class PyDbMline {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def miterAt (self, *args, **kwargs):
      '''
miterAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d miterAt(class PyDbMline {lvalue},int)'''
    ...
    def moveVertexAt (self, *args, **kwargs):
      '''
moveVertexAt( (Mline)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveVertexAt(class PyDbMline {lvalue},int,class AcGePoint3d)'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Mline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMline {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs):
      '''
numVertices( (Mline)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbMline {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeLastSeg (self, *args, **kwargs):
      '''
removeLastSeg( (Mline)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLastSeg(class PyDbMline {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (Mline)arg1) -> float :

    C++ signature :
        double scale(class PyDbMline {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosedMline (self, *args, **kwargs):
      '''
setClosedMline( (Mline)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosedMline(class PyDbMline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setJustification (self, *args, **kwargs):
      '''
setJustification( (Mline)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJustification(class PyDbMline {lvalue},signed char)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Mline)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbMline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setScale (self, *args, **kwargs):
      '''
setScale( (Mline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMline {lvalue},double)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Mline)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStyle(class PyDbMline {lvalue},class PyDbObjectId)'''
    ...
    def setSupressEndCaps (self, *args, **kwargs):
      '''
setSupressEndCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressEndCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setSupressStartCaps (self, *args, **kwargs):
      '''
setSupressStartCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressStartCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Mline)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId style(class PyDbMline {lvalue})'''
    ...
    def supressEndCaps (self, *args, **kwargs):
      '''
supressEndCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressEndCaps(class PyDbMline {lvalue})'''
    ...
    def supressStartCaps (self, *args, **kwargs):
      '''
supressStartCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressStartCaps(class PyDbMline {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexAt (self, *args, **kwargs):
      '''
vertexAt( (Mline)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbMline {lvalue},int)'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class MlineJustification:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBottom (self, *args, **kwargs):
      '''None'''
    ...
    def kClosed (self, *args, **kwargs):
      '''None'''
    ...
    def kMerged (self, *args, **kwargs):
      '''None'''
    ...
    def kOpen (self, *args, **kwargs):
      '''None'''
    ...
    def kTop (self, *args, **kwargs):
      '''None'''
    ...
    def kZero (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MlineStyle:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addElement (self, *args, **kwargs):
      '''
addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})

addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4, (bool)arg5) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue},bool)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs):
      '''
description( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMlineStyle {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def endAngle (self, *args, **kwargs):
      '''
endAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def endInnerArcs (self, *args, **kwargs):
      '''
endInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def endRoundCap (self, *args, **kwargs):
      '''
endRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def endSquareCap (self, *args, **kwargs):
      '''
endSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fillColor (self, *args, **kwargs):
      '''
fillColor( (MlineStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor fillColor(class PyDbMlineStyle {lvalue})'''
    ...
    def filled (self, *args, **kwargs):
      '''
filled( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool filled(class PyDbMlineStyle {lvalue})'''
    ...
    def getElementAt (self, *args, **kwargs):
      '''
getElementAt( (MlineStyle)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def initMlineStyle (self, *args, **kwargs):
      '''
initMlineStyle( (MlineStyle)arg1) -> None :

    C++ signature :
        void initMlineStyle(class PyDbMlineStyle {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def name (self, *args, **kwargs):
      '''
name( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbMlineStyle {lvalue})'''
    ...
    def numElements (self, *args, **kwargs):
      '''
numElements( (MlineStyle)arg1) -> int :

    C++ signature :
        int numElements(class PyDbMlineStyle {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeElementAt (self, *args, **kwargs):
      '''
removeElementAt( (MlineStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (MlineStyle)arg1, (MlineStyle)arg2) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle)

set( (MlineStyle)arg1, (MlineStyle)arg2, (bool)arg3) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle,bool)'''
    ...
    def setDescription (self, *args, **kwargs):
      '''
setDescription( (MlineStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setElement (self, *args, **kwargs):
      '''
setElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int setElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})'''
    ...
    def setEndAngle (self, *args, **kwargs):
      '''
setEndAngle( (MlineStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setEndInnerArcs (self, *args, **kwargs):
      '''
setEndInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndRoundCap (self, *args, **kwargs):
      '''
setEndRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndSquareCap (self, *args, **kwargs):
      '''
setEndSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setFillColor (self, *args, **kwargs):
      '''
setFillColor( (MlineStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFillColor(class PyDbMlineStyle {lvalue},class AcCmColor)'''
    ...
    def setFilled (self, *args, **kwargs):
      '''
setFilled( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFilled(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (MlineStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setShowMiters (self, *args, **kwargs):
      '''
setShowMiters( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowMiters(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs):
      '''
setStartAngle( (MlineStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setStartInnerArcs (self, *args, **kwargs):
      '''
setStartInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartRoundCap (self, *args, **kwargs):
      '''
setStartRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartSquareCap (self, *args, **kwargs):
      '''
setStartSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def showMiters (self, *args, **kwargs):
      '''
showMiters( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool showMiters(class PyDbMlineStyle {lvalue})'''
    ...
    def startAngle (self, *args, **kwargs):
      '''
startAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def startInnerArcs (self, *args, **kwargs):
      '''
startInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def startRoundCap (self, *args, **kwargs):
      '''
startRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def startSquareCap (self, *args, **kwargs):
      '''
startSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class NurbSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class ObjectId:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (ObjectId)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyDbObjectId {lvalue},class PyDbObjectId)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (ObjectId)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyDbObjectId {lvalue},class PyDbObjectId)

__ne__( (ObjectId)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyDbObjectId {lvalue},class PyDbObjectId)'''
    ...
    def asOldId (self, *args, **kwargs):
      '''
asOldId( (ObjectId)arg1) -> int :

    C++ signature :
        __int64 asOldId(class PyDbObjectId {lvalue})'''
    ...
    def convertToRedirectedId (self, *args, **kwargs):
      '''
convertToRedirectedId( (ObjectId)arg1) -> bool :

    C++ signature :
        bool convertToRedirectedId(class PyDbObjectId {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (ObjectId)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObjectId {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbObjectId {lvalue})'''
    ...
    def isResident (self, *args, **kwargs):
      '''
isResident( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isResident(class PyDbObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs):
      '''
isValid( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbObjectId {lvalue})'''
    ...
    def isWellBehaved (self, *args, **kwargs):
      '''
isWellBehaved( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isWellBehaved(class PyDbObjectId {lvalue})'''
    ...
    def objectClass (self, *args, **kwargs):
      '''
objectClass( (ObjectId)arg1) -> RxClass :

    C++ signature :
        class PyRxClass objectClass(class PyDbObjectId {lvalue})'''
    ...
    def originalDatabase (self, *args, **kwargs):
      '''
originalDatabase( (ObjectId)arg1) -> Database :

    C++ signature :
        class PyDbDatabase originalDatabase(class PyDbObjectId {lvalue})'''
    ...
    def setFromOldId (self, *args, **kwargs):
      '''
setFromOldId( (ObjectId)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId {lvalue} setFromOldId(class PyDbObjectId {lvalue},__int64)'''
    ...

class OpenMode:
    def ForNotify (self, *args, **kwargs):
      '''None'''
    ...
    def ForRead (self, *args, **kwargs):
      '''None'''
    ...
    def ForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kForNotify (self, *args, **kwargs):
      '''None'''
    ...
    def kForRead (self, *args, **kwargs):
      '''None'''
    ...
    def kForWrite (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OrdinateDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def definingPoint (self, *args, **kwargs):
      '''
definingPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d definingPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isUsingXAxis (self, *args, **kwargs):
      '''
isUsingXAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isUsingYAxis (self, *args, **kwargs):
      '''
isUsingYAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderEndPoint (self, *args, **kwargs):
      '''
leaderEndPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leaderEndPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def origin (self, *args, **kwargs):
      '''
origin( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbOrdinateDimension {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefiningPoint (self, *args, **kwargs):
      '''
setDefiningPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefiningPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderEndPoint (self, *args, **kwargs):
      '''
setLeaderEndPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderEndPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOrigin (self, *args, **kwargs):
      '''
setOrigin( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrigin(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingXAxis (self, *args, **kwargs):
      '''
setUsingXAxis( (OrdinateDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingXAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setUsingYAxis (self, *args, **kwargs):
      '''
setUsingYAxis( (OrdinateDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingYAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useXAxis (self, *args, **kwargs):
      '''
useXAxis( (OrdinateDimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def useYAxis (self, *args, **kwargs):
      '''
useYAxis( (OrdinateDimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class OrthographicView:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kBackView (self, *args, **kwargs):
      '''None'''
    ...
    def kBottomView (self, *args, **kwargs):
      '''None'''
    ...
    def kFrontView (self, *args, **kwargs):
      '''None'''
    ...
    def kLeftView (self, *args, **kwargs):
      '''None'''
    ...
    def kNonOrthoView (self, *args, **kwargs):
      '''None'''
    ...
    def kRightView (self, *args, **kwargs):
      '''None'''
    ...
    def kTopView (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Planarity:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kLinear (self, *args, **kwargs):
      '''None'''
    ...
    def kNonPlanar (self, *args, **kwargs):
      '''None'''
    ...
    def kPlanar (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlaneSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class PlotStyleNameType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kPlotStyleNameByBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kPlotStyleNameById (self, *args, **kwargs):
      '''None'''
    ...
    def kPlotStyleNameByLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kPlotStyleNameIsDictDefault (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Point:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue})

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def ecsRotation (self, *args, **kwargs):
      '''
ecsRotation( (Point)arg1) -> float :

    C++ signature :
        double ecsRotation(class PyDbPoint {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Point)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPoint {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Point)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPoint {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEcsRotation (self, *args, **kwargs):
      '''
setEcsRotation( (Point)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEcsRotation(class PyDbPoint {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Point)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbPoint {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Point)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPoint {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Point)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbPoint {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Point)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPoint {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Point3AngularDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs):
      '''
arcPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs):
      '''
centerPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extArcOn (self, *args, **kwargs):
      '''
extArcOn( (Point3AngularDimension)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs):
      '''
setArcPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenterPoint (self, *args, **kwargs):
      '''
setCenterPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenterPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs):
      '''
setExtArcOn( (Point3AngularDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcOn(class PyDb3PointAngularDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXLine1Point (self, *args, **kwargs):
      '''
setXLine1Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs):
      '''
setXLine2Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xLine1Point (self, *args, **kwargs):
      '''
xLine1Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs):
      '''
xLine2Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDb3PointAngularDimension {lvalue})'''
    ...

class Poly2dType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def k2dCubicSplinePoly (self, *args, **kwargs):
      '''None'''
    ...
    def k2dFitCurvePoly (self, *args, **kwargs):
      '''None'''
    ...
    def k2dQuadSplinePoly (self, *args, **kwargs):
      '''None'''
    ...
    def k2dSimplePoly (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Poly3dType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def k3dCubicSplinePoly (self, *args, **kwargs):
      '''None'''
    ...
    def k3dQuadSplinePoly (self, *args, **kwargs):
      '''None'''
    ...
    def k3dSimplePoly (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PolyFaceMeshVertex:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (PolyFaceMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolyFaceMeshVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (PolyFaceMeshVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPolyFaceMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class PolygonMeshVertex:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (PolygonMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (PolygonMeshVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPolygonMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexType (self, *args, **kwargs):
      '''
vertexType( (PolygonMeshVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Polyline:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def addVertexAt (self, *args, **kwargs):
      '''
addVertexAt( (Polyline)arg1, (int)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)

addVertexAt( (Polyline)arg1, (int)arg2, (Point2d)arg3, (float)arg4, (float)arg5, (float)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double,double,double)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Polyline)arg1) -> float :

    C++ signature :
        double elevation(class PyDbPolyline {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArcSeg2dAt (self, *args, **kwargs):
      '''
getArcSeg2dAt( (Polyline)arg1, (int)arg2) -> CircArc2d :

    C++ signature :
        class PyGeCircArc2d getArcSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArcSeg3dAt (self, *args, **kwargs):
      '''
getArcSeg3dAt( (Polyline)arg1, (int)arg2) -> CircArc3d :

    C++ signature :
        class PyGeCircArc3d getArcSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getBulgeAt (self, *args, **kwargs):
      '''
getBulgeAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getBulgeAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getConstantWidth (self, *args, **kwargs):
      '''
getConstantWidth( (Polyline)arg1) -> float :

    C++ signature :
        double getConstantWidth(class PyDbPolyline {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})

getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getEndWidthAt (self, *args, **kwargs):
      '''
getEndWidthAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getEndWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getLineSeg2dAt (self, *args, **kwargs):
      '''
getLineSeg2dAt( (Polyline)arg1, (int)arg2) -> LineSeg2d :

    C++ signature :
        class PyGeLineSeg2d getLineSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getLineSeg3dAt (self, *args, **kwargs):
      '''
getLineSeg3dAt( (Polyline)arg1, (int)arg2) -> LineSeg3d :

    C++ signature :
        class PyGeLineSeg3d getLineSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPoint2dAt (self, *args, **kwargs):
      '''
getPoint2dAt( (Polyline)arg1, (int)arg2) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPoint3dAt (self, *args, **kwargs):
      '''
getPoint3dAt( (Polyline)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def getStartWidthAt (self, *args, **kwargs):
      '''
getStartWidthAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getStartWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasBulges (self, *args, **kwargs):
      '''
hasBulges( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasBulges(class PyDbPolyline {lvalue})'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def hasPlinegen (self, *args, **kwargs):
      '''
hasPlinegen( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasPlinegen(class PyDbPolyline {lvalue})'''
    ...
    def hasVertexIdentifiers (self, *args, **kwargs):
      '''
hasVertexIdentifiers( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasVertexIdentifiers(class PyDbPolyline {lvalue})'''
    ...
    def hasWidth (self, *args, **kwargs):
      '''
hasWidth( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasWidth(class PyDbPolyline {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOnlyLines (self, *args, **kwargs):
      '''
isOnlyLines( (Polyline)arg1) -> bool :

    C++ signature :
        bool isOnlyLines(class PyDbPolyline {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs):
      '''
makeClosedIfStartAndEndVertexCoincide( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosedIfStartAndEndVertexCoincide(class PyDbPolyline {lvalue},double)'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def maximizeMemory (self, *args, **kwargs):
      '''
maximizeMemory( (Polyline)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus maximizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def minimizeMemory (self, *args, **kwargs):
      '''
minimizeMemory( (Polyline)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus minimizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Polyline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPolyline {lvalue})'''
    ...
    def numVerts (self, *args, **kwargs):
      '''
numVerts( (Polyline)arg1) -> int :

    C++ signature :
        unsigned int numVerts(class PyDbPolyline {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def onSegAt (self, *args, **kwargs):
      '''
onSegAt( (Polyline)arg1, (int)arg2, (Point2d)arg3, (float)arg4) -> bool :

    C++ signature :
        bool onSegAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double)'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeVertexAt (self, *args, **kwargs):
      '''
removeVertexAt( (Polyline)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeVertexAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def reset (self, *args, **kwargs):
      '''
reset( (Polyline)arg1, (bool)arg2, (int)arg3) -> None :

    C++ signature :
        void reset(class PyDbPolyline {lvalue},bool,unsigned int)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def segType (self, *args, **kwargs):
      '''
segType( (Polyline)arg1, (int)arg2) -> SegType :

    C++ signature :
        enum AcDbPolyline::SegType segType(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def setBulgeAt (self, *args, **kwargs):
      '''
setBulgeAt( (Polyline)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBulgeAt(class PyDbPolyline {lvalue},unsigned int,double)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs):
      '''
setClosed( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDbPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstantWidth (self, *args, **kwargs):
      '''
setConstantWidth( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstantWidth(class PyDbPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbPolyline {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Polyline)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlinegen (self, *args, **kwargs):
      '''
setPlinegen( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlinegen(class PyDbPolyline {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointAt (self, *args, **kwargs):
      '''
setPointAt( (Polyline)arg1, (int)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPointAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbPolyline {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthsAt (self, *args, **kwargs):
      '''
setWidthsAt( (Polyline)arg1, (int)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthsAt(class PyDbPolyline {lvalue},unsigned int,double,double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Polyline)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPolyline {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Polyline2d:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly2dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly2dType,class boost::python::list,bool)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendVertex (self, *args, **kwargs):
      '''
appendVertex( (Polyline2d)arg1, (Vertex2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex)

appendVertex( (Polyline2d)arg1, (ObjectId)arg2, (Vertex2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb2dVertex)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def constantWidth (self, *args, **kwargs):
      '''
constantWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double constantWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs):
      '''
convertToPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def defaultEndWidth (self, *args, **kwargs):
      '''
defaultEndWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultEndWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def defaultStartWidth (self, *args, **kwargs):
      '''
defaultStartWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultStartWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Polyline2d)arg1) -> float :

    C++ signature :
        double elevation(class PyDb2dPolyline {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def insertVertexAt (self, *args, **kwargs):
      '''
insertVertexAt( (Polyline2d)arg1, (Vertex2d)arg2, (Vertex2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb2dPolyline {lvalue},class PyDb2dVertex,class PyDb2dVertex {lvalue})

insertVertexAt( (Polyline2d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Vertex2d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb2dVertex {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isLinetypeGenerationOn (self, *args, **kwargs):
      '''
isLinetypeGenerationOn( (Polyline2d)arg1) -> bool :

    C++ signature :
        bool isLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Polyline2d)arg1) -> float :

    C++ signature :
        double length(class PyDb2dPolyline {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosed (self, *args, **kwargs):
      '''
makeClosed( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosed(class PyDb2dPolyline {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs):
      '''
makeClosedIfStartAndEndVertexCoincide( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosedIfStartAndEndVertexCoincide(class PyDb2dPolyline {lvalue},double)'''
    ...
    def makeOpen (self, *args, **kwargs):
      '''
makeOpen( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeOpen(class PyDb2dPolyline {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Polyline2d)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDb2dPolyline {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def openSequenceEnd (self, *args, **kwargs):
      '''
openSequenceEnd( (Polyline2d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openSequenceEnd(class PyDb2dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs):
      '''
openVertex( (Polyline2d)arg1, (Vertex2d)arg2, (ObjectId)arg3, (OpenMode)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def polyType (self, *args, **kwargs):
      '''
polyType( (Polyline2d)arg1) -> Poly2dType :

    C++ signature :
        enum AcDb::Poly2dType polyType(class PyDb2dPolyline {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs):
      '''
setClosed( (Polyline2d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosed(class PyDb2dPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstantWidth (self, *args, **kwargs):
      '''
setConstantWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstantWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefaultEndWidth (self, *args, **kwargs):
      '''
setDefaultEndWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultEndWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDefaultStartWidth (self, *args, **kwargs):
      '''
setDefaultStartWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultStartWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeGenerationOff (self, *args, **kwargs):
      '''
setLinetypeGenerationOff( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeGenerationOff(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeGenerationOn (self, *args, **kwargs):
      '''
setLinetypeGenerationOn( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Polyline2d)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDb2dPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs):
      '''
setPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def splineFit (self, *args, **kwargs):
      '''
splineFit( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb2dPolyline {lvalue})

splineFit( (Polyline2d)arg1, (Poly2dType)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType,short)'''
    ...
    def straighten (self, *args, **kwargs):
      '''
straighten( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus straighten(class PyDb2dPolyline {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Polyline2d)arg1) -> float :

    C++ signature :
        double thickness(class PyDb2dPolyline {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexIds (self, *args, **kwargs):
      '''
vertexIds( (Polyline2d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb2dPolyline {lvalue})'''
    ...
    def vertexPosition (self, *args, **kwargs):
      '''
vertexPosition( (Polyline2d)arg1, (object)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexPosition(class PyDb2dPolyline {lvalue},class AcDb2dVertex)'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Polyline3d:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly3dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly3dType,class boost::python::list,bool)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def appendVertex (self, *args, **kwargs):
      '''
appendVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex)

appendVertex( (Polyline3d)arg1, (ObjectId)arg2, (Polyline3dVertex)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb3dPolylineVertex)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs):
      '''
convertToPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extend (self, *args, **kwargs):
      '''
extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getArea (self, *args, **kwargs):
      '''
getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs):
      '''
getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs):
      '''
getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs):
      '''
getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs):
      '''
getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs):
      '''
getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getFirstDeriv (self, *args, **kwargs):
      '''
getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getOffsetCurves (self, *args, **kwargs):
      '''
getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs):
      '''
getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs):
      '''
getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs):
      '''
getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs):
      '''
getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs):
      '''
getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs):
      '''
getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs):
      '''
getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs):
      '''
getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs):
      '''
getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs):
      '''
getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs):
      '''
getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def insertVertexAt (self, *args, **kwargs):
      '''
insertVertexAt( (Polyline3d)arg1, (Polyline3dVertex)arg2, (Polyline3dVertex)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex,class PyDb3dPolylineVertex {lvalue})

insertVertexAt( (Polyline3d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Polyline3dVertex)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb3dPolylineVertex {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isClosed (self, *args, **kwargs):
      '''
isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs):
      '''
isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs):
      '''
length( (Polyline3d)arg1) -> float :

    C++ signature :
        double length(class PyDb3dPolyline {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosed (self, *args, **kwargs):
      '''
makeClosed( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosed(class PyDb3dPolyline {lvalue})'''
    ...
    def makeOpen (self, *args, **kwargs):
      '''
makeOpen( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeOpen(class PyDb3dPolyline {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def openSequenceEnd (self, *args, **kwargs):
      '''
openSequenceEnd( (Polyline3d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openSequenceEnd(class PyDb3dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs):
      '''
openVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2, (ObjectId)arg3, (OpenMode)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def polyType (self, *args, **kwargs):
      '''
polyType( (Polyline3d)arg1) -> Poly3dType :

    C++ signature :
        enum AcDb::Poly3dType polyType(class PyDb3dPolyline {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def reverseCurve (self, *args, **kwargs):
      '''
reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs):
      '''
setClosed( (Polyline3d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosed(class PyDb3dPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs):
      '''
setPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def splineFit (self, *args, **kwargs):
      '''
splineFit( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb3dPolyline {lvalue})

splineFit( (Polyline3d)arg1, (Poly3dType)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType,short)'''
    ...
    def straighten (self, *args, **kwargs):
      '''
straighten( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus straighten(class PyDb3dPolyline {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexIds (self, *args, **kwargs):
      '''
vertexIds( (Polyline3d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb3dPolyline {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Polyline3dVertex:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Polyline3dVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Polyline3dVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDb3dPolylineVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertexType (self, *args, **kwargs):
      '''
vertexType( (Polyline3dVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class RadialDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimension {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs):
      '''
chordPoint( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extArcEndAngle (self, *args, **kwargs):
      '''
extArcEndAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs):
      '''
extArcStartAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLength (self, *args, **kwargs):
      '''
leaderLength( (RadialDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbRadialDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (RadialDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs):
      '''
setChordPoint( (RadialDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs):
      '''
setExtArcEndAngle( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs):
      '''
setExtArcStartAngle( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLength (self, *args, **kwargs):
      '''
setLeaderLength( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLength(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class RadialDimensionLarge:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs):
      '''
center( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs):
      '''
chordPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extArcEndAngle (self, *args, **kwargs):
      '''
extArcEndAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs):
      '''
extArcStartAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def jogAngle (self, *args, **kwargs):
      '''
jogAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double jogAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def jogPoint (self, *args, **kwargs):
      '''
jogPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def overrideCenter (self, *args, **kwargs):
      '''
overrideCenter( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d overrideCenter(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs):
      '''
setCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs):
      '''
setChordPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs):
      '''
setExtArcEndAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs):
      '''
setExtArcStartAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogAngle (self, *args, **kwargs):
      '''
setJogAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setJogPoint (self, *args, **kwargs):
      '''
setJogPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setJogPointPP (self, *args, **kwargs):
      '''
setJogPointPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogPointPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOverrideCenter (self, *args, **kwargs):
      '''
setOverrideCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverrideCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOverrideCenterPP (self, *args, **kwargs):
      '''
setOverrideCenterPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverrideCenterPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextPositionPP (self, *args, **kwargs):
      '''
setTextPositionPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPositionPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Region:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class RevolvedSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class RotatedDimension:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs):
      '''
altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs):
      '''
altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs):
      '''
altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs):
      '''
altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs):
      '''
alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs):
      '''
alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs):
      '''
centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs):
      '''
dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs):
      '''
dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs):
      '''
dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs):
      '''
dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs):
      '''
dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs):
      '''
dimLinePoint( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbRotatedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs):
      '''
dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs):
      '''
dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs):
      '''
elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs):
      '''
fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs):
      '''
fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs):
      '''
formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs):
      '''
getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs):
      '''
getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs):
      '''
getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horizontalRotation (self, *args, **kwargs):
      '''
horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs):
      '''
inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs):
      '''
inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs):
      '''
inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isConstraintDynamic (self, *args, **kwargs):
      '''
isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs):
      '''
isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs):
      '''
isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs):
      '''
isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs):
      '''
isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def jogSymbolOn (self, *args, **kwargs):
      '''
jogSymbolOn( (RotatedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbRotatedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs):
      '''
jogSymbolPosition( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbRotatedDimension {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs):
      '''
measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def oblique (self, *args, **kwargs):
      '''
oblique( (RotatedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbRotatedDimension {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs):
      '''
recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTextField (self, *args, **kwargs):
      '''
removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs):
      '''
resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (RotatedDimension)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRotatedDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs):
      '''
setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs):
      '''
setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs):
      '''
setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs):
      '''
setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs):
      '''
setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs):
      '''
setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs):
      '''
setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs):
      '''
setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs):
      '''
setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs):
      '''
setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs):
      '''
setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs):
      '''
setDimLinePoint( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLinePoint(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs):
      '''
setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs):
      '''
setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs):
      '''
setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs):
      '''
setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs):
      '''
setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs):
      '''
setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs):
      '''
setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs):
      '''
setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs):
      '''
setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs):
      '''
setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs):
      '''
setJogSymbolOn( (RotatedDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolOn(class PyDbRotatedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs):
      '''
setJogSymbolPosition( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolPosition(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs):
      '''
setOblique( (RotatedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs):
      '''
setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (RotatedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs):
      '''
setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs):
      '''
setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs):
      '''
setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs):
      '''
setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs):
      '''
setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs):
      '''
setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs):
      '''
setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs):
      '''
setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs):
      '''
setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs):
      '''
setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs):
      '''
setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs):
      '''
setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs):
      '''
setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs):
      '''
setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXLine1Point (self, *args, **kwargs):
      '''
setXLine1Point( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs):
      '''
setXLine2Point( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs):
      '''
shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs):
      '''
suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs):
      '''
suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs):
      '''
suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs):
      '''
suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs):
      '''
suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs):
      '''
suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs):
      '''
suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textAttachment (self, *args, **kwargs):
      '''
textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs):
      '''
textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs):
      '''
textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs):
      '''
textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs):
      '''
textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs):
      '''
toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs):
      '''
toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs):
      '''
toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs):
      '''
toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useDefaultTextPosition (self, *args, **kwargs):
      '''
useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs):
      '''
useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xLine1Point (self, *args, **kwargs):
      '''
xLine1Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbRotatedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs):
      '''
xLine2Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbRotatedDimension {lvalue})'''
    ...

class RotationAngle:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kDegrees000 (self, *args, **kwargs):
      '''None'''
    ...
    def kDegrees090 (self, *args, **kwargs):
      '''None'''
    ...
    def kDegrees180 (self, *args, **kwargs):
      '''None'''
    ...
    def kDegrees270 (self, *args, **kwargs):
      '''None'''
    ...
    def kDegreesUnknown (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class RowType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kAllRowTypes (self, *args, **kwargs):
      '''None'''
    ...
    def kDataRow (self, *args, **kwargs):
      '''None'''
    ...
    def kHeaderRow (self, *args, **kwargs):
      '''None'''
    ...
    def kTitleRow (self, *args, **kwargs):
      '''None'''
    ...
    def kUnknownRow (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SegType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kArc (self, *args, **kwargs):
      '''None'''
    ...
    def kCoincident (self, *args, **kwargs):
      '''None'''
    ...
    def kEmpty (self, *args, **kwargs):
      '''None'''
    ...
    def kLine (self, *args, **kwargs):
      '''None'''
    ...
    def kPoint (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SequenceEnd:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Solid3d:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createBox (self, *args, **kwargs):
      '''
createBox( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createBox(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def createFrustum (self, *args, **kwargs):
      '''
createFrustum( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createFrustum(class PyDb3dSolid {lvalue},double,double,double,double)'''
    ...
    def createPyramid (self, *args, **kwargs):
      '''
createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createPyramid(class PyDb3dSolid {lvalue},double,int,double)

createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createPyramid(class PyDb3dSolid {lvalue},double,int,double,double)'''
    ...
    def createSphere (self, *args, **kwargs):
      '''
createSphere( (Solid3d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createSphere(class PyDb3dSolid {lvalue},double)'''
    ...
    def createTorus (self, *args, **kwargs):
      '''
createTorus( (Solid3d)arg1, (float)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createTorus(class PyDb3dSolid {lvalue},double,double)'''
    ...
    def createWedge (self, *args, **kwargs):
      '''
createWedge( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createWedge(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Surface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class SweptSurface:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class SymbolTable:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getAt (self, *args, **kwargs):
      '''
getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def has (self, *args, **kwargs):
      '''
has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def recordIds (self, *args, **kwargs):
      '''
recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class SymbolTableRecord:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs):
      '''
isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs):
      '''
isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Table:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def alignment (self, *args, **kwargs):
      '''
alignment( (Table)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},enum AcDb::RowType)

alignment( (Table)arg1, (int)arg2, (int)arg3) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},int,int)'''
    ...
    def appendAttribute (self, *args, **kwargs):
      '''
appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def attachmentPoint (self, *args, **kwargs):
      '''
attachmentPoint( (Table)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int)

attachmentPoint( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int,int)'''
    ...
    def attributeIds (self, *args, **kwargs):
      '''
attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs):
      '''
backgroundColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},enum AcDb::RowType)'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs):
      '''
blockRotation( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def blockScale (self, *args, **kwargs):
      '''
blockScale( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockScale(class PyDbTable {lvalue},int,int)'''
    ...
    def blockTableRecord (self, *args, **kwargs):
      '''
blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTableRecordId (self, *args, **kwargs):
      '''
blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int)

blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def blockTransform (self, *args, **kwargs):
      '''
blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def breakFlowDirection (self, *args, **kwargs):
      '''
breakFlowDirection( (Table)arg1) -> TableBreakFlowDirection :

    C++ signature :
        enum AcDb::TableBreakFlowDirection breakFlowDirection(class PyDbTable {lvalue})'''
    ...
    def breakHeight (self, *args, **kwargs):
      '''
breakHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double breakHeight(class PyDbTable {lvalue},int)'''
    ...
    def breakOffset (self, *args, **kwargs):
      '''
breakOffset( (Table)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d breakOffset(class PyDbTable {lvalue},int)'''
    ...
    def breakOption (self, *args, **kwargs):
      '''
breakOption( (Table)arg1) -> TableBreakOption :

    C++ signature :
        enum AcDb::TableBreakOption breakOption(class PyDbTable {lvalue})'''
    ...
    def breakSpacing (self, *args, **kwargs):
      '''
breakSpacing( (Table)arg1) -> float :

    C++ signature :
        double breakSpacing(class PyDbTable {lvalue})'''
    ...
    def canDelete (self, *args, **kwargs):
      '''
canDelete( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> bool :

    C++ signature :
        bool canDelete(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def canInsert (self, *args, **kwargs):
      '''
canInsert( (Table)arg1, (int)arg2, (bool)arg3) -> bool :

    C++ signature :
        bool canInsert(class PyDbTable {lvalue},int,bool)'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def cellRange (self, *args, **kwargs):
      '''
cellRange( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange cellRange(class PyDbTable {lvalue})'''
    ...
    def cellState (self, *args, **kwargs):
      '''
cellState( (Table)arg1, (int)arg2, (int)arg3) -> CellState :

    C++ signature :
        enum AcDb::CellState cellState(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyle (self, *args, **kwargs):
      '''
cellStyle( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > cellStyle(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyleOverrides (self, *args, **kwargs):
      '''
cellStyleOverrides( (Table)arg1, (int)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list cellStyleOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def cellType (self, *args, **kwargs):
      '''
cellType( (Table)arg1, (int)arg2, (int)arg3) -> CellType :

    C++ signature :
        enum AcDb::CellType cellType(class PyDbTable {lvalue},int,int)'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearCellOverrides (self, *args, **kwargs):
      '''
clearCellOverrides( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void clearCellOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def clearSubSelection (self, *args, **kwargs):
      '''
clearSubSelection( (Table)arg1) -> None :

    C++ signature :
        void clearSubSelection(class PyDbTable {lvalue})'''
    ...
    def clearTableStyleOverrides (self, *args, **kwargs):
      '''
clearTableStyleOverrides( (Table)arg1) -> None :

    C++ signature :
        void clearTableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def columnWidth (self, *args, **kwargs):
      '''
columnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double columnWidth(class PyDbTable {lvalue},int)'''
    ...
    def contentColor (self, *args, **kwargs):
      '''
contentColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},enum AcDb::RowType)

contentColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int)

contentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int,int)'''
    ...
    def contentLayout (self, *args, **kwargs):
      '''
contentLayout( (Table)arg1, (int)arg2, (int)arg3) -> CellContentLayout :

    C++ signature :
        enum AcDb::CellContentLayout contentLayout(class PyDbTable {lvalue},int,int)'''
    ...
    def contentType (self, *args, **kwargs):
      '''
contentType( (Table)arg1, (int)arg2, (int)arg3) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int)

contentType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createContent (self, *args, **kwargs):
      '''
createContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> int :

    C++ signature :
        int createContent(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def dataFormat (self, *args, **kwargs):
      '''
dataFormat( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int)

dataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int,int)'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def deleteCellContent (self, *args, **kwargs):
      '''
deleteCellContent( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteCellContent(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteColumns (self, *args, **kwargs):
      '''
deleteColumns( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteColumns(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteContent (self, *args, **kwargs):
      '''
deleteContent( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},int,int)

deleteContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},int,int,int)

deleteContent( (Table)arg1, (CellRange)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def deleteRows (self, *args, **kwargs):
      '''
deleteRows( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteRows(class PyDbTable {lvalue},int,int)'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Table)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbTable {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def enableBreak (self, *args, **kwargs):
      '''
enableBreak( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableBreak(class PyDbTable {lvalue},bool)'''
    ...
    def enableMergeAll (self, *args, **kwargs):
      '''
enableMergeAll( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableMergeAll(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs):
      '''
explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fieldId (self, *args, **kwargs):
      '''
fieldId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int)

fieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def flowDirection (self, *args, **kwargs):
      '''
flowDirection( (Table)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTable {lvalue})'''
    ...
    def generateLayout (self, *args, **kwargs):
      '''
generateLayout( (Table)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbTable {lvalue})'''
    ...
    def geomExtentsBestFit (self, *args, **kwargs):
      '''
geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs):
      '''
getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId)

getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def getCellExtents (self, *args, **kwargs):
      '''
getCellExtents( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> list :

    C++ signature :
        class boost::python::list getCellExtents(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDataLink (self, *args, **kwargs):
      '''
getDataLink( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataLinkRange (self, *args, **kwargs):
      '''
getDataLinkRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getDataLinkRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataType (self, *args, **kwargs):
      '''
getDataType( (Table)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},enum AcDb::RowType)

getDataType( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int)

getDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getFormula (self, *args, **kwargs):
      '''
getFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getGridProperty (self, *args, **kwargs):
      '''
getGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getIterator (self, *args, **kwargs):
      '''
getIterator( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue})

getIterator( (Table)arg1, (TableIteratorOption)arg2) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},enum AcDb::TableIteratorOption)

getIterator( (Table)arg1, (CellRange)arg2 [, (TableIteratorOption)arg3]) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},struct AcCellRange [,enum AcDb::TableIteratorOption])'''
    ...
    def getMergeRange (self, *args, **kwargs):
      '''
getMergeRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getMergeRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getOverride (self, *args, **kwargs):
      '''
getOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellProperty :

    C++ signature :
        enum AcDb::CellProperty getOverride(class PyDbTable {lvalue},int,int,int)

getOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridProperty :

    C++ signature :
        enum AcDb::GridProperty getOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getSubSelection (self, *args, **kwargs):
      '''
getSubSelection( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange getSubSelection(class PyDbTable {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs):
      '''
gridColor( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs):
      '''
gridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineStyle (self, *args, **kwargs):
      '''
gridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineWeight (self, *args, **kwargs):
      '''
gridLineWeight( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLinetype (self, *args, **kwargs):
      '''
gridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridVisibility (self, *args, **kwargs):
      '''
gridVisibility( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasFormula (self, *args, **kwargs):
      '''
hasFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool hasFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def hasSubSelection (self, *args, **kwargs):
      '''
hasSubSelection( (Table)arg1) -> bool :

    C++ signature :
        bool hasSubSelection(class PyDbTable {lvalue})'''
    ...
    def height (self, *args, **kwargs):
      '''
height( (Table)arg1) -> float :

    C++ signature :
        double height(class PyDbTable {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs):
      '''
hitTest( (Table)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple hitTest(class PyDbTable {lvalue},class AcGePoint3d,class AcGeVector3d,double,double)'''
    ...
    def horzCellMargin (self, *args, **kwargs):
      '''
horzCellMargin( (Table)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTable {lvalue})'''
    ...
    def insertColumns (self, *args, **kwargs):
      '''
insertColumns( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertColumns(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertColumnsAndInherit (self, *args, **kwargs):
      '''
insertColumnsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertColumnsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def insertRows (self, *args, **kwargs):
      '''
insertRows( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertRows(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertRowsAndInherit (self, *args, **kwargs):
      '''
insertRowsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertRowsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isAutoScale (self, *args, **kwargs):
      '''
isAutoScale( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int)

isAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def isBackgroundColorNone (self, *args, **kwargs):
      '''
isBackgroundColorNone( (Table)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},enum AcDb::RowType)

isBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},int,int)'''
    ...
    def isBreakEnabled (self, *args, **kwargs):
      '''
isBreakEnabled( (Table)arg1) -> bool :

    C++ signature :
        bool isBreakEnabled(class PyDbTable {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isContentEditable (self, *args, **kwargs):
      '''
isContentEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isContentEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isEmpty(class PyDbTable {lvalue},int,int)'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isFormatEditable (self, *args, **kwargs):
      '''
isFormatEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isFormatEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isHeaderSuppressed (self, *args, **kwargs):
      '''
isHeaderSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTable {lvalue})'''
    ...
    def isLinked (self, *args, **kwargs):
      '''
isLinked( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isLinked(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs):
      '''
isMergeAllEnabled( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergedCell (self, *args, **kwargs):
      '''
isMergedCell( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple isMergedCell(class PyDbTable {lvalue},int,int)'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRegenerateTableSuppressed (self, *args, **kwargs):
      '''
isRegenerateTableSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isRegenerateTableSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTitleSuppressed (self, *args, **kwargs):
      '''
isTitleSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def margin (self, *args, **kwargs):
      '''
margin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4) -> float :

    C++ signature :
        double margin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin)'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mergeCells (self, *args, **kwargs):
      '''
mergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def minimumColumnWidth (self, *args, **kwargs):
      '''
minimumColumnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumColumnWidth(class PyDbTable {lvalue},int)'''
    ...
    def minimumRowHeight (self, *args, **kwargs):
      '''
minimumRowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumRowHeight(class PyDbTable {lvalue},int)'''
    ...
    def minimumTableHeight (self, *args, **kwargs):
      '''
minimumTableHeight( (Table)arg1) -> float :

    C++ signature :
        double minimumTableHeight(class PyDbTable {lvalue})'''
    ...
    def minimumTableWidth (self, *args, **kwargs):
      '''
minimumTableWidth( (Table)arg1) -> float :

    C++ signature :
        double minimumTableWidth(class PyDbTable {lvalue})'''
    ...
    def moveContent (self, *args, **kwargs):
      '''
moveContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveContent(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs):
      '''
nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs):
      '''
nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def numColumns (self, *args, **kwargs):
      '''
numColumns( (Table)arg1) -> int :

    C++ signature :
        unsigned int numColumns(class PyDbTable {lvalue})'''
    ...
    def numContents (self, *args, **kwargs):
      '''
numContents( (Table)arg1, (int)arg2, (int)arg3) -> int :

    C++ signature :
        int numContents(class PyDbTable {lvalue},int,int)'''
    ...
    def numRows (self, *args, **kwargs):
      '''
numRows( (Table)arg1) -> int :

    C++ signature :
        unsigned int numRows(class PyDbTable {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeTableBlock (self, *args, **kwargs):
      '''
recomputeTableBlock( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removeAllOverrides (self, *args, **kwargs):
      '''
removeAllOverrides( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def removeDataLink (self, *args, **kwargs):
      '''
removeDataLink( (Table)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeDataLink(class PyDbTable {lvalue})

removeDataLink( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (Table)arg1) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue})

rotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue},int,int,int)'''
    ...
    def rowHeight (self, *args, **kwargs):
      '''
rowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double rowHeight(class PyDbTable {lvalue},int)'''
    ...
    def rowType (self, *args, **kwargs):
      '''
rowType( (Table)arg1, (int)arg2) -> RowType :

    C++ signature :
        enum AcDb::RowType rowType(class PyDbTable {lvalue},int)'''
    ...
    def scale (self, *args, **kwargs):
      '''
scale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double scale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def scaleFactors (self, *args, **kwargs):
      '''
scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setAlignment (self, *args, **kwargs):
      '''
setAlignment( (Table)arg1, (CellAlignment)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTable {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (Table)arg1, (int)arg2, (int)arg3, (CellAlignment)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTable {lvalue},int,int,enum AcDb::CellAlignment)'''
    ...
    def setAutoScale (self, *args, **kwargs):
      '''
setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAutoScale(class PyDbTable {lvalue},int,int,bool)

setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAutoScale(class PyDbTable {lvalue},int,int,int,bool)'''
    ...
    def setBackgroundColor (self, *args, **kwargs):
      '''
setBackgroundColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs):
      '''
setBackgroundColorNone( (Table)arg1, (bool)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTable {lvalue},bool,enum AcDb::RowType)

setBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs):
      '''
setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (str)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockRotation (self, *args, **kwargs):
      '''
setBlockRotation( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockScale (self, *args, **kwargs):
      '''
setBlockScale( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockTableRecord (self, *args, **kwargs):
      '''
setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTableRecordId (self, *args, **kwargs):
      '''
setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecordId(class PyDbTable {lvalue},int,int,class PyDbObjectId,bool)

setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (bool)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecordId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,bool)'''
    ...
    def setBlockTransform (self, *args, **kwargs):
      '''
setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setBreakFlowDirection (self, *args, **kwargs):
      '''
setBreakFlowDirection( (Table)arg1, (TableBreakFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakFlowDirection(class PyDbTable {lvalue},enum AcDb::TableBreakFlowDirection)'''
    ...
    def setBreakHeight (self, *args, **kwargs):
      '''
setBreakHeight( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakHeight(class PyDbTable {lvalue},int,double)'''
    ...
    def setBreakOffset (self, *args, **kwargs):
      '''
setBreakOffset( (Table)arg1, (int)arg2, (Vector3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakOffset(class PyDbTable {lvalue},int,class AcGeVector3d)'''
    ...
    def setBreakOption (self, *args, **kwargs):
      '''
setBreakOption( (Table)arg1, (TableBreakOption)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakOption(class PyDbTable {lvalue},enum AcDb::TableBreakOption)'''
    ...
    def setBreakSpacing (self, *args, **kwargs):
      '''
setBreakSpacing( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakSpacing(class PyDbTable {lvalue},double)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCellState (self, *args, **kwargs):
      '''
setCellState( (Table)arg1, (int)arg2, (int)arg3, (CellState)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellState(class PyDbTable {lvalue},int,int,enum AcDb::CellState)'''
    ...
    def setCellStyle (self, *args, **kwargs):
      '''
setCellStyle( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellStyle(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCellType (self, *args, **kwargs):
      '''
setCellType( (Table)arg1, (int)arg2, (int)arg3, (CellType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellType(class PyDbTable {lvalue},int,int,enum AcDb::CellType)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnWidth (self, *args, **kwargs):
      '''
setColumnWidth( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbTable {lvalue},int,double)

setColumnWidth( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbTable {lvalue},double)'''
    ...
    def setContentColor (self, *args, **kwargs):
      '''
setContentColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},int,int,class AcCmColor)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},int,int,int,class AcCmColor)'''
    ...
    def setContentLayout (self, *args, **kwargs):
      '''
setContentLayout( (Table)arg1, (int)arg2, (int)arg3, (CellContentLayout)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentLayout(class PyDbTable {lvalue},int,int,enum AcDb::CellContentLayout)'''
    ...
    def setDataFormat (self, *args, **kwargs):
      '''
setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataFormat(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataLink (self, *args, **kwargs):
      '''
setDataLink( (Table)arg1, (CellRange)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataLink(class PyDbTable {lvalue},struct AcCellRange,class PyDbObjectId,bool)'''
    ...
    def setDataType (self, *args, **kwargs):
      '''
setDataType( (Table)arg1, (object)arg2, (object)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (object)arg4, (object)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},int,int,enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5, (object)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},int,int,int,enum AcValue::DataType,enum AcValue::UnitType)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDirection (self, *args, **kwargs):
      '''
setDirection( (Table)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDirection(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setFieldId (self, *args, **kwargs):
      '''
setFieldId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldId(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setFieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (object)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,enum AcDb::CellOption)'''
    ...
    def setFlowDirection (self, *args, **kwargs):
      '''
setFlowDirection( (Table)arg1, (TableFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbTable {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs):
      '''
setFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFormula (self, *args, **kwargs):
      '''
setFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormula(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs):
      '''
setGridColor( (Table)arg1, (Color)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},class AcCmColor,int,int)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,class AcCmColor)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class AcCmColor)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs):
      '''
setGridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,double)'''
    ...
    def setGridLineStyle (self, *args, **kwargs):
      '''
setGridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridLineStyle)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridLineStyle)'''
    ...
    def setGridLineWeight (self, *args, **kwargs):
      '''
setGridLineWeight( (Table)arg1, (LineWeight)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},enum AcDb::LineWeight,int,int)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (LineWeight)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::LineWeight)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (LineWeight)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::LineWeight)'''
    ...
    def setGridLinetype (self, *args, **kwargs):
      '''
setGridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (ObjectId)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class PyDbObjectId)'''
    ...
    def setGridProperty (self, *args, **kwargs):
      '''
setGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (object)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,struct AcGridProperty)

setGridProperty( (Table)arg1, (CellRange)arg2, (GridLineType)arg3, (object)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTable {lvalue},struct AcCellRange,enum AcDb::GridLineType,struct AcGridProperty)'''
    ...
    def setGridVisibility (self, *args, **kwargs):
      '''
setGridVisibility( (Table)arg1, (Visibility)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTable {lvalue},enum AcDb::Visibility,int,int)

setGridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Visibility)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::Visibility)'''
    ...
    def setGridVisibility3 (self, *args, **kwargs):
      '''
setGridVisibility3( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Visibility)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility3(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::Visibility)'''
    ...
    def setHeight (self, *args, **kwargs):
      '''
setHeight( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbTable {lvalue},double)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs):
      '''
setHorzCellMargin( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorzCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMargin (self, *args, **kwargs):
      '''
setMargin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMargin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin,double)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Table)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setOverride (self, *args, **kwargs):
      '''
setOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (CellProperty)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbTable {lvalue},int,int,int,enum AcDb::CellProperty)

setOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridProperty)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridProperty)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Table)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbTable {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRecomputeTableBlock (self, *args, **kwargs):
      '''
setRecomputeTableBlock( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def setRegen (self, *args, **kwargs):
      '''
setRegen( (Table)arg1) -> None :

    C++ signature :
        void setRegen(class PyDbTable {lvalue})'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTable {lvalue},double)

setRotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setRowHeight (self, *args, **kwargs):
      '''
setRowHeight( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowHeight(class PyDbTable {lvalue},int,double)

setRowHeight( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowHeight(class PyDbTable {lvalue},double)'''
    ...
    def setScale (self, *args, **kwargs):
      '''
setScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setScaleFactors (self, *args, **kwargs):
      '''
setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setSize (self, *args, **kwargs):
      '''
setSize( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSize(class PyDbTable {lvalue},int,int)'''
    ...
    def setSubSelection (self, *args, **kwargs):
      '''
setSubSelection( (Table)arg1, (CellRange)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSubSelection(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def setTableStyle (self, *args, **kwargs):
      '''
setTableStyle( (Table)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTableStyle(class PyDbTable {lvalue},class PyDbObjectId)'''
    ...
    def setTextHeight (self, *args, **kwargs):
      '''
setTextHeight( (Table)arg1, (float)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},double,enum AcDb::RowType)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},int,int,double)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setTextRotation (self, *args, **kwargs):
      '''
setTextRotation( (Table)arg1, (int)arg2, (int)arg3, (RotationAngle)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbTable {lvalue},int,int,enum AcDb::RotationAngle)'''
    ...
    def setTextString (self, *args, **kwargs):
      '''
setTextString( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setTextString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (Table)arg1, (ObjectId)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def setVertCellMargin (self, *args, **kwargs):
      '''
setVertCellMargin( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs):
      '''
setWidth( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbTable {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def suppressHeaderRow (self, *args, **kwargs):
      '''
suppressHeaderRow( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressHeaderRow(class PyDbTable {lvalue},bool)'''
    ...
    def suppressInvisibleGrid (self, *args, **kwargs):
      '''
suppressInvisibleGrid( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressInvisibleGrid(class PyDbTable {lvalue},bool)'''
    ...
    def suppressRegenerateTable (self, *args, **kwargs):
      '''
suppressRegenerateTable( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressRegenerateTable(class PyDbTable {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs):
      '''
suppressTitleRow( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressTitleRow(class PyDbTable {lvalue},bool)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def tableStyle (self, *args, **kwargs):
      '''
tableStyle( (Table)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tableStyle(class PyDbTable {lvalue})'''
    ...
    def tableStyleOverrides (self, *args, **kwargs):
      '''
tableStyleOverrides( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list tableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs):
      '''
textHeight( (Table)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},enum AcDb::RowType)

textHeight( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int)

textHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int,int)'''
    ...
    def textRotation (self, *args, **kwargs):
      '''
textRotation( (Table)arg1, (int)arg2, (int)arg3) -> RotationAngle :

    C++ signature :
        enum AcDb::RotationAngle textRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def textString (self, *args, **kwargs):
      '''
textString( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (object)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,enum AcValue::FormatOption)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int,enum AcValue::FormatOption)'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (Table)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},enum AcDb::RowType)

textStyle( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int)

textStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int,int)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs):
      '''
treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def unmergeCells (self, *args, **kwargs):
      '''
unmergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus unmergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def updateDataLink (self, *args, **kwargs):
      '''
updateDataLink( (Table)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbTable {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)

updateDataLink( (Table)arg1, (int)arg2, (int)arg3, (UpdateDirection)arg4, (UpdateOption)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbTable {lvalue},int,int,enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertCellMargin (self, *args, **kwargs):
      '''
vertCellMargin( (Table)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTable {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs):
      '''
width( (Table)arg1) -> float :

    C++ signature :
        double width(class PyDbTable {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class TableBreakFlowDirection:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakFlowDownOrUp (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakFlowLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableBreakOption:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakAllowManualHeights (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakAllowManualPositions (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakEnableBreaking (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakNone (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakRepeatBottomLabels (self, *args, **kwargs):
      '''None'''
    ...
    def kTableBreakRepeatTopLabels (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableFlowDirection:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kExactly (self, *args, **kwargs):
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableHitItem:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTableHitCell (self, *args, **kwargs):
      '''None'''
    ...
    def kTableHitColumnIndicator (self, *args, **kwargs):
      '''None'''
    ...
    def kTableHitGridLine (self, *args, **kwargs):
      '''None'''
    ...
    def kTableHitNone (self, *args, **kwargs):
      '''None'''
    ...
    def kTableHitRowIndicator (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableIteratorOption:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTableIteratorIterateColumns (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorIterateDataLinks (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorIterateRows (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorIterateSelection (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorReverseOrder (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorSkipMerged (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyContent (self, *args, **kwargs):
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyFormat (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableStyle:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def alignment (self, *args, **kwargs):
      '''
alignment( (TableStyle)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},enum AcDb::RowType)

alignment( (TableStyle)arg1, (str)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs):
      '''
backgroundColor( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},enum AcDb::RowType)

backgroundColor( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def bitFlags (self, *args, **kwargs):
      '''
bitFlags( (TableStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbTableStyle {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def cellClass (self, *args, **kwargs):
      '''
cellClass( (TableStyle)arg1, (str)arg2) -> int :

    C++ signature :
        int cellClass(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},enum AcDb::RowType)

color( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def copyCellStyle (self, *args, **kwargs):
      '''
copyCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createCellStyle (self, *args, **kwargs):
      '''
createCellStyle( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > createCellStyle(class PyDbTableStyle {lvalue})

createCellStyle( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

createCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def deleteCellStyle (self, *args, **kwargs):
      '''
deleteCellStyle( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs):
      '''
description( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbTableStyle {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def enableMergeAll (self, *args, **kwargs):
      '''
enableMergeAll( (TableStyle)arg1, (bool)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableMergeAll(class PyDbTableStyle {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def flowDirection (self, *args, **kwargs):
      '''
flowDirection( (TableStyle)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTableStyle {lvalue})'''
    ...
    def format (self, *args, **kwargs):
      '''
format( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue})

format( (TableStyle)arg1, (RowType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},enum AcDb::RowType)

format( (TableStyle)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getCellStyles (self, *args, **kwargs):
      '''
getCellStyles( (TableStyle)arg1) -> list :

    C++ signature :
        class boost::python::list getCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def getDataType (self, *args, **kwargs):
      '''
getDataType( (TableStyle)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},enum AcDb::RowType)

getDataType( (TableStyle)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getGridProperty (self, *args, **kwargs):
      '''
getGridProperty( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbTableStyle {lvalue})'''
    ...
    def getTemplate (self, *args, **kwargs):
      '''
getTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs):
      '''
gridColor( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs):
      '''
gridDoubleLineSpacing( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineStyle (self, *args, **kwargs):
      '''
gridLineStyle( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineWeight (self, *args, **kwargs):
      '''
gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLinetype (self, *args, **kwargs):
      '''
gridLinetype( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridVisibility (self, *args, **kwargs):
      '''
gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def horzCellMargin (self, *args, **kwargs):
      '''
horzCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isBackgroundColorNone (self, *args, **kwargs):
      '''
isBackgroundColorNone( (TableStyle)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTableStyle {lvalue},enum AcDb::RowType)'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isCellStyleInUse (self, *args, **kwargs):
      '''
isCellStyleInUse( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isCellStyleInUse(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isHeaderSuppressed (self, *args, **kwargs):
      '''
isHeaderSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs):
      '''
isMergeAllEnabled( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTitleSuppressed (self, *args, **kwargs):
      '''
isTitleSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def margin (self, *args, **kwargs):
      '''
margin( (TableStyle)arg1, (CellMargin)arg2, (str)arg3) -> float :

    C++ signature :
        double margin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def numCellStyles (self, *args, **kwargs):
      '''
numCellStyles( (TableStyle)arg1) -> int :

    C++ signature :
        int numCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def postTableStyleToDb (self, *args, **kwargs):
      '''
postTableStyleToDb( (TableStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postTableStyleToDb(class PyDbTableStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def removeTemplate (self, *args, **kwargs):
      '''
removeTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId removeTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def renameCellStyle (self, *args, **kwargs):
      '''
renameCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus renameCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double rotation(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlignment (self, *args, **kwargs):
      '''
setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColor (self, *args, **kwargs):
      '''
setBackgroundColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs):
      '''
setBackgroundColorNone( (TableStyle)arg1, (bool)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTableStyle {lvalue},bool,enum AcDb::RowType)'''
    ...
    def setBitFlags (self, *args, **kwargs):
      '''
setBitFlags( (TableStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBitFlags(class PyDbTableStyle {lvalue},unsigned int)'''
    ...
    def setCellClass (self, *args, **kwargs):
      '''
setCellClass( (TableStyle)arg1, (int)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellClass(class PyDbTableStyle {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataType (self, *args, **kwargs):
      '''
setDataType( (TableStyle)arg1, (object)arg2, (object)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDescription (self, *args, **kwargs):
      '''
setDescription( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFlowDirection (self, *args, **kwargs):
      '''
setFlowDirection( (TableStyle)arg1, (TableFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbTableStyle {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs):
      '''
setFormat( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setFormat( (TableStyle)arg1, (str)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDb::RowType)

setFormat( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs):
      '''
setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,enum AcDb::RowType)

setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs):
      '''
setGridDoubleLineSpacing( (TableStyle)arg1, (float)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridDoubleLineSpacing(class PyDbTableStyle {lvalue},double,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineStyle (self, *args, **kwargs):
      '''
setGridLineStyle( (TableStyle)arg1, (GridLineStyle)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineStyle,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineWeight (self, *args, **kwargs):
      '''
setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,enum AcDb::RowType)

setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLinetype (self, *args, **kwargs):
      '''
setGridLinetype( (TableStyle)arg1, (ObjectId)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLinetype(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridProperty (self, *args, **kwargs):
      '''
setGridProperty( (TableStyle)arg1, (object)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTableStyle {lvalue},struct AcGridProperty,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridVisibility (self, *args, **kwargs):
      '''
setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,enum AcDb::RowType)

setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs):
      '''
setHorzCellMargin( (TableStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorzCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setMargin (self, *args, **kwargs):
      '''
setMargin( (TableStyle)arg1, (CellMargin)arg2, (float)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMargin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (TableStyle)arg1, (float)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTemplate (self, *args, **kwargs):
      '''
setTemplate( (TableStyle)arg1, (ObjectId)arg2, (MergeCellStyleOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTemplate(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::MergeCellStyleOption)'''
    ...
    def setTextHeight (self, *args, **kwargs):
      '''
setTextHeight( (TableStyle)arg1, (float)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTableStyle {lvalue},double,enum AcDb::RowType)

setTextHeight( (TableStyle)arg1, (float)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVertCellMargin (self, *args, **kwargs):
      '''
setVertCellMargin( (TableStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def suppressHeaderRow (self, *args, **kwargs):
      '''
suppressHeaderRow( (TableStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressHeaderRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs):
      '''
suppressTitleRow( (TableStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressTitleRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textHeight (self, *args, **kwargs):
      '''
textHeight( (TableStyle)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textHeight( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (TableStyle)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textStyle( (TableStyle)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def vertCellMargin (self, *args, **kwargs):
      '''
vertCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Text:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (ObjectId)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},double,double)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def adjustAlignment (self, *args, **kwargs):
      '''
adjustAlignment( (Text)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs):
      '''
alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs):
      '''
convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs):
      '''
correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs):
      '''
getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def height (self, *args, **kwargs):
      '''
height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs):
      '''
hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs):
      '''
horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs):
      '''
isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs):
      '''
isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs):
      '''
isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs):
      '''
mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs):
      '''
mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs):
      '''
normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def oblique (self, *args, **kwargs):
      '''
oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def rotation (self, *args, **kwargs):
      '''
rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs):
      '''
setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setHeight (self, *args, **kwargs):
      '''
setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs):
      '''
setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs):
      '''
setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs):
      '''
setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs):
      '''
setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTextString (self, *args, **kwargs):
      '''
setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > {lvalue})'''
    ...
    def setTextStyle (self, *args, **kwargs):
      '''
setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs):
      '''
setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs):
      '''
setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs):
      '''
setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textString (self, *args, **kwargs):
      '''
textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs):
      '''
textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs):
      '''
thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def verticalMode (self, *args, **kwargs):
      '''
verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs):
      '''
widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class TextAlignment:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTextAlignmentAligned (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentBottomCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentBottomLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentBottomRight (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentFit (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentMiddle (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentMiddleCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentMiddleLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentMiddleRight (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentRight (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentTopCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentTopLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTextAlignmentTopRight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextHorzMode:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kTextAlign (self, *args, **kwargs):
      '''None'''
    ...
    def kTextCenter (self, *args, **kwargs):
      '''None'''
    ...
    def kTextFit (self, *args, **kwargs):
      '''None'''
    ...
    def kTextLeft (self, *args, **kwargs):
      '''None'''
    ...
    def kTextMid (self, *args, **kwargs):
      '''None'''
    ...
    def kTextRight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextStyleTableRecord:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def bigFontFileName (self, *args, **kwargs):
      '''
bigFontFileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > bigFontFileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def fileName (self, *args, **kwargs):
      '''
fileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def flagBits (self, *args, **kwargs):
      '''
flagBits( (TextStyleTableRecord)arg1) -> int :

    C++ signature :
        unsigned char flagBits(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def font (self, *args, **kwargs):
      '''
font( (TextStyleTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple font(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs):
      '''
isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isRenamable (self, *args, **kwargs):
      '''
isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs):
      '''
isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isShapeFile (self, *args, **kwargs):
      '''
isShapeFile( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isShapeFile(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isVertical (self, *args, **kwargs):
      '''
isVertical( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isVertical(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def obliquingAngle (self, *args, **kwargs):
      '''
obliquingAngle( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double obliquingAngle(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def priorSize (self, *args, **kwargs):
      '''
priorSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double priorSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setBigFontFileName (self, *args, **kwargs):
      '''
setBigFontFileName( (TextStyleTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBigFontFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFileName (self, *args, **kwargs):
      '''
setFileName( (TextStyleTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFlagBits (self, *args, **kwargs):
      '''
setFlagBits( (TextStyleTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlagBits(class PyDbTextStyleTableRecord {lvalue},unsigned char)'''
    ...
    def setFont (self, *args, **kwargs):
      '''
setFont( (TextStyleTableRecord)arg1, (str)arg2, (bool)arg3, (bool)arg4, (int)arg5, (int)arg6, (int)arg7, (bool)arg8) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFont(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,int,int,int,bool)'''
    ...
    def setIsShapeFile (self, *args, **kwargs):
      '''
setIsShapeFile( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsShapeFile(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setIsVertical (self, *args, **kwargs):
      '''
setIsVertical( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsVertical(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setObliquingAngle (self, *args, **kwargs):
      '''
setObliquingAngle( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObliquingAngle(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPriorSize (self, *args, **kwargs):
      '''
setPriorSize( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPriorSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setTextSize (self, *args, **kwargs):
      '''
setTextSize( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def setXScale (self, *args, **kwargs):
      '''
setXScale( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXScale(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def textSize (self, *args, **kwargs):
      '''
textSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double textSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...
    def xScale (self, *args, **kwargs):
      '''
xScale( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double xScale(class PyDbTextStyleTableRecord {lvalue})'''
    ...

class Transparency:
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def alpha (self, *args, **kwargs):
      '''
alpha( (Transparency)arg1) -> int :

    C++ signature :
        unsigned char alpha(class AcCmTransparency {lvalue})'''
    ...
    def alphaPercent (self, *args, **kwargs):
      '''
alphaPercent( (Transparency)arg1) -> float :

    C++ signature :
        double alphaPercent(class AcCmTransparency {lvalue})'''
    ...
    def isByAlpha (self, *args, **kwargs):
      '''
isByAlpha( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByAlpha(class AcCmTransparency {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs):
      '''
isByBlock( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmTransparency {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs):
      '''
isByLayer( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmTransparency {lvalue})'''
    ...
    def isClear (self, *args, **kwargs):
      '''
isClear( (Transparency)arg1) -> bool :

    C++ signature :
        bool isClear(class AcCmTransparency {lvalue})'''
    ...
    def isInvalid (self, *args, **kwargs):
      '''
isInvalid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isInvalid(class AcCmTransparency {lvalue})'''
    ...
    def isSolid (self, *args, **kwargs):
      '''
isSolid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isSolid(class AcCmTransparency {lvalue})'''
    ...
    def setAlpha (self, *args, **kwargs):
      '''
setAlpha( (Transparency)arg1, (int)arg2) -> None :

    C++ signature :
        void setAlpha(class AcCmTransparency {lvalue},unsigned char)'''
    ...
    def setAlphaPercent (self, *args, **kwargs):
      '''
setAlphaPercent( (Transparency)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlphaPercent(class AcCmTransparency {lvalue},double)'''
    ...

class TransparencyMethod:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kByAlpha (self, *args, **kwargs):
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs):
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs):
      '''None'''
    ...
    def kErrorValue (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UnitsValue:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kUnitsAngstroms (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsAstronomical (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsCentimeters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsDecimeters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsDekameters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsFeet (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsGigameters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsHectometers (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsInches (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsKilometers (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsLightYears (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMax (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMeters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMicroinches (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMicrons (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMiles (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMillimeters (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsMils (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsNanometers (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsParsecs (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsUSSurveyFeet (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsUSSurveyInch (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsUSSurveyMile (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsUSSurveyYard (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsUndefined (self, *args, **kwargs):
      '''None'''
    ...
    def kUnitsYards (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateDirection:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kUpdateDirDataToSource (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateDirSourceToData (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateOption:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kSkipFormatAfterFirstUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionAllowSourceUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionForPreview (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionForceFullSourceUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionIncludeXrefs (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionNone (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionOverwriteContentModifiedAfterUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionOverwriteFormatModifiedAfterUpdate (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionSkipFormat (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionUpdateColumnWidth (self, *args, **kwargs):
      '''None'''
    ...
    def kUpdateOptionUpdateRowHeight (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Vertex:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Vertex2d:
    def __eq__ (self, *args, **kwargs):
      '''
__eq__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __eq__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def __init__ (self, *args, **kwargs):
      '''
__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (int)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double,double,int)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def __ne__ (self, *args, **kwargs):
      '''
__ne__( (RxObject)arg1, (RxObject)arg2) -> bool :

    C++ signature :
        bool __ne__(class PyRxObject {lvalue},class PyRxObject)'''
    ...
    def addPersistentReactor (self, *args, **kwargs):
      '''
addPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def assertNotifyEnabled (self, *args, **kwargs):
      '''
assertNotifyEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def assertReadEnabled (self, *args, **kwargs):
      '''
assertReadEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertReadEnabled(class PyDbObject {lvalue})'''
    ...
    def assertWriteEnabled (self, *args, **kwargs):
      '''
assertWriteEnabled( (DbObject)arg1) -> None :

    C++ signature :
        void assertWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def blockId (self, *args, **kwargs):
      '''
blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def bulge (self, *args, **kwargs):
      '''
bulge( (Vertex2d)arg1) -> float :

    C++ signature :
        double bulge(class PyDb2dVertex {lvalue})'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cancel(class PyDbObject {lvalue})'''
    ...
    def castShadows (self, *args, **kwargs):
      '''
castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs):
      '''
className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, *args, **kwargs):
      '''
close( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus close(class PyDbObject {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs):
      '''
collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs):
      '''
color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs):
      '''
colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self, *args, **kwargs):
      '''
createExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def database (self, *args, **kwargs):
      '''
database( (DbObject)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObject {lvalue})'''
    ...
    def desc (self, *args, **kwargs):
      '''
desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, *args, **kwargs):
      '''
disableUndoRecording( (DbObject)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbObject {lvalue},bool)'''
    ...
    def downgradeOpen (self, *args, **kwargs):
      '''
downgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeOpen(class PyDbObject {lvalue})'''
    ...
    def downgradeToNotify (self, *args, **kwargs):
      '''
downgradeToNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus downgradeToNotify(class PyDbObject {lvalue},bool)'''
    ...
    def draw (self, *args, **kwargs):
      '''
draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endWidth (self, *args, **kwargs):
      '''
endWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double endWidth(class PyDb2dVertex {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs):
      '''
entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self, *args, **kwargs):
      '''
erase( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus erase(class PyDbObject {lvalue})'''
    ...
    def extensionDictionary (self, *args, **kwargs):
      '''
extensionDictionary( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId extensionDictionary(class PyDbObject {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs):
      '''
getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs):
      '''
getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs):
      '''
getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs):
      '''
getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs):
      '''
getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self, *args, **kwargs):
      '''
handOverTo( (DbObject)arg1, (DbObject)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus handOverTo(class PyDbObject {lvalue},class PyDbObject {lvalue},bool,bool)'''
    ...
    def hasPersistentReactor (self, *args, **kwargs):
      '''
hasPersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasPersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def ignoreTangent (self, *args, **kwargs):
      '''
ignoreTangent( (Vertex2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus ignoreTangent(class PyDb2dVertex {lvalue})'''
    ...
    def isA (self, *args, **kwargs):
      '''
isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self, *args, **kwargs):
      '''
isAProxy( (DbObject)arg1) -> bool :

    C++ signature :
        bool isAProxy(class PyDbObject {lvalue})'''
    ...
    def isCancelling (self, *args, **kwargs):
      '''
isCancelling( (DbObject)arg1) -> bool :

    C++ signature :
        bool isCancelling(class PyDbObject {lvalue})'''
    ...
    def isEraseStatusToggled (self, *args, **kwargs):
      '''
isEraseStatusToggled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isEraseStatusToggled(class PyDbObject {lvalue})'''
    ...
    def isErased (self, *args, **kwargs):
      '''
isErased( (DbObject)arg1) -> bool :

    C++ signature :
        bool isErased(class PyDbObject {lvalue})'''
    ...
    def isModified (self, *args, **kwargs):
      '''
isModified( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModified(class PyDbObject {lvalue})'''
    ...
    def isModifiedGraphics (self, *args, **kwargs):
      '''
isModifiedGraphics( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedGraphics(class PyDbObject {lvalue})'''
    ...
    def isModifiedXData (self, *args, **kwargs):
      '''
isModifiedXData( (DbObject)arg1) -> bool :

    C++ signature :
        bool isModifiedXData(class PyDbObject {lvalue})'''
    ...
    def isNewObject (self, *args, **kwargs):
      '''
isNewObject( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNewObject(class PyDbObject {lvalue})'''
    ...
    def isNotifyEnabled (self, *args, **kwargs):
      '''
isNotifyEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifyEnabled(class PyDbObject {lvalue})'''
    ...
    def isNotifying (self, *args, **kwargs):
      '''
isNotifying( (DbObject)arg1) -> bool :

    C++ signature :
        bool isNotifying(class PyDbObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs):
      '''
isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs):
      '''
isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self, *args, **kwargs):
      '''
isReadEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReadEnabled(class PyDbObject {lvalue})'''
    ...
    def isReallyClosing (self, *args, **kwargs):
      '''
isReallyClosing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isReallyClosing(class PyDbObject {lvalue})'''
    ...
    def isTangentUsed (self, *args, **kwargs):
      '''
isTangentUsed( (Vertex2d)arg1) -> bool :

    C++ signature :
        bool isTangentUsed(class PyDb2dVertex {lvalue})'''
    ...
    def isTransactionResident (self, *args, **kwargs):
      '''
isTransactionResident( (DbObject)arg1) -> bool :

    C++ signature :
        bool isTransactionResident(class PyDbObject {lvalue})'''
    ...
    def isUndoRecordingDisabled (self, *args, **kwargs):
      '''
isUndoRecordingDisabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoRecordingDisabled(class PyDbObject {lvalue})'''
    ...
    def isUndoing (self, *args, **kwargs):
      '''
isUndoing( (DbObject)arg1) -> bool :

    C++ signature :
        bool isUndoing(class PyDbObject {lvalue})'''
    ...
    def isWriteEnabled (self, *args, **kwargs):
      '''
isWriteEnabled( (DbObject)arg1) -> bool :

    C++ signature :
        bool isWriteEnabled(class PyDbObject {lvalue})'''
    ...
    def layer (self, *args, **kwargs):
      '''
layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs):
      '''
layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs):
      '''
lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs):
      '''
linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs):
      '''
linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs):
      '''
linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs):
      '''
list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs):
      '''
material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs):
      '''
materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self, *args, **kwargs):
      '''
objectId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId objectId(class PyDbObject {lvalue})'''
    ...
    def ownerId (self, *args, **kwargs):
      '''
ownerId( (DbObject)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ownerId(class PyDbObject {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs):
      '''
plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs):
      '''
position( (Vertex2d)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb2dVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs):
      '''
receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs):
      '''
recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def releaseExtensionDictionary (self, *args, **kwargs):
      '''
releaseExtensionDictionary( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus releaseExtensionDictionary(class PyDbObject {lvalue})'''
    ...
    def removePersistentReactor (self, *args, **kwargs):
      '''
removePersistentReactor( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePersistentReactor(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setBulge (self, *args, **kwargs):
      '''
setBulge( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBulge(class PyDb2dVertex {lvalue},double)'''
    ...
    def setCastShadows (self, *args, **kwargs):
      '''
setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs):
      '''
setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs):
      '''
setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndWidth (self, *args, **kwargs):
      '''
setEndWidth( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs):
      '''
setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs):
      '''
setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs):
      '''
setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs):
      '''
setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs):
      '''
setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self, *args, **kwargs):
      '''
setOwnerId( (DbObject)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOwnerId(class PyDbObject {lvalue},class PyDbObjectId)'''
    ...
    def setPlotStyleName (self, *args, **kwargs):
      '''
setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs):
      '''
setPosition( (Vertex2d)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDb2dVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs):
      '''
setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs):
      '''
setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartWidth (self, *args, **kwargs):
      '''
setStartWidth( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangent (self, *args, **kwargs):
      '''
setTangent( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTangent(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangentUsed (self, *args, **kwargs):
      '''
setTangentUsed( (Vertex2d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTangentUsed(class PyDb2dVertex {lvalue},bool)'''
    ...
    def setVertexIdentifier (self, *args, **kwargs):
      '''
setVertexIdentifier( (Vertex2d)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexIdentifier(class PyDb2dVertex {lvalue},int)'''
    ...
    def setVisibility (self, *args, **kwargs):
      '''
setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self, *args, **kwargs):
      '''
setXData( (DbObject)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXData(class PyDbObject {lvalue},class boost::python::list)'''
    ...
    def startWidth (self, *args, **kwargs):
      '''
startWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double startWidth(class PyDb2dVertex {lvalue})'''
    ...
    def swapIdWith (self, *args, **kwargs):
      '''
swapIdWith( (DbObject)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus swapIdWith(class PyDbObject {lvalue},class PyDbObjectId {lvalue},bool,bool)'''
    ...
    def tangent (self, *args, **kwargs):
      '''
tangent( (Vertex2d)arg1) -> float :

    C++ signature :
        double tangent(class PyDb2dVertex {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs):
      '''
transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, *args, **kwargs):
      '''
upgradeFromNotify( (DbObject)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeFromNotify(class PyDbObject {lvalue},bool {lvalue})'''
    ...
    def upgradeOpen (self, *args, **kwargs):
      '''
upgradeOpen( (DbObject)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus upgradeOpen(class PyDbObject {lvalue})'''
    ...
    def useTangent (self, *args, **kwargs):
      '''
useTangent( (Vertex2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useTangent(class PyDb2dVertex {lvalue})'''
    ...
    def vertexIdentifier (self, *args, **kwargs):
      '''
vertexIdentifier( (Vertex2d)arg1) -> int :

    C++ signature :
        int vertexIdentifier(class PyDb2dVertex {lvalue})'''
    ...
    def vertexType (self, *args, **kwargs):
      '''
vertexType( (Vertex2d)arg1) -> Vertex2dType :

    C++ signature :
        enum AcDb::Vertex2dType vertexType(class PyDb2dVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs):
      '''
visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self, *args, **kwargs):
      '''
xData( (DbObject)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list xData(class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def xDataTransformBy (self, *args, **kwargs):
      '''
xDataTransformBy( (DbObject)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus xDataTransformBy(class PyDbObject {lvalue},class AcGeMatrix3d)'''
    ...

class Vertex2dType:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def k2dCurveFitVertex (self, *args, **kwargs):
      '''None'''
    ...
    def k2dSplineCtlVertex (self, *args, **kwargs):
      '''None'''
    ...
    def k2dSplineFitVertex (self, *args, **kwargs):
      '''None'''
    ...
    def k2dVertex (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Visibility:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kInvisible (self, *args, **kwargs):
      '''None'''
    ...
    def kVisible (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class XrefStatus:
    def __add__ (self, value, /):
      '''Return self+value.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __mul__ (self, value, /):
      '''Return self*value.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def __sub__ (self, value, /):
      '''Return self-value.'''
    ...
    def __truediv__ (self, value, /):
      '''Return self/value.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def kXrfFileNotFound (self, *args, **kwargs):
      '''None'''
    ...
    def kXrfNotAnXref (self, *args, **kwargs):
      '''None'''
    ...
    def kXrfResolved (self, *args, **kwargs):
      '''None'''
    ...
    def kXrfUnloaded (self, *args, **kwargs):
      '''None'''
    ...
    def kXrfUnreferenced (self, *args, **kwargs):
      '''None'''
    ...
    def kXrfUnresolved (self, *args, **kwargs):
      '''None'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class __loader__:
    def _ORIGIN (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def __eq__ (self, value, /):
      '''Return self==value.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def __ne__ (self, value, /):
      '''Return self!=value.'''
    ...
    def create_module (spec):
      '''Create a built-in module'''
    ...
    def exec_module (module):
      '''Exec a built-in module'''
    ...
    def find_module (fullname, path=None):
      '''Find the built-in module.

        If 'path' is ever specified then the search is considered a failure.

        This method is deprecated.  Use find_spec() instead.

        '''
    ...
    def find_spec (fullname, path=None, target=None):
      '''None'''
    ...
    def get_code (fullname):
      '''Return None as built-in modules do not have code objects.'''
    ...
    def get_source (fullname):
      '''Return None as built-in modules do not have source code.'''
    ...
    def is_package (fullname):
      '''Return False as built-in modules are never packages.'''
    ...
    def load_module (fullname):
      '''Load the specified module into sys.modules and return it.

    This method is deprecated.  Use loader.exec_module() instead.

    '''
    ...
    def module_repr (module):
      '''Return repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        '''
    ...
