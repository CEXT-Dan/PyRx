#pragma once
#include "PyDbEntity.h"

class PyDbObjectId;
class PyDbXrefObjectId;
class PyDbAnnotationScale;

void makePyDbViewportWrapper();

class PyDbViewport : public PyDbEntity
{
public:
    PyDbViewport();
    PyDbViewport(AcDbViewport* ptr, bool autoDelete);
    PyDbViewport(const PyDbObjectId& id);
    PyDbViewport(const PyDbObjectId& id, AcDb::OpenMode mode);
    PyDbViewport(const PyDbObjectId& id, AcDb::OpenMode mode,bool erased);
    virtual ~PyDbViewport() override = default;
    void                setModelView(const PyDbXrefObjectId& xrefObjId);
    PyDbXrefObjectId    getModelView() const;
    void                removeModelView(void);
    void                setSheetView(PyDbObjectId objId);
    PyDbObjectId        getSheetView()const;
    void                removeSheetView(void);
    void                setLabelBlock(PyDbObjectId& objId);
    PyDbObjectId        getLabelBlock() const;
    void                removeLabelBlock(void);
    void                syncModelView(void);
    double              height() const;
    void                setHeight(double val);
    double              width() const;
    void                setWidth(double val);
    AcGePoint3d         centerPoint() const;
    void                setCenterPoint(const AcGePoint3d& val);
    Adesk::Int16        number() const;
    bool                isOn() const;
    void                setOn();
    void                setOff();
    void                setIsOn(bool bOn);
    AcGePoint3d         viewTarget() const;
    void                setViewTarget(const AcGePoint3d& val);
    AcGeVector3d        viewDirection() const;
    void                setViewDirection1(const AcGeVector3d& val);
    double              viewHeight() const;
    void                setViewHeight(double ht);
    AcGePoint2d         viewCenter() const;
    void                setViewCenter(const AcGePoint2d& pt);
    double              twistAngle() const;
    void                setTwistAngle(double val);
    double              lensLength() const;
    void                setLensLength(double val);
    bool                isFrontClipOn() const;
    void                setFrontClipOn1();
    void                setFrontClipOff();
    void                setFrontClipOn2(bool bOn);
    bool                isBackClipOn() const;
    void                setBackClipOn1();
    void                setBackClipOff();
    void                setBackClipOn2(bool bOn);
    bool                isFrontClipAtEyeOn() const;
    void                setFrontClipAtEyeOn1();
    void                setFrontClipAtEyeOff();
    void                setFrontClipAtEyeOn2(bool bOn);
    double              frontClipDistance() const;
    void                setFrontClipDistance(double newVal);
    double              backClipDistance() const;
    void                setBackClipDistance(double newVal);
    bool                isPerspectiveOn() const;
    void                setPerspectiveOn1();
    void                setPerspectiveOff();
    void                setPerspectiveOn2(bool bOn);
    bool                isUcsFollowModeOn() const;
    void                setUcsFollowModeOn1();
    void                setUcsFollowModeOff();
    void                setUcsFollowModeOn2(bool bOn);
    bool                isUcsIconVisible() const;
    void                setUcsIconVisible1();
    void                setUcsIconInvisible();
    void                setUcsIconVisible2(bool bOn);
    bool                isUcsIconAtOrigin() const;
    void                setUcsIconAtOrigin1();
    void                setUcsIconAtCorner();
    void                setUcsIconAtOrigin2(bool);
    bool                isFastZoomOn() const;
    void                setFastZoomOn1();
    void                setFastZoomOff();
    void                setFastZoomOn2(bool bOn);
    Adesk::UInt16       circleSides() const;
    void                setCircleSides(Adesk::UInt16 val);
    bool                isSnapOn() const;
    void                setSnapOn1();
    void                setSnapOff();
    void                setSnapOn2(bool bOn);
    bool                isSnapIsometric() const;
    void                setSnapIsometric1();
    void                setSnapStandard();
    void                setSnapIsometric2(bool bOn);
    double              snapAngle() const;
    void                setSnapAngle(double val);
    AcGePoint2d         snapBasePoint() const;
    void                setSnapBasePoint(const AcGePoint2d& val);
    AcGeVector2d        snapIncrement() const;
    void                setSnapIncrement(const AcGeVector2d& val);
    Adesk::UInt16       snapIsoPair() const;
    void                setSnapIsoPair(Adesk::UInt16 val);
    bool                isGridOn() const;
    void                setGridOn1();
    void                setGridOff();
    void                setGridOn2(bool val);
    bool                isGridBoundToLimits() const;
    void                setGridBoundToLimits(bool bNewVal);
    bool                isGridAdaptive() const;
    void                setGridAdaptive(bool bNewVal);
    bool                isGridSubdivisionRestricted() const;
    void                setGridSubdivisionRestricted(bool bNewVal);
    bool                isGridFollow() const;
    void                 setGridFollow(bool bNewVal);
    Adesk::UInt16       gridMajor() const;
    void                setGridMajor(Adesk::UInt16 val);
    AcGeVector2d        gridIncrement() const;
    void                setGridIncrement(const AcGeVector2d& val);
    bool                hiddenLinesRemoved() const;
    void                showHiddenLines();
    void                removeHiddenLines1();
    void                removeHiddenLines2(bool val);
    void                freezeLayersInViewport(const boost::python::list& ids);
    void                thawLayersInViewport(const boost::python::list& pyids);
    void                thawAllLayersInViewport();
    bool                isLayerFrozenInViewport(const PyDbObjectId& layerId) const;
    boost::python::list getFrozenLayerList() const;
    void                updateDisplay() const;
    PyDbObjectId        background() const;
    void                setBackground(PyDbObjectId& backgroundId);
    PyDbObjectId        previousBackground1() const;
    PyDbObjectId        previousBackground2(AcGiDrawable::DrawableType type) const;
    void                setPreviousBackground1(PyDbObjectId& backgroundId);
    void                setPreviousBackground2(PyDbObjectId& backgroundId, AcGiDrawable::DrawableType type);
    void                setPreviousBackground3(PyDbObjectId& backgroundId, AcGiDrawable::DrawableType type, bool force);
    bool                previousBackgroundForcedSwitch(void) const;
    PyDbObjectId        visualStyle() const;
    void                setVisualStyle(const PyDbObjectId& oidVisualStyle);
    bool                isDefaultLightingOn() const;
    void                setDefaultLightingOn(bool on);
    AcGiViewportTraits::DefaultLightingType defaultLightingType() const;
    void                setDefaultLightingType(AcGiViewportTraits::DefaultLightingType typ);
    double              brightness() const;
    void                setBrightness(double val);
    double              contrast() const;
    void                setContrast(double val);
    AcCmColor           ambientLightColor() const;
    void                setAmbientLightColor(const AcCmColor& clr);
    PyDbObjectId        sunId() const;
    void                setSun1(PyDbObjectId& retId, PyDbObject& pSun);
    void                setSun2(PyDbObjectId& retId, PyDbObject& pSun, bool eraseOldSun);
    bool                isLocked() const;
    void                setLocked1();
    void                setUnlocked();
    void                setLocked2(bool val);
    PyDbAnnotationScale annotationScale() const;
    void                setAnnotationScale(const PyDbAnnotationScale& pScaleObj);
    bool                isTransparent() const;
    void                setTransparent1();
    void                setOpaque();
    void                setTransparent2(bool val);
    double              customScale() const;
    void                setCustomScale(double val);
    AcDbViewport::StandardScaleType standardScale() const;
    void                setStandardScale(const AcDbViewport::StandardScaleType val);
    std::string         plotStyleSheet() const;
    std::string         effectivePlotStyleSheet();
    void                setPlotStyleSheet(const std::string& val);
    bool                isNonRectClipOn() const;
    void                setNonRectClipOn1();
    void                setNonRectClipOff();
    void                setNonRectClipOn2(bool bOn);
    PyDbObjectId        nonRectClipEntityId() const;
    void                setNonRectClipEntityId(const PyDbObjectId& val);
    void                erased(const PyDbObject& obj, Adesk::Boolean val);
    void                modified(const PyDbObject& obj);
    void                copied(const PyDbObject& pDbObj, const PyDbObject& pNewObj);
    void                subObjModified(const PyDbObject& pDbObj, const PyDbObject& pSubObj);
    boost::python::tuple getUcs() const;
    boost::python::tuple isUcsOrthographic() const;
    PyDbObjectId        ucsName() const;
    double              elevation() const;
    void                setUcs1(const AcGePoint3d& origin,const AcGeVector3d& xAxis, const AcGeVector3d& yAxis);
    void                setUcs2(AcDb::OrthographicView view);
    void                setUcs3(const PyDbObjectId& ucsId);
    void                setUcsToWorld();
    void                setElevation(double elev);
    boost::python::tuple isViewOrthographic() const;
    void                setViewDirection2(AcDb::OrthographicView view);
    bool                isUcsSavedWithViewport() const;
    void                setUcsPerViewport(bool ucsvp);
    AcDbViewport::ShadePlotType shadePlot() const;
    void                setShadePlot1(const AcDbViewport::ShadePlotType);
    PyDbObjectId        shadePlotId() const;
    void                setShadePlot2(const AcDbViewport::ShadePlotType type,const PyDbObjectId shadePlotId);
    bool                plotWireframe() const;
    bool                plotAsRaster()  const;
    //void toneOperatorParameters(AcGiToneOperatorParameters& params) const;
    //void setToneOperatorParameters(const AcGiToneOperatorParameters& params);
    static std::string      className();
    static PyRxClass        desc();
    static PyDbViewport     cloneFrom(const PyRxObject& src);
    static PyDbViewport     cast(const PyRxObject& src);
public:
    AcDbViewport* impObj(const std::source_location& src = std::source_location::current()) const;
};

