#pragma once
#include "PyDbEntity.h"

class PyDbObjectId;
class PyDbXrefObjectId;
class PyDbAnnotationScale;

void makePyDbViewportWrapper();

class PyDbViewport : public PyDbEntity
{
public:
    PyDbViewport();
    PyDbViewport(AcDbViewport* ptr, bool autoDelete);
    PyDbViewport(const PyDbObjectId& id);
    PyDbViewport(const PyDbObjectId& id, AcDb::OpenMode mode);
    virtual ~PyDbViewport() override = default;
    Acad::ErrorStatus   setModelView(const PyDbXrefObjectId& xrefObjId);
    PyDbXrefObjectId    getModelView() const;
    Acad::ErrorStatus   removeModelView(void);
    Acad::ErrorStatus   setSheetView(PyDbObjectId objId);
    PyDbObjectId        getSheetView()const;
    Acad::ErrorStatus   removeSheetView(void);
    Acad::ErrorStatus   setLabelBlock(PyDbObjectId& objId);
    PyDbObjectId        getLabelBlock() const;
    Acad::ErrorStatus   removeLabelBlock(void);
    Acad::ErrorStatus   syncModelView(void);
    double              height() const;
    Acad::ErrorStatus   setHeight(double val);
    double              width() const;
    Acad::ErrorStatus   setWidth(double val);
    AcGePoint3d         centerPoint() const;
    Acad::ErrorStatus   setCenterPoint(const AcGePoint3d& val);
    Adesk::Int16        number() const;
    bool                isOn() const;
    Acad::ErrorStatus   setOn();
    Acad::ErrorStatus   setOff();
    Acad::ErrorStatus   setIsOn(bool bOn);
    AcGePoint3d         viewTarget() const;
    Acad::ErrorStatus   setViewTarget(const AcGePoint3d& val);
    AcGeVector3d        viewDirection() const;
    Acad::ErrorStatus   setViewDirection1(const AcGeVector3d& val);
    double              viewHeight() const;
    Acad::ErrorStatus   setViewHeight(double ht);
    AcGePoint2d         viewCenter() const;
    Acad::ErrorStatus   setViewCenter(const AcGePoint2d& pt);
    double              twistAngle() const;
    Acad::ErrorStatus   setTwistAngle(double val);
    double              lensLength() const;
    Acad::ErrorStatus   setLensLength(double val);
    bool                isFrontClipOn() const;
    Acad::ErrorStatus   setFrontClipOn1();
    Acad::ErrorStatus   setFrontClipOff();
    Acad::ErrorStatus   setFrontClipOn2(bool bOn);
    bool                isBackClipOn() const;
    Acad::ErrorStatus   setBackClipOn1();
    Acad::ErrorStatus   setBackClipOff();
    Acad::ErrorStatus   setBackClipOn2(bool bOn);
    bool                isFrontClipAtEyeOn() const;
    Acad::ErrorStatus   setFrontClipAtEyeOn1();
    Acad::ErrorStatus   setFrontClipAtEyeOff();
    Acad::ErrorStatus   setFrontClipAtEyeOn2(bool bOn);
    double              frontClipDistance() const;
    Acad::ErrorStatus   setFrontClipDistance(double newVal);
    double              backClipDistance() const;
    Acad::ErrorStatus   setBackClipDistance(double newVal);
    bool                isPerspectiveOn() const;
    Acad::ErrorStatus   setPerspectiveOn1();
    Acad::ErrorStatus   setPerspectiveOff();
    Acad::ErrorStatus   setPerspectiveOn2(bool bOn);
    bool                isUcsFollowModeOn() const;
    Acad::ErrorStatus   setUcsFollowModeOn1();
    Acad::ErrorStatus   setUcsFollowModeOff();
    Acad::ErrorStatus   setUcsFollowModeOn2(bool bOn);
    bool                isUcsIconVisible() const;
    Acad::ErrorStatus   setUcsIconVisible1();
    Acad::ErrorStatus   setUcsIconInvisible();
    Acad::ErrorStatus   setUcsIconVisible2(bool bOn);
    bool                isUcsIconAtOrigin() const;
    Acad::ErrorStatus   setUcsIconAtOrigin1();
    Acad::ErrorStatus   setUcsIconAtCorner();
    Acad::ErrorStatus   setUcsIconAtOrigin2(bool);
    bool                isFastZoomOn() const;
    Acad::ErrorStatus   setFastZoomOn1();
    Acad::ErrorStatus   setFastZoomOff();
    Acad::ErrorStatus   setFastZoomOn2(bool bOn);
    Adesk::UInt16       circleSides() const;
    Acad::ErrorStatus   setCircleSides(Adesk::UInt16 val);
    bool                isSnapOn() const;
    Acad::ErrorStatus   setSnapOn1();
    Acad::ErrorStatus   setSnapOff();
    Acad::ErrorStatus   setSnapOn2(bool bOn);
    bool                isSnapIsometric() const;
    Acad::ErrorStatus   setSnapIsometric1();
    Acad::ErrorStatus   setSnapStandard();
    Acad::ErrorStatus   setSnapIsometric2(bool bOn);
    double              snapAngle() const;
    Acad::ErrorStatus   setSnapAngle(double val);
    AcGePoint2d         snapBasePoint() const;
    Acad::ErrorStatus   setSnapBasePoint(const AcGePoint2d& val);
    AcGeVector2d        snapIncrement() const;
    Acad::ErrorStatus   setSnapIncrement(const AcGeVector2d& val);
    Adesk::UInt16       snapIsoPair() const;
    Acad::ErrorStatus   setSnapIsoPair(Adesk::UInt16 val);
    bool                isGridOn() const;
    Acad::ErrorStatus   setGridOn1();
    Acad::ErrorStatus   setGridOff();
    Acad::ErrorStatus   setGridOn2(bool val);
    bool                isGridBoundToLimits() const;
    Acad::ErrorStatus   setGridBoundToLimits(bool bNewVal);
    bool                isGridAdaptive() const;
    Acad::ErrorStatus   setGridAdaptive(bool bNewVal);
    bool                isGridSubdivisionRestricted() const;
    Acad::ErrorStatus   setGridSubdivisionRestricted(bool bNewVal);
    bool                isGridFollow() const;
    Acad::ErrorStatus   setGridFollow(bool bNewVal);
    Adesk::UInt16       gridMajor() const;
    Acad::ErrorStatus   setGridMajor(Adesk::UInt16 val);
    AcGeVector2d        gridIncrement() const;
    Acad::ErrorStatus   setGridIncrement(const AcGeVector2d& val);
    bool                hiddenLinesRemoved() const;
    Acad::ErrorStatus   showHiddenLines();
    Acad::ErrorStatus   removeHiddenLines1();
    Acad::ErrorStatus   removeHiddenLines2(bool val);
    Acad::ErrorStatus   freezeLayersInViewport(const boost::python::list& ids);
    Acad::ErrorStatus   thawLayersInViewport(const boost::python::list& pyids);
    Acad::ErrorStatus   thawAllLayersInViewport();
    bool                isLayerFrozenInViewport(const PyDbObjectId& layerId) const;
    boost::python::list getFrozenLayerList() const;
    Acad::ErrorStatus   updateDisplay() const;
    PyDbObjectId        background() const;
    Acad::ErrorStatus   setBackground(PyDbObjectId& backgroundId);
    PyDbObjectId        previousBackground1() const;
    PyDbObjectId        previousBackground2(AcGiDrawable::DrawableType type) const;
    Acad::ErrorStatus   setPreviousBackground1(PyDbObjectId& backgroundId);
    Acad::ErrorStatus   setPreviousBackground2(PyDbObjectId& backgroundId, AcGiDrawable::DrawableType type);
    Acad::ErrorStatus   setPreviousBackground3(PyDbObjectId& backgroundId, AcGiDrawable::DrawableType type, bool force);
    bool                previousBackgroundForcedSwitch(void) const;
    PyDbObjectId        visualStyle() const;
    Acad::ErrorStatus   setVisualStyle(const PyDbObjectId& oidVisualStyle);
    bool                isDefaultLightingOn() const;
    Acad::ErrorStatus   setDefaultLightingOn(bool on);
    AcGiViewportTraits::DefaultLightingType defaultLightingType() const;
    Acad::ErrorStatus   setDefaultLightingType(AcGiViewportTraits::DefaultLightingType typ);
    double              brightness() const;
    Acad::ErrorStatus   setBrightness(double val);
    double              contrast() const;
    Acad::ErrorStatus   setContrast(double val);
    AcCmColor           ambientLightColor() const;
    Acad::ErrorStatus   setAmbientLightColor(const AcCmColor& clr);
    PyDbObjectId        sunId() const;
    Acad::ErrorStatus   setSun1(PyDbObjectId& retId, PyDbObject& pSun);
    Acad::ErrorStatus   setSun2(PyDbObjectId& retId, PyDbObject& pSun, bool eraseOldSun);
    bool                isLocked() const;
    Acad::ErrorStatus   setLocked1();
    Acad::ErrorStatus   setUnlocked();
    Acad::ErrorStatus   setLocked2(bool val);
    PyDbAnnotationScale annotationScale() const;
    Acad::ErrorStatus   setAnnotationScale(const PyDbAnnotationScale& pScaleObj);
    bool                isTransparent() const;
    Acad::ErrorStatus   setTransparent1();
    Acad::ErrorStatus   setOpaque();
    Acad::ErrorStatus   setTransparent2(bool val);
    double              customScale() const;
    Acad::ErrorStatus   setCustomScale(double val);
    AcDbViewport::StandardScaleType standardScale() const;
    Acad::ErrorStatus   setStandardScale(const AcDbViewport::StandardScaleType val);
    std::string         plotStyleSheet() const;
    std::string         effectivePlotStyleSheet();
    Acad::ErrorStatus   setPlotStyleSheet(const std::string& val);
    bool                isNonRectClipOn() const;
    Acad::ErrorStatus   setNonRectClipOn1();
    Acad::ErrorStatus   setNonRectClipOff();
    Acad::ErrorStatus   setNonRectClipOn2(bool bOn);
    PyDbObjectId        nonRectClipEntityId() const;
    Acad::ErrorStatus   setNonRectClipEntityId(const PyDbObjectId& val);
    void                erased(const PyDbObject& obj, Adesk::Boolean val);
    void                modified(const PyDbObject& obj);
    void                copied(const PyDbObject& pDbObj, const PyDbObject& pNewObj);
    void                subObjModified(const PyDbObject& pDbObj, const PyDbObject& pSubObj);
    Acad::ErrorStatus   getUcs(AcGePoint3d& origin, AcGeVector3d& xAxis, AcGeVector3d& yAxis) const;
    boost::python::tuple isUcsOrthographic() const;
    PyDbObjectId        ucsName() const;
    double              elevation() const;
    Acad::ErrorStatus   setUcs1(const AcGePoint3d& origin,const AcGeVector3d& xAxis, const AcGeVector3d& yAxis);
    Acad::ErrorStatus   setUcs2(AcDb::OrthographicView view);
    Acad::ErrorStatus   setUcs3(const PyDbObjectId& ucsId);
    Acad::ErrorStatus   setUcsToWorld();
    Acad::ErrorStatus   setElevation(double elev);
    boost::python::tuple isViewOrthographic() const;
    Acad::ErrorStatus   setViewDirection2(AcDb::OrthographicView view);
    bool                isUcsSavedWithViewport() const;
    void                setUcsPerViewport(bool ucsvp);
    AcDbViewport::ShadePlotType shadePlot() const;
    Acad::ErrorStatus   setShadePlot1(const AcDbViewport::ShadePlotType);
    PyDbObjectId        shadePlotId() const;
    Acad::ErrorStatus   setShadePlot2(const AcDbViewport::ShadePlotType type,const PyDbObjectId shadePlotId);
    bool                plotWireframe() const;
    bool                plotAsRaster()  const;
    //Acad::ErrorStatus toneOperatorParameters(AcGiToneOperatorParameters& params) const;
    //Acad::ErrorStatus setToneOperatorParameters(const AcGiToneOperatorParameters& params);
    static std::string      className();
    static PyRxClass        desc();
    static PyDbViewport     cloneFrom(const PyRxObject& src);
    static PyDbViewport     cast(const PyRxObject& src);
public:
    AcDbViewport* impObj(const std::source_location& src = std::source_location::current()) const;
};

