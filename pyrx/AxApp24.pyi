from _typeshed import Incomplete
from win32com.client import CoClassBaseClass, DispatchBaseClass

makepy_version: str
python_version: int
defaultNamedOptArg: Incomplete
defaultNamedNotOptArg: Incomplete
defaultUnnamedArg: Incomplete
CLSID: Incomplete
MajorVersion: int
MinorVersion: int
LibraryFlags: int
LCID: int

def getApp() -> IAcadApplication: ...
def getDbx() -> IAxDbDocument: ...
def createEventObject(obj,eventClass): ...

class constants:
    acCubicSpline3DPoly: int
    acQuadSpline3DPoly: int
    acSimple3DPoly: int
    acDemanLoadDisable: int
    acDemandLoadCmdInvoke: int
    acDemandLoadOnObjectDetect: int
    acModelSpace: int
    acPaperSpace: int
    acAlignmentAligned: int
    acAlignmentBottomCenter: int
    acAlignmentBottomLeft: int
    acAlignmentBottomRight: int
    acAlignmentCenter: int
    acAlignmentFit: int
    acAlignmentLeft: int
    acAlignmentMiddle: int
    acAlignmentMiddleCenter: int
    acAlignmentMiddleLeft: int
    acAlignmentMiddleRight: int
    acAlignmentRight: int
    acAlignmentTopCenter: int
    acAlignmentTopLeft: int
    acAlignmentTopRight: int
    acAlignPntAcquisitionAutomatic: int
    acAlignPntAcquisitionShiftToAcquire: int
    acDegreeMinuteSeconds: int
    acDegrees: int
    acGrads: int
    acRadians: int
    acAttachmentPointBottomCenter: int
    acAttachmentPointBottomLeft: int
    acAttachmentPointBottomRight: int
    acAttachmentPointMiddleCenter: int
    acAttachmentPointMiddleLeft: int
    acAttachmentPointMiddleRight: int
    acAttachmentPointTopCenter: int
    acAttachmentPointTopLeft: int
    acAttachmentPointTopRight: int
    acAttributeModeConstant: int
    acAttributeModeInvisible: int
    acAttributeModeLockPosition: int
    acAttributeModeMultipleLine: int
    acAttributeModeNormal: int
    acAttributeModePreset: int
    acAttributeModeVerify: int
    acConnectBase: int
    acConnectExtents: int
    acAny: int
    acUniform: int
    acFalse: int
    acTrue: int
    acIntersection: int
    acSubtraction: int
    acUnion: int
    acBottomCenter: int
    acBottomLeft: int
    acBottomRight: int
    acMiddleCenter: int
    acMiddleLeft: int
    acMiddleRight: int
    acTopCenter: int
    acTopLeft: int
    acTopRight: int
    acCellContentLayoutFlow: int
    acCellContentLayoutStackedHorizontal: int
    acCellContentLayoutStackedVertical: int
    acCellContentTypeBlock: int
    acCellContentTypeField: int
    acCellContentTypeUnknown: int
    acCellContentTypeValue: int
    acBottomMask: int
    acLeftMask: int
    acRightMask: int
    acTopMask: int
    acCellMarginBottom: int
    acCellMarginHorzSpacing: int
    acCellMarginLeft: int
    acCellMarginRight: int
    acCellMarginTop: int
    acCellMarginVertSpacing: int
    kCellOptionNone: int
    kInheritCellFormat: int
    acAlignmentProperty: int
    acAllCellProperties: int
    acAutoScale: int
    acBackgroundColor: int
    acBitProperties: int
    acContentColor: int
    acContentLayout: int
    acContentProperties: int
    acDataFormat: int
    acDataType: int
    acDataTypeAndFormat: int
    acEnableBackgroundColor: int
    acFlowDirBtoT: int
    acInvalidCellProperty: int
    acLock: int
    acMarginBottom: int
    acMarginLeft: int
    acMarginRight: int
    acMarginTop: int
    acMergeAll: int
    acRotation: int
    acScale: int
    acTextHeight: int
    acTextStyle: int
    acCellStateContentLocked: int
    acCellStateContentModified: int
    acCellStateContentReadOnly: int
    acCellStateFormatLocked: int
    acCellStateFormatModified: int
    acCellStateFormatReadOnly: int
    acCellStateLinked: int
    acCellStateNone: int
    acBlockCell: int
    acTextCell: int
    acUnknownCell: int
    acBlue: int
    acByBlock: int
    acByLayer: int
    acCyan: int
    acGreen: int
    acMagenta: int
    acRed: int
    acWhite: int
    acYellow: int
    acColorMethodByACI: int
    acColorMethodByBlock: int
    acColorMethodByLayer: int
    acColorMethodByRGB: int
    acColorMethodForeground: int
    acDisplayDCS: int
    acOCS: int
    acPaperSpaceDCS: int
    acUCS: int
    acWorld: int
    acUpdateDataFromSource: int
    acUpdateSourceFromData: int
    acUpdateOptionIncludeXrefs: int
    acUpdateOptionNone: int
    acUpdateOptionOverwriteContentModifiedAfterUpdate: int
    acUpdateOptionOverwriteFormatModifiedAfterUpdate: int
    acUpdateOptionUpdateFullSourceRange: int
    acSymAbove: int
    acSymInFront: int
    acSymNone: int
    acArrowArchTick: int
    acArrowBoxBlank: int
    acArrowBoxFilled: int
    acArrowClosed: int
    acArrowClosedBlank: int
    acArrowDatumBlank: int
    acArrowDatumFilled: int
    acArrowDefault: int
    acArrowDot: int
    acArrowDotBlank: int
    acArrowDotSmall: int
    acArrowIntegral: int
    acArrowNone: int
    acArrowOblique: int
    acArrowOpen: int
    acArrowOpen30: int
    acArrowOpen90: int
    acArrowOrigin: int
    acArrowOrigin2: int
    acArrowSmall: int
    acArrowUserDefined: int
    acCenterLine: int
    acCenterMark: int
    acCenterNone: int
    acArrowsOnly: int
    acBestFit: int
    acTextAndArrows: int
    acTextOnly: int
    acDiagonal: int
    acHorizontal: int
    acNotStacked: int
    acFirstExtensionLine: int
    acHorzCentered: int
    acOverFirstExtension: int
    acOverSecondExtension: int
    acSecondExtensionLine: int
    acDimLArchitectural: int
    acDimLDecimal: int
    acDimLEngineering: int
    acDimLFractional: int
    acDimLScientific: int
    acDimLWindowsDesktop: int
    acDimPrecisionEight: int
    acDimPrecisionFive: int
    acDimPrecisionFour: int
    acDimPrecisionOne: int
    acDimPrecisionSeven: int
    acDimPrecisionSix: int
    acDimPrecisionThree: int
    acDimPrecisionTwo: int
    acDimPrecisionZero: int
    acDimLineWithText: int
    acMoveTextAddLeader: int
    acMoveTextNoLeader: int
    acTolBottom: int
    acTolMiddle: int
    acTolTop: int
    acTolBasic: int
    acTolDeviation: int
    acTolLimits: int
    acTolNone: int
    acTolSymmetrical: int
    acDimArchitectural: int
    acDimArchitecturalStacked: int
    acDimDecimal: int
    acDimEngineering: int
    acDimFractional: int
    acDimFractionalStacked: int
    acDimScientific: int
    acDimWindowsDesktop: int
    acAbove: int
    acJIS: int
    acOutside: int
    acUnder: int
    acVertCentered: int
    acDragDisplayAutomatically: int
    acDragDisplayOnRequest: int
    acDragDoNotDisplay: int
    acDrawLeaderHeadFirst: int
    acDrawLeaderTailFirst: int
    acDrawContentFirst: int
    acDrawLeaderFirst: int
    acEnableSCM: int
    acEnableSCMOptions: int
    acEnter: int
    acRepeatLastCommand: int
    acSCM: int
    acEdRepeatLastCommand: int
    acEdSCM: int
    acNoDrawingAreaShortCutMenu: int
    acUseDefaultDrawingAreaShortCutMenu: int
    acBottomToTop: int
    acByStyle: int
    acLeftToRight: int
    acRightToLeft: int
    acTopToBottom: int
    acAngular: int
    acArea: int
    acDistance: int
    acNoUnits: int
    ac3dFace: int
    ac3dPolyline: int
    ac3dSolid: int
    acArc: int
    acAttribute: int
    acAttributeReference: int
    acBlockReference: int
    acCircle: int
    acDgnUnderlay: int
    acDim3PointAngular: int
    acDimAligned: int
    acDimAngular: int
    acDimArcLength: int
    acDimDiametric: int
    acDimOrdinate: int
    acDimRadial: int
    acDimRadialLarge: int
    acDimRotated: int
    acDwfUnderlay: int
    acEllipse: int
    acExternalReference: int
    acGroup: int
    acHatch: int
    acLeader: int
    acLine: int
    acMInsertBlock: int
    acMLeader: int
    acMLine: int
    acMtext: int
    acNurbSurface: int
    acPViewport: int
    acPdfUnderlay: int
    acPoint: int
    acPolyfaceMesh: int
    acPolyline: int
    acPolylineLight: int
    acPolymesh: int
    acRaster: int
    acRay: int
    acRegion: int
    acShape: int
    acSolid: int
    acSpline: int
    acSubDMesh: int
    acTable: int
    acText: int
    acTolerance: int
    acTrace: int
    acXline: int
    acExtendBoth: int
    acExtendNone: int
    acExtendOtherEntity: int
    acExtendThisEntity: int
    acForEditing: int
    acForExpression: int
    acIgnoreMtextFormat: int
    acUseMaximumPrecision: int
    kFormatOptionNone: int
    acPreDefinedGradient: int
    acUserDefinedGradient: int
    acGridLineStyleDouble: int
    acGridLineStyleSingle: int
    acHorzBottom: int
    acHorzInside: int
    acHorzTop: int
    acInvalidGridLine: int
    acVertInside: int
    acVertLeft: int
    acVertRight: int
    acGradientObject: int
    acHatchObject: int
    acHatchStyleIgnore: int
    acHatchStyleNormal: int
    acHatchStyleOuter: int
    acHeight: int
    acTurnHeight: int
    acTurns: int
    acCCW: int
    acCW: int
    acHorizontalAlignmentAligned: int
    acHorizontalAlignmentCenter: int
    acHorizontalAlignmentFit: int
    acHorizontalAlignmentLeft: int
    acHorizontalAlignmentMiddle: int
    acHorizontalAlignmentRight: int
    acPenWidth013: int
    acPenWidth018: int
    acPenWidth025: int
    acPenWidth035: int
    acPenWidth050: int
    acPenWidth070: int
    acPenWidth100: int
    acPenWidth140: int
    acPenWidth200: int
    acPenWidthUnk: int
    acInsertUnitsAngstroms: int
    acInsertUnitsAstronomicalUnits: int
    acInsertUnitsCentimeters: int
    acInsertUnitsDecameters: int
    acInsertUnitsDecimeters: int
    acInsertUnitsFeet: int
    acInsertUnitsGigameters: int
    acInsertUnitsHectometers: int
    acInsertUnitsInches: int
    acInsertUnitsKilometers: int
    acInsertUnitsLightYears: int
    acInsertUnitsMeters: int
    acInsertUnitsMicroinches: int
    acInsertUnitsMicrons: int
    acInsertUnitsMiles: int
    acInsertUnitsMillimeters: int
    acInsertUnitsMils: int
    acInsertUnitsNanometers: int
    acInsertUnitsParsecs: int
    acInsertUnitsUSSurveyFeet: int
    acInsertUnitsUSSurveyInch: int
    acInsertUnitsUSSurveyMile: int
    acInsertUnitsUSSurveyYard: int
    acInsertUnitsUnitless: int
    acInsertUnitsYards: int
    acInsertUnitsAutoAssign: int
    acInsertUnitsPrompt: int
    acPreferenceClassic: int
    acPreferenceCustom: int
    acKeyboardEntry: int
    acKeyboardEntryExceptScripts: int
    acKeyboardRunningObjSnap: int
    acLsAll: int
    acLsColor: int
    acLsFrozen: int
    acLsLineType: int
    acLsLineWeight: int
    acLsLocked: int
    acLsNewViewport: int
    acLsNone: int
    acLsOn: int
    acLsPlot: int
    acLsPlotStyle: int
    acLineNoArrow: int
    acLineWithArrow: int
    acSplineNoArrow: int
    acSplineWithArrow: int
    acLineSpacingStyleAtLeast: int
    acLineSpacingStyleExactly: int
    acLnWt000: int
    acLnWt005: int
    acLnWt009: int
    acLnWt013: int
    acLnWt015: int
    acLnWt018: int
    acLnWt020: int
    acLnWt025: int
    acLnWt030: int
    acLnWt035: int
    acLnWt040: int
    acLnWt050: int
    acLnWt053: int
    acLnWt060: int
    acLnWt070: int
    acLnWt080: int
    acLnWt090: int
    acLnWt100: int
    acLnWt106: int
    acLnWt120: int
    acLnWt140: int
    acLnWt158: int
    acLnWt200: int
    acLnWt211: int
    acLnWtByBlock: int
    acLnWtByLayer: int
    acLnWtByLwDefault: int
    acPaletteByDrawing: int
    acPaletteBySession: int
    acAllNormal: int
    acEndsNormal: int
    acFirstNormal: int
    acLastNormal: int
    acRuled: int
    acSmooth: int
    acUseDraftAngles: int
    acHatchLoopTypeDefault: int
    acHatchLoopTypeDerived: int
    acHatchLoopTypeExternal: int
    acHatchLoopTypePolyline: int
    acHatchLoopTypeTextbox: int
    acBlockContent: int
    acMTextContent: int
    acNoneContent: int
    acInVisibleLeader: int
    acSplineLeader: int
    acStraightLeader: int
    acBottom: int
    acTop: int
    acZero: int
    acEnglish: int
    acMetric: int
    acMenuFileCompiled: int
    acMenuFileSource: int
    acBaseMenuGroup: int
    acPartialMenuGroup: int
    acMenuItem: int
    acMenuSeparator: int
    acMenuSubMenu: int
    acMergeCellStyleConvertDuplicatesToOverrides: int
    acMergeCellStyleCopyDuplicates: int
    acMergeCellStyleIgnoreNewStyles: int
    acMergeCellStyleNone: int
    acMergeCellStyleOverwriteDuplicates: int
    acAlwaysCrease: int
    acCreaseByLevel: int
    acNoneCrease: int
    acOPQHighGraphics: int
    acOPQLowGraphics: int
    acOPQMonochrome: int
    acOQGraphics: int
    acOQHighPhoto: int
    acOQLineArt: int
    acOQPhoto: int
    acOQText: int
    acOTEmbedded: int
    acOTLink: int
    acOTStatic: int
    acOff: int
    acOn: int
    acParseOptionNone: int
    acPreserveMtextFormat: int
    acSetDefaultFormat: int
    acHatchPatternTypeCustomDefined: int
    acHatchPatternTypePreDefined: int
    acHatchPatternTypeUserDefined: int
    acPlotOrientationLandscape: int
    acPlotOrientationPortrait: int
    acInches: int
    acMillimeters: int
    acPixels: int
    acPolicyLegacy: int
    acPolicyNamed: int
    acPolicyLegacyDefault: int
    acPolicyLegacyLegacy: int
    acPolicyLegacyQuery: int
    acPolicyNewDefault: int
    acPolicyNewLegacy: int
    ac0degrees: int
    ac180degrees: int
    ac270degrees: int
    ac90degrees: int
    ac100_1: int
    ac10_1: int
    ac1_1: int
    ac1_10: int
    ac1_100: int
    ac1_128in_1ft: int
    ac1_16: int
    ac1_16in_1ft: int
    ac1_2: int
    ac1_20: int
    ac1_2in_1ft: int
    ac1_30: int
    ac1_32in_1ft: int
    ac1_4: int
    ac1_40: int
    ac1_4in_1ft: int
    ac1_5: int
    ac1_50: int
    ac1_64in_1ft: int
    ac1_8: int
    ac1_8in_1ft: int
    ac1ft_1ft: int
    ac1in_1ft: int
    ac2_1: int
    ac3_16in_1ft: int
    ac3_32in_1ft: int
    ac3_4in_1ft: int
    ac3_8in_1ft: int
    ac3in_1ft: int
    ac4_1: int
    ac6in_1ft: int
    ac8_1: int
    acScaleToFit: int
    acDisplay: int
    acExtents: int
    acLayout: int
    acLimits: int
    acView: int
    acWindow: int
    acByColor: int
    acTrueColor: int
    acClassification: int
    acElevation: int
    acIntensities: int
    acNormals: int
    acObject: int
    acRGB: int
    acIntensityBlue: int
    acIntensityEditableFlag: int
    acIntensityGrayscale: int
    acIntensityGreen: int
    acIntensityRainbow: int
    acIntensityRed: int
    acIntensity: int
    acNormal: int
    acObjectColor: int
    acScanColor: int
    acCubicSplinePoly: int
    acFitCurvePoly: int
    acQuadSplinePoly: int
    acSimplePoly: int
    acBezierSurfaceMesh: int
    acCubicSurfaceMesh: int
    acQuadSurfaceMesh: int
    acSimpleMesh: int
    acBlockBox: int
    acBlockCircle: int
    acBlockHexagon: int
    acBlockImperial: int
    acBlockSlot: int
    acBlockTriangle: int
    acBlockUserDefined: int
    acFullPreview: int
    acPartialPreview: int
    acPrinterAlertOnce: int
    acPrinterAlwaysAlert: int
    acPrinterNeverAlert: int
    acPrinterNeverAlertLogOnce: int
    acProxyBoundingBox: int
    acProxyNotShow: int
    acProxyShow: int
    acActiveViewport: int
    acAllViewports: int
    acDegrees000: int
    acDegrees090: int
    acDegrees180: int
    acDegrees270: int
    acDegreesUnknown: int
    acDataRow: int
    acHeaderRow: int
    acTitleRow: int
    acUnknownRow: int
    ac2000_Template: int
    ac2000_dwg: int
    ac2000_dxf: int
    ac2004_Template: int
    ac2004_dwg: int
    ac2004_dxf: int
    ac2007_Template: int
    ac2007_dwg: int
    ac2007_dxf: int
    ac2010_Template: int
    ac2010_dwg: int
    ac2010_dxf: int
    ac2013_Template: int
    ac2013_dwg: int
    ac2013_dxf: int
    ac2018_Template: int
    ac2018_dwg: int
    ac2018_dxf: int
    acNative: int
    acR12_dxf: int
    acR13_dwg: int
    acR13_dxf: int
    acR14_dwg: int
    acR14_dxf: int
    acR15_Template: int
    acR15_dwg: int
    acR15_dxf: int
    acR18_Template: int
    acR18_dwg: int
    acR18_dxf: int
    acUnknown: int
    acSectionGenerationDestinationFile: int
    acSectionGenerationDestinationNewBlock: int
    acSectionGenerationDestinationReplaceBlock: int
    acSectionGenerationSourceAllObjects: int
    acSectionGenerationSourceSelectedObjects: int
    acSectionStateBoundary: int
    acSectionStatePlane: int
    acSectionStateVolume: int
    acSectionState2Boundary: int
    acSectionState2Plane: int
    acSectionState2Slice: int
    acSectionState2Volume: int
    acSectionSubItemBackLine: int
    acSectionSubItemBackLineBottom: int
    acSectionSubItemBackLineTop: int
    acSectionSubItemSectionLine: int
    acSectionSubItemSectionLineBottom: int
    acSectionSubItemSectionLineTop: int
    acSectionSubItemVerticalLineBottom: int
    acSectionSubItemVerticalLineTop: int
    acSectionSubItemkNone: int
    acSectionType2dSection: int
    acSectionType3dSection: int
    acSectionTypeLiveSection: int
    acDegrees15: int
    acDegrees30: int
    acDegrees45: int
    acDegrees60: int
    acDegrees90: int
    acDegreesAny: int
    acDegreesHorz: int
    acSelectionSetAll: int
    acSelectionSetCrossing: int
    acSelectionSetCrossingPolygon: int
    acSelectionSetFence: int
    acSelectionSetLast: int
    acSelectionSetPrevious: int
    acSelectionSetWindow: int
    acSelectionSetWindowPolygon: int
    acTableSelectCrossing: int
    acTableSelectWindow: int
    acShadePlotAsDisplayed: int
    acShadePlotHidden: int
    acShadePlotRendered: int
    acShadePlotWireframe: int
    acCastsAndReceivesShadows: int
    acCastsShadows: int
    acIgnoreShadows: int
    acReceivesShadows: int
    acHide: int
    acShow: int
    acChord: int
    acCustomParameterization: int
    acSqrtChord: int
    acUniformParam: int
    acControlVertices: int
    acFit: int
    acTableBottomToTop: int
    acTableTopToBottom: int
    acTableFlowDownOrUp: int
    acTableFlowLeft: int
    acTableFlowRight: int
    acCellAlign: int
    acCellBackgroundColor: int
    acCellBackgroundFillNone: int
    acCellBottomGridColor: int
    acCellBottomGridLineWeight: int
    acCellBottomVisibility: int
    acCellContentColor: int
    acCellDataType: int
    acCellLeftGridColor: int
    acCellLeftGridLineWeight: int
    acCellLeftVisibility: int
    acCellRightGridColor: int
    acCellRightGridLineWeight: int
    acCellRightVisibility: int
    acCellTextHeight: int
    acCellTextStyle: int
    acCellTopGridColor: int
    acCellTopGridLineWeight: int
    acCellTopVisibility: int
    acDataHorzBottomColor: int
    acDataHorzBottomLineWeight: int
    acDataHorzBottomVisibility: int
    acDataHorzInsideColor: int
    acDataHorzInsideLineWeight: int
    acDataHorzInsideVisibility: int
    acDataHorzTopColor: int
    acDataHorzTopLineWeight: int
    acDataHorzTopVisibility: int
    acDataRowAlignment: int
    acDataRowColor: int
    acDataRowDataType: int
    acDataRowFillColor: int
    acDataRowFillNone: int
    acDataRowTextHeight: int
    acDataRowTextStyle: int
    acDataVertInsideColor: int
    acDataVertInsideLineWeight: int
    acDataVertInsideVisibility: int
    acDataVertLeftColor: int
    acDataVertLeftLineWeight: int
    acDataVertLeftVisibility: int
    acDataVertRightColor: int
    acDataVertRightLineWeight: int
    acDataVertRightVisibility: int
    acFlowDirection: int
    acHeaderHorzBottomColor: int
    acHeaderHorzBottomLineWeight: int
    acHeaderHorzBottomVisibility: int
    acHeaderHorzInsideColor: int
    acHeaderHorzInsideLineWeight: int
    acHeaderHorzInsideVisibility: int
    acHeaderHorzTopColor: int
    acHeaderHorzTopLineWeight: int
    acHeaderHorzTopVisibility: int
    acHeaderRowAlignment: int
    acHeaderRowColor: int
    acHeaderRowDataType: int
    acHeaderRowFillColor: int
    acHeaderRowFillNone: int
    acHeaderRowTextHeight: int
    acHeaderRowTextStyle: int
    acHeaderSuppressed: int
    acHeaderVertInsideColor: int
    acHeaderVertInsideLineWeight: int
    acHeaderVertInsideVisibility: int
    acHeaderVertLeftColor: int
    acHeaderVertLeftLineWeight: int
    acHeaderVertLeftVisibility: int
    acHeaderVertRightColor: int
    acHeaderVertRightLineWeight: int
    acHeaderVertRightVisibility: int
    acHorzCellMargin: int
    acTitleHorzBottomColor: int
    acTitleHorzBottomLineWeight: int
    acTitleHorzBottomVisibility: int
    acTitleHorzInsideColor: int
    acTitleHorzInsideLineWeight: int
    acTitleHorzInsideVisibility: int
    acTitleHorzTopColor: int
    acTitleHorzTopLineWeight: int
    acTitleHorzTopVisibility: int
    acTitleRowAlignment: int
    acTitleRowColor: int
    acTitleRowDataType: int
    acTitleRowFillColor: int
    acTitleRowFillNone: int
    acTitleRowTextHeight: int
    acTitleRowTextStyle: int
    acTitleSuppressed: int
    acTitleVertInsideColor: int
    acTitleVertInsideLineWeight: int
    acTitleVertInsideVisibility: int
    acTitleVertLeftColor: int
    acTitleVertLeftLineWeight: int
    acTitleVertLeftVisibility: int
    acTitleVertRightColor: int
    acTitleVertRightLineWeight: int
    acTitleVertRightVisibility: int
    acVertCellMargin: int
    acCenterAlignment: int
    acLeftAlignment: int
    acRightAlignment: int
    acAlwaysRightReadingAngle: int
    acHorizontalAngle: int
    acInsertAngle: int
    acAttachmentHorizontal: int
    acAttachmentVertical: int
    acAttachmentAllLine: int
    acAttachmentBottomLine: int
    acAttachmentBottomOfBottom: int
    acAttachmentBottomOfTop: int
    acAttachmentBottomOfTopLine: int
    acAttachmentMiddle: int
    acAttachmentMiddleOfBottom: int
    acAttachmentMiddleOfTop: int
    acAttachmentTopOfTop: int
    acFontBold: int
    acFontBoldItalic: int
    acFontItalic: int
    acFontRegular: int
    acTextFlagBackward: int
    acTextFlagUpsideDown: int
    acToolbarDockBottom: int
    acToolbarDockLeft: int
    acToolbarDockRight: int
    acToolbarDockTop: int
    acToolbarFloating: int
    acToolbarButton: int
    acToolbarControl: int
    acToolbarFlyout: int
    acToolbarSeparator: int
    acApplied: int
    acNoOverrides: int
    acArchitectural: int
    acDecimal: int
    acDefaultUnits: int
    acEngineering: int
    acFractional: int
    acScientific: int
    acBuffer: int
    acDate: int
    acDouble: int
    acGeneral: int
    acLong: int
    acObjectId: int
    acPoint2d: int
    acPoint3d: int
    acResbuf: int
    acString: int
    acUnknownDataType: int
    acUnitAngle: int
    acUnitArea: int
    acUnitDistance: int
    acUnitVolume: int
    acUnitless: int
    acVerticalAlignmentBaseline: int
    acVerticalAlignmentBottom: int
    acVerticalAlignmentMiddle: int
    acVerticalAlignmentTop: int
    acAttachmentCenter: int
    acAttachmentLinedCenter: int
    acVp100_1: int
    acVp10_1: int
    acVp1_1: int
    acVp1_10: int
    acVp1_100: int
    acVp1_128in_1ft: int
    acVp1_16: int
    acVp1_16in_1ft: int
    acVp1_2: int
    acVp1_20: int
    acVp1_2in_1ft: int
    acVp1_30: int
    acVp1_32in_1ft: int
    acVp1_4: int
    acVp1_40: int
    acVp1_4in_1ft: int
    acVp1_5: int
    acVp1_50: int
    acVp1_64in_1ft: int
    acVp1_8: int
    acVp1_8in_1ft: int
    acVp1and1_2in_1ft: int
    acVp1ft_1ft: int
    acVp1in_1ft: int
    acVp2_1: int
    acVp3_16in_1ft: int
    acVp3_32in_1ft: int
    acVp3_4in_1ft: int
    acVp3_8in_1ft: int
    acVp3in_1ft: int
    acVp4_1: int
    acVp6in_1ft: int
    acVp8_1: int
    acVpCustomScale: int
    acVpScaleToFit: int
    acViewport2Horizontal: int
    acViewport2Vertical: int
    acViewport3Above: int
    acViewport3Below: int
    acViewport3Horizontal: int
    acViewport3Left: int
    acViewport3Right: int
    acViewport3Vertical: int
    acViewport4: int
    acMax: int
    acMin: int
    acNorm: int
    acIsolines: int
    acIsoparms: int
    acDemandLoadDisabled: int
    acDemandLoadEnabled: int
    acDemandLoadEnabledWithCopy: int
    acZoomScaledAbsolute: int
    acZoomScaledRelative: int
    acZoomScaledRelativePSpace: int
    ACADSECURITYPARAMS_ALGID_RC4: int
    ACADSECURITYPARAMS_ADD_TIMESTAMP: int
    ACADSECURITYPARAMS_ENCRYPT_DATA: int
    ACADSECURITYPARAMS_ENCRYPT_PROPS: int
    ACADSECURITYPARAMS_SIGN_DATA: int


class IAcad3DFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcad3DFace: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetInvisibleEdge(self, Index=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetInvisibleEdge(self, Index=..., State=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VisibilityEdge1(self): ...
    @property
    def VisibilityEdge2(self): ...
    @property
    def VisibilityEdge3(self): ...
    @property
    def VisibilityEdge4(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VisibilityEdge1.setter
    def VisibilityEdge1(self, value) -> None: ...
    @VisibilityEdge2.setter
    def VisibilityEdge2(self, value) -> None: ...
    @VisibilityEdge3.setter
    def VisibilityEdge3(self, value) -> None: ...
    @VisibilityEdge4.setter
    def VisibilityEdge4(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcad3DPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcad3DPolyline: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Closed(self): ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Type(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Closed.setter
    def Closed(self, value) -> None: ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Type.setter
    def Type(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcad3DSolid(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Boolean(self, Operation=..., SolidObject=...): ...
    def CheckInterference(
        self, Object=..., CreateInterferenceSolid=..., SolidsInterfere=...): ...

    def Copy(self)->IAcad3DSolid: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SectionSolid(self, Point1=..., Point2=..., point3=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SliceSolid(self, Point1=..., Point2=..., point3=..., Negative=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Centroid(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def History(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def MomentOfInertia(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Position(self): ...
    @property
    def PrincipalDirections(self): ...
    @property
    def PrincipalMoments(self): ...
    @property
    def ProductOfInertia(self): ...
    @property
    def RadiiOfGyration(self): ...
    @property
    def ShowHistory(self): ...
    @property
    def SolidType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Volume(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @History.setter
    def History(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Position.setter
    def Position(self, value) -> None: ...
    @ShowHistory.setter
    def ShowHistory(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadAcCmColor(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def SetColorBookColor(self, BookName=..., ColorName=...): ...
    def SetNames(self, ColorName=..., BookName=...): ...
    def SetRGB(self, Red=..., Green=..., Blue=...): ...
    def __iter__(self): ...
    @property
    def Blue(self): ...
    @property
    def BookName(self): ...
    @property
    def ColorIndex(self): ...
    @property
    def ColorMethod(self): ...
    @property
    def ColorName(self): ...
    @property
    def EntityColor(self): ...
    @property
    def Green(self): ...
    @property
    def Red(self): ...
    @ColorIndex.setter
    def ColorIndex(self, value) -> None: ...
    @ColorMethod.setter
    def ColorMethod(self, value) -> None: ...
    @EntityColor.setter
    def EntityColor(self, value) -> None: ...


class IAcadApplication(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Eval(self, Expression=...): ...
    def GetAcadState(self): ...
    def GetInterfaceObject(self, ProgID=...): ...
    def ListArx(self): ...
    def LoadArx(self, Name=...): ...
    def LoadDVB(self, Name=...): ...
    def Quit(self): ...
    def RunMacro(self, MacroPath=...): ...
    def StatusId(self, VportObj=...): ...
    def UnloadArx(self, Name=...): ...
    def UnloadDVB(self, Name=...): ...
    def Update(self): ...
    def Zoom(self, Type=..., vParams=...): ...
    def ZoomAll(self): ...
    def ZoomCenter(self, Center=..., Magnify=...): ...
    def ZoomExtents(self): ...
    def ZoomPickWindow(self): ...
    def ZoomPrevious(self): ...
    def ZoomScaled(self, scale=..., ScaleType=...): ...
    def ZoomWindow(self, LowerLeft=..., UpperRight=...): ...
    def __iter__(self): ...
    @property
    def ActiveDocument(self) -> IAcadDocument: ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Caption(self): ...
    @property
    def Documents(self) -> IAcadDocuments: ...
    @property
    def FullName(self): ...
    @property
    def HWND(self): ...
    @property
    def Height(self): ...
    @property
    def LocaleId(self): ...
    @property
    def MenuBar(self) -> IAcadMenuBar: ...
    @property
    def MenuGroups(self) -> IAcadMenuGroups: ...
    @property
    def Name(self): ...
    @property
    def Path(self): ...
    @property
    def Preferences(self) -> IAcadPreferences: ...
    @property
    def VBE(self): ...
    @property
    def Version(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def WindowLeft(self): ...
    @property
    def WindowState(self): ...
    @property
    def WindowTop(self): ...
    @ActiveDocument.setter
    def ActiveDocument(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @WindowLeft.setter
    def WindowLeft(self, value) -> None: ...
    @WindowState.setter
    def WindowState(self, value) -> None: ...
    @WindowTop.setter
    def WindowTop(self, value) -> None: ...


class IAcadArc(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadArc: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArcLength(self): ...
    @property
    def Area(self): ...
    @property
    def Center(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EndAngle(self): ...
    @property
    def EndPoint(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Radius(self): ...
    @property
    def StartAngle(self): ...
    @property
    def StartPoint(self): ...
    @property
    def Thickness(self): ...
    @property
    def TotalAngle(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Center.setter
    def Center(self, value) -> None: ...
    @EndAngle.setter
    def EndAngle(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Radius.setter
    def Radius(self, value) -> None: ...
    @StartAngle.setter
    def StartAngle(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadAttribute(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def UpdateMTextAttribute(self): ...
    def __iter__(self): ...
    @property
    def Alignment(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Backward(self): ...
    @property
    def Constant(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def FieldLength(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def HorizontalAlignment(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Invisible(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def LockPosition(self): ...
    @property
    def MTextAttribute(self): ...
    @property
    def MTextAttributeContent(self): ...
    @property
    def MTextBoundaryWidth(self): ...
    @property
    def MTextDrawingDirection(self): ...
    @property
    def Material(self): ...
    @property
    def Mode(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def ObliqueAngle(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Preset(self): ...
    @property
    def PromptString(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TagString(self): ...
    @property
    def TextAlignmentPoint(self): ...
    @property
    def TextGenerationFlag(self): ...
    @property
    def TextString(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UpsideDown(self): ...
    @property
    def Verify(self): ...
    @property
    def VerticalAlignment(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Alignment.setter
    def Alignment(self, value) -> None: ...
    @Backward.setter
    def Backward(self, value) -> None: ...
    @Constant.setter
    def Constant(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @FieldLength.setter
    def FieldLength(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Invisible.setter
    def Invisible(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @LockPosition.setter
    def LockPosition(self, value) -> None: ...
    @MTextAttribute.setter
    def MTextAttribute(self, value) -> None: ...
    @MTextAttributeContent.setter
    def MTextAttributeContent(self, value) -> None: ...
    @MTextBoundaryWidth.setter
    def MTextBoundaryWidth(self, value) -> None: ...
    @MTextDrawingDirection.setter
    def MTextDrawingDirection(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Mode.setter
    def Mode(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @ObliqueAngle.setter
    def ObliqueAngle(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Preset.setter
    def Preset(self, value) -> None: ...
    @PromptString.setter
    def PromptString(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TagString.setter
    def TagString(self, value) -> None: ...
    @TextAlignmentPoint.setter
    def TextAlignmentPoint(self, value) -> None: ...
    @TextGenerationFlag.setter
    def TextGenerationFlag(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UpsideDown.setter
    def UpsideDown(self, value) -> None: ...
    @Verify.setter
    def Verify(self, value) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadAttributeReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def UpdateMTextAttribute(self): ...
    def __iter__(self): ...
    @property
    def Alignment(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Backward(self): ...
    @property
    def Constant(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def FieldLength(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def HorizontalAlignment(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Invisible(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def LockPosition(self): ...
    @property
    def MTextAttribute(self): ...
    @property
    def MTextAttributeContent(self): ...
    @property
    def MTextBoundaryWidth(self): ...
    @property
    def MTextDrawingDirection(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def ObliqueAngle(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TagString(self): ...
    @property
    def TextAlignmentPoint(self): ...
    @property
    def TextGenerationFlag(self): ...
    @property
    def TextString(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UpsideDown(self): ...
    @property
    def VerticalAlignment(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Alignment.setter
    def Alignment(self, value) -> None: ...
    @Backward.setter
    def Backward(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @FieldLength.setter
    def FieldLength(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Invisible.setter
    def Invisible(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MTextAttribute.setter
    def MTextAttribute(self, value) -> None: ...
    @MTextAttributeContent.setter
    def MTextAttributeContent(self, value) -> None: ...
    @MTextBoundaryWidth.setter
    def MTextBoundaryWidth(self, value) -> None: ...
    @MTextDrawingDirection.setter
    def MTextDrawingDirection(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @ObliqueAngle.setter
    def ObliqueAngle(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TagString.setter
    def TagString(self, value) -> None: ...
    @TextAlignmentPoint.setter
    def TextAlignmentPoint(self, value) -> None: ...
    @TextGenerationFlag.setter
    def TextGenerationFlag(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UpsideDown.setter
    def UpsideDown(self, value) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadBlock(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=...,
                  Point4=...) -> IAcad3DFace: ...

    def Add3DMesh(self, M=..., N=..., PointsMatrix=...)->IAcadPolygonMesh: ...
    def Add3DPoly(self, PointsArray=...)->IAcad3DPolyline: ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...)->IAcadArc: ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=...,
                     InsertionPoint=..., Tag=..., Value=...)->IAcadAttribute: ...

    def AddBox(self, Origin=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddCircle(self, Center=..., Radius=...)->IAcadCircle: ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...)->IAcad3DSolid: ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...)->IAcad3DSolid: ...

    def AddDim3PointAngular(
        self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...)->IAcadDim3PointAngular: ...

    def AddDimAligned(self, ExtLine1Point=...,
                      ExtLine2Point=..., TextPosition=...)->IAcadDimAligned: ...

    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=...,
                      SecondEndPoint=..., TextPoint=...)->IAcadDimAngular: ...

    def AddDimArc(self, ArcCenter=..., FirstEndPoint=...,
                  SecondEndPoint=..., ArcPoint=...)->IAcadDimArcLength: ...

    def AddDimDiametric(self, ChordPoint=...,
                        FarChordPoint=..., LeaderLength=...)->IAcadDimDiametric: ...
    def AddDimOrdinate(self, DefinitionPoint=...,
                       LeaderEndPoint=..., UseXAxis=...)->IAcadDimOrdinate: ...

    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...)->IAcadDimRadial: ...

    def AddDimRadialLarge(self, Center=..., ChordPoint=...,
                          OverrideCenter=..., JogPoint=..., JogAngle=...)->IAcadDimRadialLarge: ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=...,
                      DimLineLocation=..., RotationAngle=...)->IAcadDimRotated: ...

    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...)->IAcadEllipse: ...

    def AddEllipticalCone(self, Center=..., MajorRadius=...,
                          MinorRadius=..., Height=...)->IAcad3DSolid: ...
    def AddEllipticalCylinder(
        self, Center=..., MajorRadius=..., MinorRadius=..., Height=...)->IAcad3DSolid: ...

    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...)->IAcad3DSolid: ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...)->IAcad3DSolid: ...
    def AddHatch(self, PatternType=..., PatternName=...,
                 Associativity=..., HatchObjectType=...)->IAcadHatch: ...

    def AddLeader(self, PointsArray=..., Annotation=..., Type=...)->IAcadLeader: ...
    def AddLightWeightPolyline(self, VerticesList=...) -> IAcadLWPolyline: ...
    def AddLine(self, StartPoint=..., EndPoint=...) -> IAcadLine: ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=...,
                        Rotation=..., NumRows=..., NumColumns=..., RowSpacing=..., ColumnSpacing=..., Password=...)->IAcadMInsertBlock: ...

    def AddMLeader(self, PointsArray=..., leaderLineIndex=...)->IAcadMLeader: ...
    def AddMLine(self, VertexList=...)->IAcadMLine: ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...)->IAcadMText: ...
    def AddPoint(self, Point=...) -> IAcadPoint: ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...)->IAcadPolyfaceMesh: ...
    def AddPolyline(self, VerticesList=...)->IAcadPolyline: ...
    def AddRaster(self, imageFileName=..., InsertionPoint=...,
                  ScaleFactor=..., RotationAngle=...)->IAcadRasterImage: ...

    def AddRay(self, Point1=..., Point2=...)->IAcadRay: ...
    def AddRegion(self, ObjectList=...)->IAcadRegion: ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=...,
                         AxisDir=..., Angle=...)->IAcad3DSolid: ...

    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...)->IAcadSection: ...
    def AddShape(self, Name=..., InsertionPoint=...,
                 ScaleFactor=..., RotationAngle=...)->IAcadShape: ...

    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...)->IAcadSolid: ...
    def AddSphere(self, Center=..., Radius=...)->IAcad3DSolid: ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...)->IAcadSpline: ...
    def AddTable(self, InsertionPoint=..., NumRows=...,
                 NumColumns=..., RowHeight=..., ColWidth=...)->IAcadTable: ...

    def AddText(self, TextString=..., InsertionPoint=..., Height=...)->IAcadText: ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...)->IAcadTolerance: ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...)->IAcad3DSolid: ...
    def AddTrace(self, PointsArray=...)->IAcadTrace: ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddXline(self, Point1=..., Point2=...)->IAcadXline: ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=...,
                                Xscale=..., Yscale=..., Zscale=..., Rotation=..., 
                                bOverlay=..., Password=...)->IAcadExternalReference: ...

    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=...,
                    Yscale=..., Zscale=..., Rotation=..., Password=...)->IAcadBlockReference: ...

    def Item(self, Index=...): ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BlockScaling(self): ...
    @property
    def Comments(self): ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Explodable(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def IsLayout(self): ...
    @property
    def IsXRef(self): ...
    @property
    def Layout(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def Units(self): ...
    @property
    def XRefDatabase(self) -> IAcadDatabase: ...
    @BlockScaling.setter
    def BlockScaling(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
    @Explodable.setter
    def Explodable(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @Units.setter
    def Units(self, value) -> None: ...


class IAcadBlockReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self)->IAcadBlockReference: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EffectiveName(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasAttributes(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsUnits(self): ...
    @property
    def InsUnitsFactor(self): ...
    @property
    def InsertionPoint(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def XEffectiveScaleFactor(self): ...
    @property
    def XScaleFactor(self): ...
    @property
    def YEffectiveScaleFactor(self): ...
    @property
    def YScaleFactor(self): ...
    @property
    def ZEffectiveScaleFactor(self): ...
    @property
    def ZScaleFactor(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @XEffectiveScaleFactor.setter
    def XEffectiveScaleFactor(self, value) -> None: ...
    @XScaleFactor.setter
    def XScaleFactor(self, value) -> None: ...
    @YEffectiveScaleFactor.setter
    def YEffectiveScaleFactor(self, value) -> None: ...
    @YScaleFactor.setter
    def YScaleFactor(self, value) -> None: ...
    @ZEffectiveScaleFactor.setter
    def ZEffectiveScaleFactor(self, value) -> None: ...
    @ZScaleFactor.setter
    def ZScaleFactor(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadBlocks(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, InsertionPoint=..., Name=...)->IAcadBlock: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadCircle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadCircle: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def Center(self): ...
    @property
    def Circumference(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Diameter(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Radius(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Area.setter
    def Area(self, value) -> None: ...
    @Center.setter
    def Center(self, value) -> None: ...
    @Circumference.setter
    def Circumference(self, value) -> None: ...
    @Diameter.setter
    def Diameter(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Radius.setter
    def Radius(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadComparedReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self)->IAcadComparedReference: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EffectiveName(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasAttributes(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsUnits(self): ...
    @property
    def InsUnitsFactor(self): ...
    @property
    def InsertionPoint(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def Layer(self): ...
    @property
    def LayerPropertyOverrides(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def XEffectiveScaleFactor(self): ...
    @property
    def XScaleFactor(self): ...
    @property
    def YEffectiveScaleFactor(self): ...
    @property
    def YScaleFactor(self): ...
    @property
    def ZEffectiveScaleFactor(self): ...
    @property
    def ZScaleFactor(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @XEffectiveScaleFactor.setter
    def XEffectiveScaleFactor(self, value) -> None: ...
    @XScaleFactor.setter
    def XScaleFactor(self, value) -> None: ...
    @YEffectiveScaleFactor.setter
    def YEffectiveScaleFactor(self, value) -> None: ...
    @YScaleFactor.setter
    def YScaleFactor(self, value) -> None: ...
    @ZEffectiveScaleFactor.setter
    def ZEffectiveScaleFactor(self, value) -> None: ...
    @ZScaleFactor.setter
    def ZScaleFactor(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDatabase(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyObjects(self, Objects=..., Owner=...): ...
    def HandleToObject(self, Handle=...): ...
    def ObjectIdToObject(self, ObjectID=...): ...
    def __iter__(self): ...
    @property
    def Blocks(self) -> IAcadBlocks: ...
    @property
    def Dictionaries(self): ...
    @property
    def DimStyles(self): ...
    @property
    def ElevationModelSpace(self): ...
    @property
    def ElevationPaperSpace(self): ...
    @property
    def Groups(self): ...
    @property
    def Layers(self): ...
    @property
    def Layouts(self): ...
    @property
    def Limits(self): ...
    @property
    def Linetypes(self): ...
    @property
    def Materials(self): ...
    @property
    def ModelSpace(self): ...
    @property
    def PaperSpace(self): ...
    @property
    def PlotConfigurations(self): ...
    @property
    def Preferences(self): ...
    @property
    def RegisteredApplications(self): ...
    @property
    def SectionManager(self): ...
    @property
    def SummaryInfo(self): ...
    @property
    def TextStyles(self): ...
    @property
    def UserCoordinateSystems(self): ...
    @property
    def Viewports(self): ...
    @property
    def Views(self): ...
    @ElevationModelSpace.setter
    def ElevationModelSpace(self, value) -> None: ...
    @ElevationPaperSpace.setter
    def ElevationPaperSpace(self, value) -> None: ...
    @Limits.setter
    def Limits(self, value) -> None: ...


class IAcadDatabasePreferences(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def AllowLongSymbolNames(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ContourLinesPerSurface(self): ...
    @property
    def DisplaySilhouette(self): ...
    @property
    def LineWeightDisplay(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaxActiveViewports(self): ...
    @property
    def OLELaunch(self): ...
    @property
    def ObjectSortByPSOutput(self): ...
    @property
    def ObjectSortByPlotting(self): ...
    @property
    def ObjectSortByRedraws(self): ...
    @property
    def ObjectSortByRegens(self): ...
    @property
    def ObjectSortBySelection(self): ...
    @property
    def ObjectSortBySnap(self): ...
    @property
    def RenderSmoothness(self): ...
    @property
    def SegmentPerPolyline(self): ...
    @property
    def SolidFill(self): ...
    @property
    def TextFrameDisplay(self): ...
    @property
    def XRefEdit(self): ...
    @property
    def XRefLayerVisibility(self): ...
    @AllowLongSymbolNames.setter
    def AllowLongSymbolNames(self, value) -> None: ...
    @ContourLinesPerSurface.setter
    def ContourLinesPerSurface(self, value) -> None: ...
    @DisplaySilhouette.setter
    def DisplaySilhouette(self, value) -> None: ...
    @LineWeightDisplay.setter
    def LineWeightDisplay(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaxActiveViewports.setter
    def MaxActiveViewports(self, value) -> None: ...
    @OLELaunch.setter
    def OLELaunch(self, value) -> None: ...
    @ObjectSortByPSOutput.setter
    def ObjectSortByPSOutput(self, value) -> None: ...
    @ObjectSortByPlotting.setter
    def ObjectSortByPlotting(self, value) -> None: ...
    @ObjectSortByRedraws.setter
    def ObjectSortByRedraws(self, value) -> None: ...
    @ObjectSortByRegens.setter
    def ObjectSortByRegens(self, value) -> None: ...
    @ObjectSortBySelection.setter
    def ObjectSortBySelection(self, value) -> None: ...
    @ObjectSortBySnap.setter
    def ObjectSortBySnap(self, value) -> None: ...
    @RenderSmoothness.setter
    def RenderSmoothness(self, value) -> None: ...
    @SegmentPerPolyline.setter
    def SegmentPerPolyline(self, value) -> None: ...
    @SolidFill.setter
    def SolidFill(self, value) -> None: ...
    @TextFrameDisplay.setter
    def TextFrameDisplay(self, value) -> None: ...
    @XRefEdit.setter
    def XRefEdit(self, value) -> None: ...
    @XRefLayerVisibility.setter
    def XRefLayerVisibility(self, value) -> None: ...


class IAcadDictionaries(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadDictionary(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddObject(self, Keyword=..., ObjectName=...): ...
    def AddXRecord(self, Keyword=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetName(self, Object=...): ...
    def GetObject(self, Name=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def Remove(self, Name=...): ...
    def Rename(self, OldName=..., NewName=...): ...
    def Replace(self, OldName=..., pObj=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @Name.setter
    def Name(self, value) -> None: ...


class IAcadDim3PointAngular(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDim3PointAngular: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AngleFormat(self): ...
    @property
    def AngleVertex(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimLineInside(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLine1EndPoint(self): ...
    @property
    def ExtLine1Linetype(self): ...
    @property
    def ExtLine1Suppress(self): ...
    @property
    def ExtLine2EndPoint(self): ...
    @property
    def ExtLine2Linetype(self): ...
    @property
    def ExtLine2Suppress(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineExtend(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HorizontalTextPosition(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrecision(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AngleFormat.setter
    def AngleFormat(self, value) -> None: ...
    @AngleVertex.setter
    def AngleVertex(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimLineInside.setter
    def DimLineInside(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLine1EndPoint.setter
    def ExtLine1EndPoint(self, value) -> None: ...
    @ExtLine1Linetype.setter
    def ExtLine1Linetype(self, value) -> None: ...
    @ExtLine1Suppress.setter
    def ExtLine1Suppress(self, value) -> None: ...
    @ExtLine2EndPoint.setter
    def ExtLine2EndPoint(self, value) -> None: ...
    @ExtLine2Linetype.setter
    def ExtLine2Linetype(self, value) -> None: ...
    @ExtLine2Suppress.setter
    def ExtLine2Suppress(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineExtend.setter
    def ExtensionLineExtend(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @HorizontalTextPosition.setter
    def HorizontalTextPosition(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrecision.setter
    def TextPrecision(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimAligned(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimAligned: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSubUnitsFactor(self): ...
    @property
    def AltSubUnitsSuffix(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimLineInside(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineExtend(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLine1Linetype(self): ...
    @property
    def ExtLine1Point(self): ...
    @property
    def ExtLine1Suppress(self): ...
    @property
    def ExtLine2Linetype(self): ...
    @property
    def ExtLine2Point(self): ...
    @property
    def ExtLine2Suppress(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineExtend(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HorizontalTextPosition(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SubUnitsFactor(self): ...
    @property
    def SubUnitsSuffix(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSubUnitsFactor.setter
    def AltSubUnitsFactor(self, value) -> None: ...
    @AltSubUnitsSuffix.setter
    def AltSubUnitsSuffix(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimLineInside.setter
    def DimLineInside(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineExtend.setter
    def DimensionLineExtend(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLine1Linetype.setter
    def ExtLine1Linetype(self, value) -> None: ...
    @ExtLine1Point.setter
    def ExtLine1Point(self, value) -> None: ...
    @ExtLine1Suppress.setter
    def ExtLine1Suppress(self, value) -> None: ...
    @ExtLine2Linetype.setter
    def ExtLine2Linetype(self, value) -> None: ...
    @ExtLine2Point.setter
    def ExtLine2Point(self, value) -> None: ...
    @ExtLine2Suppress.setter
    def ExtLine2Suppress(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineExtend.setter
    def ExtensionLineExtend(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @HorizontalTextPosition.setter
    def HorizontalTextPosition(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SubUnitsFactor.setter
    def SubUnitsFactor(self, value) -> None: ...
    @SubUnitsSuffix.setter
    def SubUnitsSuffix(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimAngular(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimAngular: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AngleFormat(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimLineInside(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLine1EndPoint(self): ...
    @property
    def ExtLine1Linetype(self): ...
    @property
    def ExtLine1StartPoint(self): ...
    @property
    def ExtLine1Suppress(self): ...
    @property
    def ExtLine2EndPoint(self): ...
    @property
    def ExtLine2Linetype(self): ...
    @property
    def ExtLine2StartPoint(self): ...
    @property
    def ExtLine2Suppress(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineExtend(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HorizontalTextPosition(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrecision(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AngleFormat.setter
    def AngleFormat(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimLineInside.setter
    def DimLineInside(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLine1EndPoint.setter
    def ExtLine1EndPoint(self, value) -> None: ...
    @ExtLine1Linetype.setter
    def ExtLine1Linetype(self, value) -> None: ...
    @ExtLine1StartPoint.setter
    def ExtLine1StartPoint(self, value) -> None: ...
    @ExtLine1Suppress.setter
    def ExtLine1Suppress(self, value) -> None: ...
    @ExtLine2EndPoint.setter
    def ExtLine2EndPoint(self, value) -> None: ...
    @ExtLine2Linetype.setter
    def ExtLine2Linetype(self, value) -> None: ...
    @ExtLine2StartPoint.setter
    def ExtLine2StartPoint(self, value) -> None: ...
    @ExtLine2Suppress.setter
    def ExtLine2Suppress(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineExtend.setter
    def ExtensionLineExtend(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @HorizontalTextPosition.setter
    def HorizontalTextPosition(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrecision.setter
    def TextPrecision(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimArcLength(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimAngular: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSubUnitsFactor(self): ...
    @property
    def AltSubUnitsSuffix(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArcEndParam(self): ...
    @property
    def ArcPoint(self): ...
    @property
    def ArcStartParam(self): ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def CenterPoint(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimLineInside(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineExtend(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLine1Linetype(self): ...
    @property
    def ExtLine1Point(self): ...
    @property
    def ExtLine1Suppress(self): ...
    @property
    def ExtLine2Linetype(self): ...
    @property
    def ExtLine2Point(self): ...
    @property
    def ExtLine2Suppress(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineExtend(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HasLeader(self): ...
    @property
    def HorizontalTextPosition(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def IsPartial(self): ...
    @property
    def Layer(self): ...
    @property
    def Leader1Point(self): ...
    @property
    def Leader2Point(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SubUnitsFactor(self): ...
    @property
    def SubUnitsSuffix(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def SymbolPosition(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSubUnitsFactor.setter
    def AltSubUnitsFactor(self, value) -> None: ...
    @AltSubUnitsSuffix.setter
    def AltSubUnitsSuffix(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @ArcEndParam.setter
    def ArcEndParam(self, value) -> None: ...
    @ArcPoint.setter
    def ArcPoint(self, value) -> None: ...
    @ArcStartParam.setter
    def ArcStartParam(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @CenterPoint.setter
    def CenterPoint(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimLineInside.setter
    def DimLineInside(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineExtend.setter
    def DimensionLineExtend(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLine1Linetype.setter
    def ExtLine1Linetype(self, value) -> None: ...
    @ExtLine1Point.setter
    def ExtLine1Point(self, value) -> None: ...
    @ExtLine1Suppress.setter
    def ExtLine1Suppress(self, value) -> None: ...
    @ExtLine2Linetype.setter
    def ExtLine2Linetype(self, value) -> None: ...
    @ExtLine2Point.setter
    def ExtLine2Point(self, value) -> None: ...
    @ExtLine2Suppress.setter
    def ExtLine2Suppress(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineExtend.setter
    def ExtensionLineExtend(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @HasLeader.setter
    def HasLeader(self, value) -> None: ...
    @HorizontalTextPosition.setter
    def HorizontalTextPosition(self, value) -> None: ...
    @IsPartial.setter
    def IsPartial(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Leader1Point.setter
    def Leader1Point(self, value) -> None: ...
    @Leader2Point.setter
    def Leader2Point(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SubUnitsFactor.setter
    def SubUnitsFactor(self, value) -> None: ...
    @SubUnitsSuffix.setter
    def SubUnitsSuffix(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @SymbolPosition.setter
    def SymbolPosition(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimDiametric(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimDiametric: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def CenterMarkSize(self): ...
    @property
    def CenterType(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @CenterMarkSize.setter
    def CenterMarkSize(self, value) -> None: ...
    @CenterType.setter
    def CenterType(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LeaderLength.setter
    def LeaderLength(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimOrdinate(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimOrdinate: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSubUnitsFactor(self): ...
    @property
    def AltSubUnitsSuffix(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowheadSize(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SubUnitsFactor(self): ...
    @property
    def SubUnitsSuffix(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSubUnitsFactor.setter
    def AltSubUnitsFactor(self, value) -> None: ...
    @AltSubUnitsSuffix.setter
    def AltSubUnitsSuffix(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SubUnitsFactor.setter
    def SubUnitsFactor(self, value) -> None: ...
    @SubUnitsSuffix.setter
    def SubUnitsSuffix(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimRadial(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimRadial: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowheadBlock(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def ArrowheadType(self): ...
    @property
    def CenterMarkSize(self): ...
    @property
    def CenterType(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLineSuppress(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @ArrowheadBlock.setter
    def ArrowheadBlock(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @ArrowheadType.setter
    def ArrowheadType(self, value) -> None: ...
    @CenterMarkSize.setter
    def CenterMarkSize(self, value) -> None: ...
    @CenterType.setter
    def CenterType(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLineSuppress.setter
    def DimLineSuppress(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LeaderLength.setter
    def LeaderLength(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimRadialLarge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimRadialLarge: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowheadBlock(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def ArrowheadType(self): ...
    @property
    def Center(self): ...
    @property
    def CenterMarkSize(self): ...
    @property
    def CenterType(self): ...
    @property
    def ChordPoint(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimLineSuppress(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def JogAngle(self): ...
    @property
    def JogLocation(self): ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OverrideCenter(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @ArrowheadBlock.setter
    def ArrowheadBlock(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @ArrowheadType.setter
    def ArrowheadType(self, value) -> None: ...
    @Center.setter
    def Center(self, value) -> None: ...
    @CenterMarkSize.setter
    def CenterMarkSize(self, value) -> None: ...
    @CenterType.setter
    def CenterType(self, value) -> None: ...
    @ChordPoint.setter
    def ChordPoint(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimLineSuppress.setter
    def DimLineSuppress(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @JogAngle.setter
    def JogAngle(self, value) -> None: ...
    @JogLocation.setter
    def JogLocation(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @OverrideCenter.setter
    def OverrideCenter(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimRotated(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimRotated: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AltRoundDistance(self): ...
    @property
    def AltSubUnitsFactor(self): ...
    @property
    def AltSubUnitsSuffix(self): ...
    @property
    def AltSuppressLeadingZeros(self): ...
    @property
    def AltSuppressTrailingZeros(self): ...
    @property
    def AltSuppressZeroFeet(self): ...
    @property
    def AltSuppressZeroInches(self): ...
    @property
    def AltTextPrefix(self): ...
    @property
    def AltTextSuffix(self): ...
    @property
    def AltTolerancePrecision(self): ...
    @property
    def AltToleranceSuppressLeadingZeros(self): ...
    @property
    def AltToleranceSuppressTrailingZeros(self): ...
    @property
    def AltToleranceSuppressZeroFeet(self): ...
    @property
    def AltToleranceSuppressZeroInches(self): ...
    @property
    def AltUnits(self): ...
    @property
    def AltUnitsFormat(self): ...
    @property
    def AltUnitsPrecision(self): ...
    @property
    def AltUnitsScale(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Arrowhead1Block(self): ...
    @property
    def Arrowhead1Type(self): ...
    @property
    def Arrowhead2Block(self): ...
    @property
    def Arrowhead2Type(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimConstrDesc(self): ...
    @property
    def DimConstrExpression(self): ...
    @property
    def DimConstrForm(self): ...
    @property
    def DimConstrName(self): ...
    @property
    def DimConstrReference(self): ...
    @property
    def DimConstrValue(self): ...
    @property
    def DimLine1Suppress(self): ...
    @property
    def DimLine2Suppress(self): ...
    @property
    def DimLineInside(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineExtend(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def DimensionLinetype(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def ExtLine1Linetype(self): ...
    @property
    def ExtLine1Suppress(self): ...
    @property
    def ExtLine2Linetype(self): ...
    @property
    def ExtLine2Suppress(self): ...
    @property
    def ExtLineFixedLen(self): ...
    @property
    def ExtLineFixedLenSuppress(self): ...
    @property
    def ExtensionLineColor(self): ...
    @property
    def ExtensionLineExtend(self): ...
    @property
    def ExtensionLineOffset(self): ...
    @property
    def ExtensionLineWeight(self): ...
    @property
    def Fit(self): ...
    @property
    def ForceLineInside(self): ...
    @property
    def FractionFormat(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HorizontalTextPosition(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LinearScaleFactor(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Measurement(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrimaryUnitsPrecision(self): ...
    @property
    def Rotation(self): ...
    @property
    def RoundDistance(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SubUnitsFactor(self): ...
    @property
    def SubUnitsSuffix(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def SuppressZeroFeet(self): ...
    @property
    def SuppressZeroInches(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextInside(self): ...
    @property
    def TextInsideAlign(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOutsideAlign(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceSuppressZeroFeet(self): ...
    @property
    def ToleranceSuppressZeroInches(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnitsFormat(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AltRoundDistance.setter
    def AltRoundDistance(self, value) -> None: ...
    @AltSubUnitsFactor.setter
    def AltSubUnitsFactor(self, value) -> None: ...
    @AltSubUnitsSuffix.setter
    def AltSubUnitsSuffix(self, value) -> None: ...
    @AltSuppressLeadingZeros.setter
    def AltSuppressLeadingZeros(self, value) -> None: ...
    @AltSuppressTrailingZeros.setter
    def AltSuppressTrailingZeros(self, value) -> None: ...
    @AltSuppressZeroFeet.setter
    def AltSuppressZeroFeet(self, value) -> None: ...
    @AltSuppressZeroInches.setter
    def AltSuppressZeroInches(self, value) -> None: ...
    @AltTextPrefix.setter
    def AltTextPrefix(self, value) -> None: ...
    @AltTextSuffix.setter
    def AltTextSuffix(self, value) -> None: ...
    @AltTolerancePrecision.setter
    def AltTolerancePrecision(self, value) -> None: ...
    @AltToleranceSuppressLeadingZeros.setter
    def AltToleranceSuppressLeadingZeros(self, value) -> None: ...
    @AltToleranceSuppressTrailingZeros.setter
    def AltToleranceSuppressTrailingZeros(self, value) -> None: ...
    @AltToleranceSuppressZeroFeet.setter
    def AltToleranceSuppressZeroFeet(self, value) -> None: ...
    @AltToleranceSuppressZeroInches.setter
    def AltToleranceSuppressZeroInches(self, value) -> None: ...
    @AltUnits.setter
    def AltUnits(self, value) -> None: ...
    @AltUnitsFormat.setter
    def AltUnitsFormat(self, value) -> None: ...
    @AltUnitsPrecision.setter
    def AltUnitsPrecision(self, value) -> None: ...
    @AltUnitsScale.setter
    def AltUnitsScale(self, value) -> None: ...
    @Arrowhead1Block.setter
    def Arrowhead1Block(self, value) -> None: ...
    @Arrowhead1Type.setter
    def Arrowhead1Type(self, value) -> None: ...
    @Arrowhead2Block.setter
    def Arrowhead2Block(self, value) -> None: ...
    @Arrowhead2Type.setter
    def Arrowhead2Type(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimConstrDesc.setter
    def DimConstrDesc(self, value) -> None: ...
    @DimConstrExpression.setter
    def DimConstrExpression(self, value) -> None: ...
    @DimConstrForm.setter
    def DimConstrForm(self, value) -> None: ...
    @DimConstrName.setter
    def DimConstrName(self, value) -> None: ...
    @DimConstrReference.setter
    def DimConstrReference(self, value) -> None: ...
    @DimConstrValue.setter
    def DimConstrValue(self, value) -> None: ...
    @DimLine1Suppress.setter
    def DimLine1Suppress(self, value) -> None: ...
    @DimLine2Suppress.setter
    def DimLine2Suppress(self, value) -> None: ...
    @DimLineInside.setter
    def DimLineInside(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineExtend.setter
    def DimensionLineExtend(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @DimensionLinetype.setter
    def DimensionLinetype(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @ExtLine1Linetype.setter
    def ExtLine1Linetype(self, value) -> None: ...
    @ExtLine1Suppress.setter
    def ExtLine1Suppress(self, value) -> None: ...
    @ExtLine2Linetype.setter
    def ExtLine2Linetype(self, value) -> None: ...
    @ExtLine2Suppress.setter
    def ExtLine2Suppress(self, value) -> None: ...
    @ExtLineFixedLen.setter
    def ExtLineFixedLen(self, value) -> None: ...
    @ExtLineFixedLenSuppress.setter
    def ExtLineFixedLenSuppress(self, value) -> None: ...
    @ExtensionLineColor.setter
    def ExtensionLineColor(self, value) -> None: ...
    @ExtensionLineExtend.setter
    def ExtensionLineExtend(self, value) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value) -> None: ...
    @ExtensionLineWeight.setter
    def ExtensionLineWeight(self, value) -> None: ...
    @Fit.setter
    def Fit(self, value) -> None: ...
    @ForceLineInside.setter
    def ForceLineInside(self, value) -> None: ...
    @FractionFormat.setter
    def FractionFormat(self, value) -> None: ...
    @HorizontalTextPosition.setter
    def HorizontalTextPosition(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LinearScaleFactor.setter
    def LinearScaleFactor(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @PrimaryUnitsPrecision.setter
    def PrimaryUnitsPrecision(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RoundDistance.setter
    def RoundDistance(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SubUnitsFactor.setter
    def SubUnitsFactor(self, value) -> None: ...
    @SubUnitsSuffix.setter
    def SubUnitsSuffix(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @SuppressZeroFeet.setter
    def SuppressZeroFeet(self, value) -> None: ...
    @SuppressZeroInches.setter
    def SuppressZeroInches(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextInside.setter
    def TextInside(self, value) -> None: ...
    @TextInsideAlign.setter
    def TextInsideAlign(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOutsideAlign.setter
    def TextOutsideAlign(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceSuppressZeroFeet.setter
    def ToleranceSuppressZeroFeet(self, value) -> None: ...
    @ToleranceSuppressZeroInches.setter
    def ToleranceSuppressZeroInches(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnitsFormat.setter
    def UnitsFormat(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDimStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, StyleSource=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @Name.setter
    def Name(self, value) -> None: ...


class IAcadDimStyles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadDimension(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadDimension: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DecimalSeparator(self): ...
    @property
    def DimTxtDirection(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def SuppressLeadingZeros(self): ...
    @property
    def SuppressTrailingZeros(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextFill(self): ...
    @property
    def TextFillColor(self): ...
    @property
    def TextGap(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextMovement(self): ...
    @property
    def TextOverride(self): ...
    @property
    def TextPosition(self): ...
    @property
    def TextPrefix(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextSuffix(self): ...
    @property
    def ToleranceDisplay(self): ...
    @property
    def ToleranceHeightScale(self): ...
    @property
    def ToleranceJustification(self): ...
    @property
    def ToleranceLowerLimit(self): ...
    @property
    def TolerancePrecision(self): ...
    @property
    def ToleranceSuppressLeadingZeros(self): ...
    @property
    def ToleranceSuppressTrailingZeros(self): ...
    @property
    def ToleranceUpperLimit(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value) -> None: ...
    @DimTxtDirection.setter
    def DimTxtDirection(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @SuppressLeadingZeros.setter
    def SuppressLeadingZeros(self, value) -> None: ...
    @SuppressTrailingZeros.setter
    def SuppressTrailingZeros(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextFill.setter
    def TextFill(self, value) -> None: ...
    @TextFillColor.setter
    def TextFillColor(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextMovement.setter
    def TextMovement(self, value) -> None: ...
    @TextOverride.setter
    def TextOverride(self, value) -> None: ...
    @TextPosition.setter
    def TextPosition(self, value) -> None: ...
    @TextPrefix.setter
    def TextPrefix(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextSuffix.setter
    def TextSuffix(self, value) -> None: ...
    @ToleranceDisplay.setter
    def ToleranceDisplay(self, value) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value) -> None: ...
    @ToleranceJustification.setter
    def ToleranceJustification(self, value) -> None: ...
    @ToleranceLowerLimit.setter
    def ToleranceLowerLimit(self, value) -> None: ...
    @TolerancePrecision.setter
    def TolerancePrecision(self, value) -> None: ...
    @ToleranceSuppressLeadingZeros.setter
    def ToleranceSuppressLeadingZeros(self, value) -> None: ...
    @ToleranceSuppressTrailingZeros.setter
    def ToleranceSuppressTrailingZeros(self, value) -> None: ...
    @ToleranceUpperLimit.setter
    def ToleranceUpperLimit(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDocument(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Activate(self): ...
    def AuditInfo(self, FixErr=...): ...
    def Close(self, SaveChanges=..., FileName=...): ...
    def CopyObjects(self, Objects=..., Owner=...): ...
    def EndUndoMark(self): ...
    def Export(self, FileName=..., Extension=..., SelectionSet=...): ...
    def GetVariable(self, Name=...): ...
    def HandleToObject(self, Handle=...): ...
    def Import(self, FileName=..., InsertionPoint=..., ScaleFactor=...): ...
    def LoadShapeFile(self, FullName=...): ...
    def New(self, TemplateFileName=...)->IAcadDocument: ...
    def ObjectIdToObject(self, ObjectID=...): ...
    def Open(self, FullName=..., Password=...)->IAcadDocument: ...
    def PostCommand(self, Command=...): ...
    def PurgeAll(self): ...
    def Regen(self, WhichViewports=...): ...
    def Save(self): ...
    def SaveAs(self, FullFileName=..., SaveAsType=...,
               vSecurityParams=...): ...

    def SendCommand(self, Command=...): ...
    def SetVariable(self, Name=..., Value=...): ...
    def StartUndoMark(self): ...
    def Wblock(self, FileName=..., SelectionSet=...): ...
    def __iter__(self): ...
    @property
    def Active(self): ...
    @property
    def ActiveDimStyle(self) -> IAcadDimStyle: ...
    @property
    def ActiveLayer(self) -> IAcadLayer: ...
    @property
    def ActiveLayout(self) -> IAcadLayout: ...
    @property
    def ActiveLinetype(self) -> IAcadLineType: ...
    @property
    def ActiveMaterial(self) -> IAcadMaterial: ...
    @property
    def ActivePViewport(self) -> IAcadPViewport: ...
    @property
    def ActiveSelectionSet(self) -> IAcadSelectionSet: ...
    @property
    def ActiveSpace(self): ...
    @property
    def ActiveTextStyle(self) -> IAcadTextStyle: ...
    @property
    def ActiveUCS(self) -> IAcadUCS: ...
    @property
    def ActiveViewport(self) -> IAcadViewport: ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Blocks(self) -> IAcadBlocks: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Dictionaries(self) -> IAcadDictionaries: ...
    @property
    def DimStyles(self) -> IAcadDimStyles: ...
    @property
    def ElevationModelSpace(self): ...
    @property
    def ElevationPaperSpace(self): ...
    @property
    def FullName(self): ...
    @property
    def Groups(self) -> IAcadGroups: ...
    @property
    def HWND(self): ...
    @property
    def Height(self): ...
    @property
    def Layers(self) -> IAcadLayers: ...
    @property
    def Layouts(self) -> IAcadLayouts: ...
    @property
    def Limits(self): ...
    @property
    def Linetypes(self) -> IAcadLineTypes: ...
    @property
    def MSpace(self): ...
    @property
    def Materials(self) -> IAcadMaterials: ...
    @property
    def ModelSpace(self) -> IAcadModelSpace: ...
    @property
    def Name(self): ...
    @property
    def ObjectSnapMode(self): ...
    @property
    def PaperSpace(self) -> IAcadPaperSpace: ...
    @property
    def Path(self): ...
    @property
    def PickfirstSelectionSet(self) -> IAcadSelectionSet: ...
    @property
    def Plot(self) -> IAcadPlot: ...
    @property
    def PlotConfigurations(self) -> IAcadPlotConfigurations: ...
    @property
    def Preferences(self) -> IAcadDatabasePreferences: ...
    @property
    def ReadOnly(self): ...
    @property
    def RegisteredApplications(self) -> IAcadRegisteredApplications: ...
    @property
    def Saved(self): ...
    @property
    def SectionManager(self) -> IAcadSectionManager: ...
    @property
    def SelectionSets(self) -> IAcadSelectionSets: ...
    @property
    def SummaryInfo(self) -> IAcadSummaryInfo: ...
    @property
    def TextStyles(self) -> IAcadTextStyles: ...
    @property
    def UserCoordinateSystems(self) -> IAcadUCSs: ...
    @property
    def Utility(self) -> IAcadUtility: ...
    @property
    def Viewports(self) -> IAcadViewports: ...
    @property
    def Views(self) -> IAcadViews: ...
    @property
    def Width(self): ...
    @property
    def WindowState(self): ...
    @property
    def WindowTitle(self): ...
    @ActiveDimStyle.setter
    def ActiveDimStyle(self, value) -> None: ...
    @ActiveLayer.setter
    def ActiveLayer(self, value) -> None: ...
    @ActiveLayout.setter
    def ActiveLayout(self, value) -> None: ...
    @ActiveLinetype.setter
    def ActiveLinetype(self, value) -> None: ...
    @ActiveMaterial.setter
    def ActiveMaterial(self, value) -> None: ...
    @ActivePViewport.setter
    def ActivePViewport(self, value) -> None: ...
    @ActiveSpace.setter
    def ActiveSpace(self, value) -> None: ...
    @ActiveTextStyle.setter
    def ActiveTextStyle(self, value) -> None: ...
    @ActiveUCS.setter
    def ActiveUCS(self, value) -> None: ...
    @ActiveViewport.setter
    def ActiveViewport(self, value) -> None: ...
    @ElevationModelSpace.setter
    def ElevationModelSpace(self, value) -> None: ...
    @ElevationPaperSpace.setter
    def ElevationPaperSpace(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @Limits.setter
    def Limits(self, value) -> None: ...
    @MSpace.setter
    def MSpace(self, value) -> None: ...
    @ObjectSnapMode.setter
    def ObjectSnapMode(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @WindowState.setter
    def WindowState(self, value) -> None: ...


class IAcadDocuments(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, TemplateName=...)->IAcadDocument: ...
    def Close(self): ...
    def Item(self, Index=...)->IAcadDocument: ...
    def Open(self, Name=..., ReadOnly=..., Password=...)->IAcadDocument: ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...


class IAcadDwfUnderlay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClipBoundary(self, boundry=...): ...
    def Copy(self)->IAcadDwfUnderlay: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AdjustForBackground(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ClippingEnabled(self): ...
    @property
    def Contrast(self): ...
    @property
    def DWFFormat(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fade(self): ...
    @property
    def File(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ItemName(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Monochrome(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Position(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnderlayLayerOverrideApplied(self): ...
    @property
    def UnderlayName(self): ...
    @property
    def UnderlayVisibility(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @AdjustForBackground.setter
    def AdjustForBackground(self, value) -> None: ...
    @ClippingEnabled.setter
    def ClippingEnabled(self, value) -> None: ...
    @Contrast.setter
    def Contrast(self, value) -> None: ...
    @DWFFormat.setter
    def DWFFormat(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fade.setter
    def Fade(self, value) -> None: ...
    @File.setter
    def File(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @ItemName.setter
    def ItemName(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Monochrome.setter
    def Monochrome(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Position.setter
    def Position(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnderlayLayerOverrideApplied.setter
    def UnderlayLayerOverrideApplied(self, value) -> None: ...
    @UnderlayName.setter
    def UnderlayName(self, value) -> None: ...
    @UnderlayVisibility.setter
    def UnderlayVisibility(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadDynamicBlockReferenceProperty(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    @property
    def AllowedValues(self): ...
    @property
    def Description(self): ...
    @property
    def PropertyName(self): ...
    @property
    def ReadOnly(self): ...
    @property
    def UnitsType(self): ...
    @property
    def Value(self): ...
    @property
    def show(self): ...
    @Value.setter
    def Value(self, value) -> None: ...


class IAcadEllipse(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadEllipse: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def Center(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EndAngle(self): ...
    @property
    def EndParameter(self): ...
    @property
    def EndPoint(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MajorAxis(self): ...
    @property
    def MajorRadius(self): ...
    @property
    def Material(self): ...
    @property
    def MinorAxis(self): ...
    @property
    def MinorRadius(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def RadiusRatio(self): ...
    @property
    def StartAngle(self): ...
    @property
    def StartParameter(self): ...
    @property
    def StartPoint(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Center.setter
    def Center(self, value) -> None: ...
    @EndAngle.setter
    def EndAngle(self, value) -> None: ...
    @EndParameter.setter
    def EndParameter(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MajorAxis.setter
    def MajorAxis(self, value) -> None: ...
    @MajorRadius.setter
    def MajorRadius(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @MinorRadius.setter
    def MinorRadius(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @RadiusRatio.setter
    def RadiusRatio(self, value) -> None: ...
    @StartAngle.setter
    def StartAngle(self, value) -> None: ...
    @StartParameter.setter
    def StartParameter(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadEntity(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadEntity: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadExternalReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self)->IAcadExternalReference: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EffectiveName(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasAttributes(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsUnits(self): ...
    @property
    def InsUnitsFactor(self): ...
    @property
    def InsertionPoint(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def Layer(self): ...
    @property
    def LayerPropertyOverrides(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def XEffectiveScaleFactor(self): ...
    @property
    def XScaleFactor(self): ...
    @property
    def YEffectiveScaleFactor(self): ...
    @property
    def YScaleFactor(self): ...
    @property
    def ZEffectiveScaleFactor(self): ...
    @property
    def ZScaleFactor(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @XEffectiveScaleFactor.setter
    def XEffectiveScaleFactor(self, value) -> None: ...
    @XScaleFactor.setter
    def XScaleFactor(self, value) -> None: ...
    @YEffectiveScaleFactor.setter
    def YEffectiveScaleFactor(self, value) -> None: ...
    @YScaleFactor.setter
    def YScaleFactor(self, value) -> None: ...
    @ZEffectiveScaleFactor.setter
    def ZEffectiveScaleFactor(self, value) -> None: ...
    @ZScaleFactor.setter
    def ZScaleFactor(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadExtrudedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadExtrudedSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Direction(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TaperAngle(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TaperAngle.setter
    def TaperAngle(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadGeoPositionMarker(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadGeoPositionMarker: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Altitude(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BackgroundFill(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def DrawingDirection(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def LandingGap(self): ...
    @property
    def Latitude(self): ...
    @property
    def Layer(self): ...
    @property
    def LineSpacingDistance(self): ...
    @property
    def LineSpacingFactor(self): ...
    @property
    def LineSpacingStyle(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Longitude(self): ...
    @property
    def Material(self): ...
    @property
    def Notes(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Position(self): ...
    @property
    def Radius(self): ...
    @property
    def Rotation(self): ...
    @property
    def TextFrameDisplay(self): ...
    @property
    def TextJustify(self): ...
    @property
    def TextString(self): ...
    @property
    def TextStyleName(self): ...
    @property
    def TextWidth(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Altitude.setter
    def Altitude(self, value) -> None: ...
    @BackgroundFill.setter
    def BackgroundFill(self, value) -> None: ...
    @DrawingDirection.setter
    def DrawingDirection(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @LandingGap.setter
    def LandingGap(self, value) -> None: ...
    @Latitude.setter
    def Latitude(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LineSpacingDistance.setter
    def LineSpacingDistance(self, value) -> None: ...
    @LineSpacingFactor.setter
    def LineSpacingFactor(self, value) -> None: ...
    @LineSpacingStyle.setter
    def LineSpacingStyle(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Longitude.setter
    def Longitude(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Notes.setter
    def Notes(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Position.setter
    def Position(self, value) -> None: ...
    @Radius.setter
    def Radius(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @TextFrameDisplay.setter
    def TextFrameDisplay(self, value) -> None: ...
    @TextJustify.setter
    def TextJustify(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @TextStyleName.setter
    def TextStyleName(self, value) -> None: ...
    @TextWidth.setter
    def TextWidth(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadGeomapImage(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClipBoundary(self, boundry=...): ...
    def Copy(self)->IAcadGeomapImage: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Brightness(self): ...
    @property
    def ClippingEnabled(self): ...
    @property
    def Contrast(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fade(self): ...
    @property
    def GeoImageBrightness(self): ...
    @property
    def GeoImageContrast(self): ...
    @property
    def GeoImageFade(self): ...
    @property
    def GeoImageHeight(self): ...
    @property
    def GeoImagePosition(self): ...
    @property
    def GeoImageWidth(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ImageFile(self): ...
    @property
    def ImageHeight(self): ...
    @property
    def ImageVisibility(self): ...
    @property
    def ImageWidth(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def ShowRotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @property
    def transparency(self): ...
    @Brightness.setter
    def Brightness(self, value) -> None: ...
    @ClippingEnabled.setter
    def ClippingEnabled(self, value) -> None: ...
    @Contrast.setter
    def Contrast(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fade.setter
    def Fade(self, value) -> None: ...
    @GeoImageBrightness.setter
    def GeoImageBrightness(self, value) -> None: ...
    @GeoImageContrast.setter
    def GeoImageContrast(self, value) -> None: ...
    @GeoImageFade.setter
    def GeoImageFade(self, value) -> None: ...
    @ImageFile.setter
    def ImageFile(self, value) -> None: ...
    @ImageHeight.setter
    def ImageHeight(self, value) -> None: ...
    @ImageVisibility.setter
    def ImageVisibility(self, value) -> None: ...
    @ImageWidth.setter
    def ImageWidth(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @ShowRotation.setter
    def ShowRotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @transparency.setter
    def transparency(self, value) -> None: ...


class IAcadGroup(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendItems(self, Objects=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def Item(self, Index=...): ...
    def RemoveItems(self, Objects=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Update(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadGroups(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadHatch(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendInnerLoop(self, ObjectArray=...): ...
    def AppendOuterLoop(self, ObjectArray=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadHatch: ...
    def Delete(self): ...
    def Erase(self): ...
    def Evaluate(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetLoopAt(self, Index=..., ObjectArray=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def InsertLoopAt(self, Index=..., LoopType=..., ObjectArray=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetPattern(self, PatternType=..., PatternName=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def AssociativeHatch(self): ...
    @property
    def BackgroundColor(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Elevation(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def GradientAngle(self): ...
    @property
    def GradientCentered(self): ...
    @property
    def GradientColor1(self): ...
    @property
    def GradientColor2(self): ...
    @property
    def GradientName(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HatchObjectType(self): ...
    @property
    def HatchStyle(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ISOPenWidth(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def NumberOfLoops(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PatternAngle(self): ...
    @property
    def PatternDouble(self): ...
    @property
    def PatternName(self): ...
    @property
    def PatternScale(self): ...
    @property
    def PatternSpace(self): ...
    @property
    def PatternType(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @AssociativeHatch.setter
    def AssociativeHatch(self, value) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value) -> None: ...
    @Elevation.setter
    def Elevation(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @GradientAngle.setter
    def GradientAngle(self, value) -> None: ...
    @GradientCentered.setter
    def GradientCentered(self, value) -> None: ...
    @GradientColor1.setter
    def GradientColor1(self, value) -> None: ...
    @GradientColor2.setter
    def GradientColor2(self, value) -> None: ...
    @GradientName.setter
    def GradientName(self, value) -> None: ...
    @HatchObjectType.setter
    def HatchObjectType(self, value) -> None: ...
    @HatchStyle.setter
    def HatchStyle(self, value) -> None: ...
    @ISOPenWidth.setter
    def ISOPenWidth(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @PatternAngle.setter
    def PatternAngle(self, value) -> None: ...
    @PatternDouble.setter
    def PatternDouble(self, value) -> None: ...
    @PatternScale.setter
    def PatternScale(self, value) -> None: ...
    @PatternSpace.setter
    def PatternSpace(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadHelix(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadHelix: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BaseRadius(self): ...
    @property
    def Constrain(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Position(self): ...
    @property
    def TopRadius(self): ...
    @property
    def TotalLength(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def TurnHeight(self): ...
    @property
    def TurnSlope(self): ...
    @property
    def Turns(self): ...
    @property
    def Twist(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @BaseRadius.setter
    def BaseRadius(self, value) -> None: ...
    @Constrain.setter
    def Constrain(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Position.setter
    def Position(self, value) -> None: ...
    @TopRadius.setter
    def TopRadius(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @TurnHeight.setter
    def TurnHeight(self, value) -> None: ...
    @Turns.setter
    def Turns(self, value) -> None: ...
    @Twist.setter
    def Twist(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadHyperlink(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def URL(self): ...
    @property
    def URLDescription(self): ...
    @property
    def URLNamedLocation(self): ...
    @URL.setter
    def URL(self, value) -> None: ...
    @URLDescription.setter
    def URLDescription(self, value) -> None: ...
    @URLNamedLocation.setter
    def URLNamedLocation(self, value) -> None: ...


class IAcadHyperlinks(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=..., Description=..., NamedLocation=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...


class IAcadIdPair(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def IsCloned(self): ...
    @property
    def IsOwnerXlated(self): ...
    @property
    def IsPrimary(self): ...
    @property
    def Value(self): ...
    @property
    def key(self): ...


class IAcadLWPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, Index=..., vertex=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadLWPolyline: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBulge(self, Index=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBulge(self, Index=..., bulge=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def Closed(self): ...
    @property
    def ConstantWidth(self): ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Elevation(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeGeneration(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Closed.setter
    def Closed(self, value) -> None: ...
    @ConstantWidth.setter
    def ConstantWidth(self, value) -> None: ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @Elevation.setter
    def Elevation(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeGeneration.setter
    def LinetypeGeneration(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadLayer(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Description(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Freeze(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def LayerOn(self): ...
    @property
    def Linetype(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Lock(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Plottable(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Used(self): ...
    @property
    def ViewportDefault(self): ...
    @property
    def color(self): ...
    @Description.setter
    def Description(self, value) -> None: ...
    @Freeze.setter
    def Freeze(self, value) -> None: ...
    @LayerOn.setter
    def LayerOn(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Lock.setter
    def Lock(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Plottable.setter
    def Plottable(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @ViewportDefault.setter
    def ViewportDefault(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadLayerStateManager(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self, bsName=...): ...
    def Export(self, bsName=..., bsFilename=...): ...
    def Import(self, bsFilename=...): ...
    def Mask(self, bsName=...): ...
    def Rename(self, bsName=..., bsNewName=...): ...
    def Restore(self, bsName=...): ...
    def Save(self, bsName=..., eMask=...): ...
    def SetDatabase(self, iHostDb=...): ...
    def SetMask(self, bsName=..., arg1=...): ...
    def __iter__(self): ...


class IAcadLayers(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateUsageData(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadLayout(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, pPlotConfig=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetCanonicalMediaNames(self): ...
    def GetCustomScale(self, Numerator=..., Denominator=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetLocaleMediaName(self, Name=...): ...
    def GetPaperMargins(self, LowerLeft=..., UpperRight=...): ...
    def GetPaperSize(self, Width=..., Height=...): ...
    def GetPlotDeviceNames(self): ...
    def GetPlotStyleTableNames(self): ...
    def GetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RefreshPlotDeviceInfo(self): ...
    def SetCustomScale(self, Numerator=..., Denominator=...): ...
    def SetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Block(self): ...
    @property
    def CanonicalMediaName(self): ...
    @property
    def CenterPlot(self): ...
    @property
    def ConfigName(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ModelType(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PaperUnits(self): ...
    @property
    def PlotHidden(self): ...
    @property
    def PlotOrigin(self): ...
    @property
    def PlotRotation(self): ...
    @property
    def PlotType(self): ...
    @property
    def PlotViewportBorders(self): ...
    @property
    def PlotViewportsFirst(self): ...
    @property
    def PlotWithLineweights(self): ...
    @property
    def PlotWithPlotStyles(self): ...
    @property
    def ScaleLineweights(self): ...
    @property
    def ShowPlotStyles(self): ...
    @property
    def StandardScale(self): ...
    @property
    def StyleSheet(self): ...
    @property
    def TabOrder(self): ...
    @property
    def UseStandardScale(self): ...
    @property
    def ViewToPlot(self): ...
    @CanonicalMediaName.setter
    def CanonicalMediaName(self, value) -> None: ...
    @CenterPlot.setter
    def CenterPlot(self, value) -> None: ...
    @ConfigName.setter
    def ConfigName(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PaperUnits.setter
    def PaperUnits(self, value) -> None: ...
    @PlotHidden.setter
    def PlotHidden(self, value) -> None: ...
    @PlotOrigin.setter
    def PlotOrigin(self, value) -> None: ...
    @PlotRotation.setter
    def PlotRotation(self, value) -> None: ...
    @PlotType.setter
    def PlotType(self, value) -> None: ...
    @PlotViewportBorders.setter
    def PlotViewportBorders(self, value) -> None: ...
    @PlotViewportsFirst.setter
    def PlotViewportsFirst(self, value) -> None: ...
    @PlotWithLineweights.setter
    def PlotWithLineweights(self, value) -> None: ...
    @PlotWithPlotStyles.setter
    def PlotWithPlotStyles(self, value) -> None: ...
    @ScaleLineweights.setter
    def ScaleLineweights(self, value) -> None: ...
    @ShowPlotStyles.setter
    def ShowPlotStyles(self, value) -> None: ...
    @StandardScale.setter
    def StandardScale(self, value) -> None: ...
    @StyleSheet.setter
    def StyleSheet(self, value) -> None: ...
    @TabOrder.setter
    def TabOrder(self, value) -> None: ...
    @UseStandardScale.setter
    def UseStandardScale(self, value) -> None: ...
    @ViewToPlot.setter
    def ViewToPlot(self, value) -> None: ...


class IAcadLayouts(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadLeader: ...
    def Delete(self): ...
    def Erase(self): ...
    def Evaluate(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Annotation(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowheadBlock(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def ArrowheadType(self): ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DimensionLineWeight(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TextGap(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Type(self): ...
    @property
    def VerticalTextPosition(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Annotation.setter
    def Annotation(self, value) -> None: ...
    @ArrowheadBlock.setter
    def ArrowheadBlock(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @ArrowheadType.setter
    def ArrowheadType(self, value) -> None: ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DimensionLineWeight.setter
    def DimensionLineWeight(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TextGap.setter
    def TextGap(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Type.setter
    def Type(self, value) -> None: ...
    @VerticalTextPosition.setter
    def VerticalTextPosition(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadLine(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadLine: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Angle(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Delta(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EndPoint(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def StartPoint(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @EndPoint.setter
    def EndPoint(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @StartPoint.setter
    def StartPoint(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadLineType(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Description(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...

    @Description.setter
    def Description(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...


class IAcadLineTypes(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def Load(self, Name=..., FileName=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadLoftedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadLoftedSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Closed(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EndDraftAngle(self): ...
    @property
    def EndDraftMagnitude(self): ...
    @property
    def EndSmoothContinuity(self): ...
    @property
    def EndSmoothMagnitude(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def NumCrossSections(self): ...
    @property
    def NumGuidePaths(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Periodic(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def StartDraftAngle(self): ...
    @property
    def StartDraftMagnitude(self): ...
    @property
    def StartSmoothContinuity(self): ...
    @property
    def StartSmoothMagnitude(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceNormals(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @Closed.setter
    def Closed(self, value) -> None: ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EndDraftAngle.setter
    def EndDraftAngle(self, value) -> None: ...
    @EndDraftMagnitude.setter
    def EndDraftMagnitude(self, value) -> None: ...
    @EndSmoothContinuity.setter
    def EndSmoothContinuity(self, value) -> None: ...
    @EndSmoothMagnitude.setter
    def EndSmoothMagnitude(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Periodic.setter
    def Periodic(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @StartDraftAngle.setter
    def StartDraftAngle(self, value) -> None: ...
    @StartDraftMagnitude.setter
    def StartDraftMagnitude(self, value) -> None: ...
    @StartSmoothContinuity.setter
    def StartSmoothContinuity(self, value) -> None: ...
    @StartSmoothMagnitude.setter
    def StartSmoothMagnitude(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @SurfaceNormals.setter
    def SurfaceNormals(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMInsertBlock(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self)->IAcadMInsertBlock: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self)->tuple[IAcadAttributeReference]: ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ColumnSpacing(self): ...
    @property
    def Columns(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EffectiveName(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasAttributes(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsUnits(self): ...
    @property
    def InsUnitsFactor(self): ...
    @property
    def InsertionPoint(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def RowSpacing(self): ...
    @property
    def Rows(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def XEffectiveScaleFactor(self): ...
    @property
    def XScaleFactor(self): ...
    @property
    def YEffectiveScaleFactor(self): ...
    @property
    def YScaleFactor(self): ...
    @property
    def ZEffectiveScaleFactor(self): ...
    @property
    def ZScaleFactor(self): ...
    @property
    def color(self): ...
    @ColumnSpacing.setter
    def ColumnSpacing(self, value) -> None: ...
    @Columns.setter
    def Columns(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @RowSpacing.setter
    def RowSpacing(self, value) -> None: ...
    @Rows.setter
    def Rows(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @XEffectiveScaleFactor.setter
    def XEffectiveScaleFactor(self, value) -> None: ...
    @XScaleFactor.setter
    def XScaleFactor(self, value) -> None: ...
    @YEffectiveScaleFactor.setter
    def YEffectiveScaleFactor(self, value) -> None: ...
    @YScaleFactor.setter
    def YScaleFactor(self, value) -> None: ...
    @ZEffectiveScaleFactor.setter
    def ZEffectiveScaleFactor(self, value) -> None: ...
    @ZScaleFactor.setter
    def ZScaleFactor(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddLeader(self): ...
    def AddLeaderLine(self, leaderIndex=..., pointArray=...): ...
    def AddLeaderLineEx(self, pointArray=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadMLeader: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBlockAttributeValue(self, attdefId=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetDoglegDirection(self, leaderIndex=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetLeaderIndex(self, leaderLineIndex=...): ...
    def GetLeaderLineIndexes(self, leaderIndex=...): ...
    def GetLeaderLineVertices(self, leaderLineIndex=...): ...
    def GetVertexCount(self, leaderLineIndex=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveLeader(self, leaderIndex=...): ...
    def RemoveLeaderLine(self, leaderLineIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBlockAttributeValue(self, attdefId=..., Value=...): ...
    def SetDoglegDirection(self, leaderIndex=..., dirVec=...): ...
    def SetLeaderLineVertices(self, leaderLineIndex=..., pointArray=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowheadBlock(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def ArrowheadType(self): ...
    @property
    def BlockConnectionType(self): ...
    @property
    def BlockScale(self): ...
    @property
    def ContentBlockName(self): ...
    @property
    def ContentBlockType(self): ...
    @property
    def ContentType(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def DogLegged(self): ...
    @property
    def DoglegLength(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def LandingGap(self): ...
    @property
    def Layer(self): ...
    @property
    def LeaderCount(self): ...
    @property
    def LeaderLineColor(self): ...
    @property
    def LeaderLineWeight(self): ...
    @property
    def LeaderLinetype(self): ...
    @property
    def LeaderType(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TextAttachmentDirection(self): ...
    @property
    def TextBackgroundFill(self): ...
    @property
    def TextBottomAttachmentType(self): ...
    @property
    def TextDirection(self): ...
    @property
    def TextFrameDisplay(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextJustify(self): ...
    @property
    def TextLeftAttachmentType(self): ...
    @property
    def TextLineSpacingDistance(self): ...
    @property
    def TextLineSpacingFactor(self): ...
    @property
    def TextLineSpacingStyle(self): ...
    @property
    def TextRightAttachmentType(self): ...
    @property
    def TextRotation(self): ...
    @property
    def TextString(self): ...
    @property
    def TextStyleName(self): ...
    @property
    def TextTopAttachmentType(self): ...
    @property
    def TextWidth(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @ArrowheadBlock.setter
    def ArrowheadBlock(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @ArrowheadType.setter
    def ArrowheadType(self, value) -> None: ...
    @BlockConnectionType.setter
    def BlockConnectionType(self, value) -> None: ...
    @BlockScale.setter
    def BlockScale(self, value) -> None: ...
    @ContentBlockName.setter
    def ContentBlockName(self, value) -> None: ...
    @ContentBlockType.setter
    def ContentBlockType(self, value) -> None: ...
    @ContentType.setter
    def ContentType(self, value) -> None: ...
    @DogLegged.setter
    def DogLegged(self, value) -> None: ...
    @DoglegLength.setter
    def DoglegLength(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @LandingGap.setter
    def LandingGap(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LeaderLineColor.setter
    def LeaderLineColor(self, value) -> None: ...
    @LeaderLineWeight.setter
    def LeaderLineWeight(self, value) -> None: ...
    @LeaderLinetype.setter
    def LeaderLinetype(self, value) -> None: ...
    @LeaderType.setter
    def LeaderType(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TextAttachmentDirection.setter
    def TextAttachmentDirection(self, value) -> None: ...
    @TextBackgroundFill.setter
    def TextBackgroundFill(self, value) -> None: ...
    @TextBottomAttachmentType.setter
    def TextBottomAttachmentType(self, value) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value) -> None: ...
    @TextFrameDisplay.setter
    def TextFrameDisplay(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextJustify.setter
    def TextJustify(self, value) -> None: ...
    @TextLeftAttachmentType.setter
    def TextLeftAttachmentType(self, value) -> None: ...
    @TextLineSpacingDistance.setter
    def TextLineSpacingDistance(self, value) -> None: ...
    @TextLineSpacingFactor.setter
    def TextLineSpacingFactor(self, value) -> None: ...
    @TextLineSpacingStyle.setter
    def TextLineSpacingStyle(self, value) -> None: ...
    @TextRightAttachmentType.setter
    def TextRightAttachmentType(self, value) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @TextStyleName.setter
    def TextStyleName(self, value) -> None: ...
    @TextTopAttachmentType.setter
    def TextTopAttachmentType(self, value) -> None: ...
    @TextWidth.setter
    def TextWidth(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMLeaderLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def ArrowheadBlock(self): ...
    @property
    def ArrowheadSize(self): ...
    @property
    def ArrowheadType(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def LeaderLineColor(self): ...
    @property
    def LeaderLineWeight(self): ...
    @property
    def LeaderLinetype(self): ...
    @property
    def LeaderType(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @ArrowheadBlock.setter
    def ArrowheadBlock(self, value) -> None: ...
    @ArrowheadSize.setter
    def ArrowheadSize(self, value) -> None: ...
    @ArrowheadType.setter
    def ArrowheadType(self, value) -> None: ...
    @LeaderLineColor.setter
    def LeaderLineColor(self, value) -> None: ...
    @LeaderLineWeight.setter
    def LeaderLineWeight(self, value) -> None: ...
    @LeaderLinetype.setter
    def LeaderLinetype(self, value) -> None: ...
    @LeaderType.setter
    def LeaderType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMLeaderStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def AlignSpace(self): ...
    @property
    def Annotative(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArrowSize(self): ...
    @property
    def ArrowSymbol(self): ...
    @property
    def BitFlags(self): ...
    @property
    def Block(self): ...
    @property
    def BlockColor(self): ...
    @property
    def BlockConnectionType(self): ...
    @property
    def BlockRotation(self): ...
    @property
    def BlockScale(self): ...
    @property
    def BreakSize(self): ...
    @property
    def ContentType(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Description(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def DoglegLength(self): ...
    @property
    def DrawLeaderOrderType(self): ...
    @property
    def DrawMLeaderOrderType(self): ...
    @property
    def EnableBlockRotation(self): ...
    @property
    def EnableBlockScale(self): ...
    @property
    def EnableDogleg(self): ...
    @property
    def EnableFrameText(self): ...
    @property
    def EnableLanding(self): ...
    @property
    def FirstSegmentAngleConstraint(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def LandingGap(self): ...
    @property
    def LeaderLineColor(self): ...
    @property
    def LeaderLineTypeId(self): ...
    @property
    def LeaderLineWeight(self): ...
    @property
    def LeaderLinetype(self): ...
    @property
    def MaxLeaderSegmentsPoints(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OverwritePropChanged(self): ...
    @property
    def OwnerID(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def SecondSegmentAngleConstraint(self): ...
    @property
    def TextAlignmentType(self): ...
    @property
    def TextAngleType(self): ...
    @property
    def TextAttachmentDirection(self): ...
    @property
    def TextBottomAttachmentType(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextLeftAttachmentType(self): ...
    @property
    def TextRightAttachmentType(self): ...
    @property
    def TextString(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TextTopAttachmentType(self): ...
    @AlignSpace.setter
    def AlignSpace(self, value) -> None: ...
    @Annotative.setter
    def Annotative(self, value) -> None: ...
    @ArrowSize.setter
    def ArrowSize(self, value) -> None: ...
    @ArrowSymbol.setter
    def ArrowSymbol(self, value) -> None: ...
    @BitFlags.setter
    def BitFlags(self, value) -> None: ...
    @Block.setter
    def Block(self, value) -> None: ...
    @BlockColor.setter
    def BlockColor(self, value) -> None: ...
    @BlockConnectionType.setter
    def BlockConnectionType(self, value) -> None: ...
    @BlockRotation.setter
    def BlockRotation(self, value) -> None: ...
    @BlockScale.setter
    def BlockScale(self, value) -> None: ...
    @BreakSize.setter
    def BreakSize(self, value) -> None: ...
    @ContentType.setter
    def ContentType(self, value) -> None: ...
    @Description.setter
    def Description(self, value) -> None: ...
    @DoglegLength.setter
    def DoglegLength(self, value) -> None: ...
    @DrawLeaderOrderType.setter
    def DrawLeaderOrderType(self, value) -> None: ...
    @DrawMLeaderOrderType.setter
    def DrawMLeaderOrderType(self, value) -> None: ...
    @EnableBlockRotation.setter
    def EnableBlockRotation(self, value) -> None: ...
    @EnableBlockScale.setter
    def EnableBlockScale(self, value) -> None: ...
    @EnableDogleg.setter
    def EnableDogleg(self, value) -> None: ...
    @EnableFrameText.setter
    def EnableFrameText(self, value) -> None: ...
    @EnableLanding.setter
    def EnableLanding(self, value) -> None: ...
    @FirstSegmentAngleConstraint.setter
    def FirstSegmentAngleConstraint(self, value) -> None: ...
    @LandingGap.setter
    def LandingGap(self, value) -> None: ...
    @LeaderLineColor.setter
    def LeaderLineColor(self, value) -> None: ...
    @LeaderLineTypeId.setter
    def LeaderLineTypeId(self, value) -> None: ...
    @LeaderLineWeight.setter
    def LeaderLineWeight(self, value) -> None: ...
    @LeaderLinetype.setter
    def LeaderLinetype(self, value) -> None: ...
    @MaxLeaderSegmentsPoints.setter
    def MaxLeaderSegmentsPoints(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @SecondSegmentAngleConstraint.setter
    def SecondSegmentAngleConstraint(self, value) -> None: ...
    @TextAlignmentType.setter
    def TextAlignmentType(self, value) -> None: ...
    @TextAngleType.setter
    def TextAngleType(self, value) -> None: ...
    @TextAttachmentDirection.setter
    def TextAttachmentDirection(self, value) -> None: ...
    @TextBottomAttachmentType.setter
    def TextBottomAttachmentType(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextLeftAttachmentType.setter
    def TextLeftAttachmentType(self, value) -> None: ...
    @TextRightAttachmentType.setter
    def TextRightAttachmentType(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TextTopAttachmentType.setter
    def TextTopAttachmentType(self, value) -> None: ...


class IAcadMLine(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadMLine: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Justification(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MLineScale(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def StyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Justification.setter
    def Justification(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MLineScale.setter
    def MLineScale(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMText(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadMText: ...
    def Delete(self): ...
    def Erase(self): ...
    def FieldCode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AttachmentPoint(self): ...
    @property
    def BackgroundFill(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def DrawingDirection(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def LineSpacingDistance(self): ...
    @property
    def LineSpacingFactor(self): ...
    @property
    def LineSpacingStyle(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def StyleName(self): ...
    @property
    def TextString(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @AttachmentPoint.setter
    def AttachmentPoint(self, value) -> None: ...
    @BackgroundFill.setter
    def BackgroundFill(self, value) -> None: ...
    @DrawingDirection.setter
    def DrawingDirection(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LineSpacingDistance.setter
    def LineSpacingDistance(self, value) -> None: ...
    @LineSpacingFactor.setter
    def LineSpacingFactor(self, value) -> None: ...
    @LineSpacingStyle.setter
    def LineSpacingStyle(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadMaterial(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Description(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @Description.setter
    def Description(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...


class IAcadMaterials(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadMenuBar(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Parent(self): ...


class IAcadMenuGroup(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Save(self, MenuFileType=...): ...
    def SaveAs(self, MenuFileName=..., MenuFileType=...): ...
    def Unload(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def MenuFileName(self): ...
    @property
    def Menus(self): ...
    @property
    def Name(self): ...
    @property
    def Parent(self): ...
    @property
    def Toolbars(self): ...
    @property
    def Type(self): ...


class IAcadMenuGroups(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Item(self, Index=...): ...
    def Load(self, MenuFileName=..., BaseMenu=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Parent(self): ...


class IAcadModelSpace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=...,
                  Point4=...) -> IAcad3DFace: ...

    def Add3DMesh(self, M=..., N=..., PointsMatrix=...)->IAcadPolygonMesh: ...
    def Add3DPoly(self, PointsArray=...)->IAcad3DPolyline: ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...)->IAcadArc: ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=...,
                     InsertionPoint=..., Tag=..., Value=...)->IAcadAttribute: ...

    def AddBox(self, Origin=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddCircle(self, Center=..., Radius=...)->IAcadCircle: ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...)->IAcad3DSolid: ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...)->IAcad3DSolid: ...

    def AddDim3PointAngular(
        self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...)->IAcadDim3PointAngular: ...

    def AddDimAligned(self, ExtLine1Point=...,
                      ExtLine2Point=..., TextPosition=...)->IAcadDimAligned: ...

    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=...,
                      SecondEndPoint=..., TextPoint=...)->IAcadDimAngular: ...

    def AddDimArc(self, ArcCenter=..., FirstEndPoint=...,
                  SecondEndPoint=..., ArcPoint=...)->IAcadDimArcLength: ...

    def AddDimDiametric(self, ChordPoint=...,
                        FarChordPoint=..., LeaderLength=...)->IAcadDimDiametric: ...
    def AddDimOrdinate(self, DefinitionPoint=...,
                       LeaderEndPoint=..., UseXAxis=...)->IAcadDimOrdinate: ...

    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...)->IAcadDimRadial: ...

    def AddDimRadialLarge(self, Center=..., ChordPoint=...,
                          OverrideCenter=..., JogPoint=..., JogAngle=...)->IAcadDimRadialLarge: ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=...,
                      DimLineLocation=..., RotationAngle=...)->IAcadDimRotated: ...

    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...)->IAcadEllipse: ...

    def AddEllipticalCone(self, Center=..., MajorRadius=...,
                          MinorRadius=..., Height=...)->IAcad3DSolid: ...
    def AddEllipticalCylinder(
        self, Center=..., MajorRadius=..., MinorRadius=..., Height=...)->IAcad3DSolid: ...

    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...)->IAcad3DSolid: ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...)->IAcad3DSolid: ...
    def AddHatch(self, PatternType=..., PatternName=...,
                 Associativity=..., HatchObjectType=...)->IAcadHatch: ...

    def AddLeader(self, PointsArray=..., Annotation=..., Type=...)->IAcadLeader: ...
    def AddLightWeightPolyline(self, VerticesList=...) -> IAcadLWPolyline: ...
    def AddLine(self, StartPoint=..., EndPoint=...) -> IAcadLine: ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=...,
                        Rotation=..., NumRows=..., NumColumns=..., RowSpacing=..., ColumnSpacing=..., Password=...)->IAcadMInsertBlock: ...

    def AddMLeader(self, PointsArray=..., leaderLineIndex=...)->IAcadMLeader: ...
    def AddMLine(self, VertexList=...)->IAcadMLine: ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...)->IAcadMText: ...
    def AddPoint(self, Point=...) -> IAcadPoint: ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...)->IAcadPolyfaceMesh: ...
    def AddPolyline(self, VerticesList=...)->IAcadPolyline: ...
    def AddRaster(self, imageFileName=..., InsertionPoint=...,
                  ScaleFactor=..., RotationAngle=...)->IAcadRasterImage: ...

    def AddRay(self, Point1=..., Point2=...)->IAcadRay: ...
    def AddRegion(self, ObjectList=...)->IAcadRegion: ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=...,
                         AxisDir=..., Angle=...)->IAcad3DSolid: ...

    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...)->IAcadSection: ...
    def AddShape(self, Name=..., InsertionPoint=...,
                 ScaleFactor=..., RotationAngle=...)->IAcadShape: ...

    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...)->IAcadSolid: ...
    def AddSphere(self, Center=..., Radius=...)->IAcad3DSolid: ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...)->IAcadSpline: ...
    def AddTable(self, InsertionPoint=..., NumRows=...,
                 NumColumns=..., RowHeight=..., ColWidth=...)->IAcadTable: ...

    def AddText(self, TextString=..., InsertionPoint=..., Height=...)->IAcadText: ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...)->IAcadTolerance: ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...)->IAcad3DSolid: ...
    def AddTrace(self, PointsArray=...)->IAcadTrace: ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddXline(self, Point1=..., Point2=...)->IAcadXline: ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=...,
                                Xscale=..., Yscale=..., Zscale=..., Rotation=..., 
                                bOverlay=..., Password=...)->IAcadExternalReference: ...

    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=...,
                    Yscale=..., Zscale=..., Rotation=..., Password=...)->IAcadBlockReference: ...

    def Item(self, Index=...)->IAcadEntity: ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BlockScaling(self): ...
    @property
    def Comments(self): ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Explodable(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def IsLayout(self): ...
    @property
    def IsXRef(self): ...
    @property
    def Layout(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def Units(self): ...
    @property
    def XRefDatabase(self) -> IAcadDatabase: ...
    @BlockScaling.setter
    def BlockScaling(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
    @Explodable.setter
    def Explodable(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @Units.setter
    def Units(self, value) -> None: ...


class IAcadNurbSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadNurbSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def CvHullDisplay(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @CvHullDisplay.setter
    def CvHullDisplay(self, value) -> None: ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadObject(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadOle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadOle: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def LockAspectRatio(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OleItemType(self): ...
    @property
    def OlePlotQuality(self): ...
    @property
    def OleSourceApp(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleHeight(self): ...
    @property
    def ScaleWidth(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @LockAspectRatio.setter
    def LockAspectRatio(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @OleItemType.setter
    def OleItemType(self, value) -> None: ...
    @OlePlotQuality.setter
    def OlePlotQuality(self, value) -> None: ...
    @OleSourceApp.setter
    def OleSourceApp(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleHeight.setter
    def ScaleHeight(self, value) -> None: ...
    @ScaleWidth.setter
    def ScaleWidth(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPViewport(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPViewport: ...
    def Delete(self): ...
    def Display(self, bStatus=...): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SyncModelView(self): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArcSmoothness(self): ...
    @property
    def Center(self): ...
    @property
    def Clipped(self): ...
    @property
    def CustomScale(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Direction(self): ...
    @property
    def DisplayLocked(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def GridOn(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HasSheetView(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def LabelBlockId(self): ...
    @property
    def Layer(self): ...
    @property
    def LayerPropertyOverrides(self): ...
    @property
    def LensLength(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ModelView(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def RemoveHiddenLines(self): ...
    @property
    def ShadePlot(self): ...
    @property
    def SheetView(self): ...
    @property
    def SnapBasePoint(self): ...
    @property
    def SnapOn(self): ...
    @property
    def SnapRotationAngle(self): ...
    @property
    def StandardScale(self): ...
    @property
    def StandardScale2(self): ...
    @property
    def StyleSheet(self): ...
    @property
    def Target(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def TwistAngle(self): ...
    @property
    def UCSIconAtOrigin(self): ...
    @property
    def UCSIconOn(self): ...
    @property
    def UCSPerViewport(self): ...
    @property
    def ViewportOn(self): ...
    @property
    def Visible(self): ...
    @property
    def VisualStyle(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @ArcSmoothness.setter
    def ArcSmoothness(self, value) -> None: ...
    @Center.setter
    def Center(self, value) -> None: ...
    @CustomScale.setter
    def CustomScale(self, value) -> None: ...
    @Direction.setter
    def Direction(self, value) -> None: ...
    @DisplayLocked.setter
    def DisplayLocked(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @GridOn.setter
    def GridOn(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @LabelBlockId.setter
    def LabelBlockId(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @LensLength.setter
    def LensLength(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @ModelView.setter
    def ModelView(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @RemoveHiddenLines.setter
    def RemoveHiddenLines(self, value) -> None: ...
    @ShadePlot.setter
    def ShadePlot(self, value) -> None: ...
    @SheetView.setter
    def SheetView(self, value) -> None: ...
    @SnapBasePoint.setter
    def SnapBasePoint(self, value) -> None: ...
    @SnapOn.setter
    def SnapOn(self, value) -> None: ...
    @SnapRotationAngle.setter
    def SnapRotationAngle(self, value) -> None: ...
    @StandardScale.setter
    def StandardScale(self, value) -> None: ...
    @StandardScale2.setter
    def StandardScale2(self, value) -> None: ...
    @StyleSheet.setter
    def StyleSheet(self, value) -> None: ...
    @Target.setter
    def Target(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @TwistAngle.setter
    def TwistAngle(self, value) -> None: ...
    @UCSIconAtOrigin.setter
    def UCSIconAtOrigin(self, value) -> None: ...
    @UCSIconOn.setter
    def UCSIconOn(self, value) -> None: ...
    @UCSPerViewport.setter
    def UCSPerViewport(self, value) -> None: ...
    @ViewportOn.setter
    def ViewportOn(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @VisualStyle.setter
    def VisualStyle(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPaperSpace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=...,
                  Point4=...) -> IAcad3DFace: ...

    def Add3DMesh(self, M=..., N=..., PointsMatrix=...)->IAcadPolygonMesh: ...
    def Add3DPoly(self, PointsArray=...)->IAcad3DPolyline: ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...)->IAcadArc: ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=...,
                     InsertionPoint=..., Tag=..., Value=...)->IAcadAttribute: ...

    def AddBox(self, Origin=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddCircle(self, Center=..., Radius=...)->IAcadCircle: ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...)->IAcad3DSolid: ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...)->IAcad3DSolid: ...

    def AddDim3PointAngular(
        self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...)->IAcadDim3PointAngular: ...

    def AddDimAligned(self, ExtLine1Point=...,
                      ExtLine2Point=..., TextPosition=...)->IAcadDimAligned: ...

    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=...,
                      SecondEndPoint=..., TextPoint=...)->IAcadDimAngular: ...

    def AddDimArc(self, ArcCenter=..., FirstEndPoint=...,
                  SecondEndPoint=..., ArcPoint=...)->IAcadDimArcLength: ...

    def AddDimDiametric(self, ChordPoint=...,
                        FarChordPoint=..., LeaderLength=...)->IAcadDimDiametric: ...
    def AddDimOrdinate(self, DefinitionPoint=...,
                       LeaderEndPoint=..., UseXAxis=...)->IAcadDimOrdinate: ...

    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...)->IAcadDimRadial: ...

    def AddDimRadialLarge(self, Center=..., ChordPoint=...,
                          OverrideCenter=..., JogPoint=..., JogAngle=...)->IAcadDimRadialLarge: ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=...,
                      DimLineLocation=..., RotationAngle=...)->IAcadDimRotated: ...

    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...)->IAcadEllipse: ...

    def AddEllipticalCone(self, Center=..., MajorRadius=...,
                          MinorRadius=..., Height=...)->IAcad3DSolid: ...
    def AddEllipticalCylinder(
        self, Center=..., MajorRadius=..., MinorRadius=..., Height=...)->IAcad3DSolid: ...

    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...)->IAcad3DSolid: ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...)->IAcad3DSolid: ...
    def AddHatch(self, PatternType=..., PatternName=...,
                 Associativity=..., HatchObjectType=...)->IAcadHatch: ...

    def AddLeader(self, PointsArray=..., Annotation=..., Type=...)->IAcadLeader: ...
    def AddLightWeightPolyline(self, VerticesList=...) -> IAcadLWPolyline: ...
    def AddLine(self, StartPoint=..., EndPoint=...) -> IAcadLine: ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=...,
                        Rotation=..., NumRows=..., NumColumns=..., 
                        RowSpacing=..., ColumnSpacing=..., Password=...)->IAcadMInsertBlock: ...

    def AddMLeader(self, PointsArray=..., leaderLineIndex=...)->IAcadMLeader: ...
    def AddMLine(self, VertexList=...)->IAcadMLine: ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...)->IAcadMText: ...
    def AddPViewport(self, Center=..., Width=..., Height=...)->IAcadPViewport: ...
    def AddPoint(self, Point=...) -> IAcadPoint: ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...)->IAcadPolyfaceMesh: ...
    def AddPolyline(self, VerticesList=...)->IAcadPolyline: ...
    def AddRaster(self, imageFileName=..., InsertionPoint=...,
                  ScaleFactor=..., RotationAngle=...)->IAcadRasterImage: ...

    def AddRay(self, Point1=..., Point2=...)->IAcadRay: ...
    def AddRegion(self, ObjectList=...)->IAcadRegion: ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=...,
                         AxisDir=..., Angle=...)->IAcad3DSolid: ...

    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...)->IAcadSection: ...
    def AddShape(self, Name=..., InsertionPoint=...,
                 ScaleFactor=..., RotationAngle=...)->IAcadShape: ...

    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...)->IAcadSolid: ...
    def AddSphere(self, Center=..., Radius=...)->IAcad3DSolid: ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...)->IAcadSpline: ...
    def AddTable(self, InsertionPoint=..., NumRows=...,
                 NumColumns=..., RowHeight=..., ColWidth=...)->IAcadTable: ...

    def AddText(self, TextString=..., InsertionPoint=..., Height=...)->IAcadText: ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...)->IAcadTolerance: ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...)->IAcad3DSolid: ...
    def AddTrace(self, PointsArray=...)->IAcadTrace: ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...)->IAcad3DSolid: ...
    def AddXline(self, Point1=..., Point2=...)->IAcadXline: ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=...,
                                Xscale=..., Yscale=..., Zscale=..., 
                                Rotation=..., bOverlay=..., Password=...)->IAcadExternalReference: ...

    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=...,
                    Yscale=..., Zscale=..., Rotation=..., Password=...)->IAcadBlockReference: ...

    def Item(self, Index=...)->IAcadEntity: ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BlockScaling(self): ...
    @property
    def Comments(self): ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Explodable(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def IsDynamicBlock(self): ...
    @property
    def IsLayout(self): ...
    @property
    def IsXRef(self): ...
    @property
    def Layout(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def Units(self): ...
    @property
    def XRefDatabase(self) -> IAcadDatabase: ...
    @BlockScaling.setter
    def BlockScaling(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
    @Explodable.setter
    def Explodable(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @Units.setter
    def Units(self, value) -> None: ...


class IAcadPlaneSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPlaneSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPlot(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def DisplayPlotPreview(self, Preview=...): ...
    def PlotToDevice(self, plotConfig=...): ...
    def PlotToFile(self, plotFile=..., plotConfig=...): ...
    def SetLayoutsToPlot(self, layoutList=...): ...
    def StartBatchMode(self, entryCount=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BatchPlotProgress(self): ...
    @property
    def NumberOfCopies(self): ...
    @property
    def QuietErrorMode(self): ...
    @BatchPlotProgress.setter
    def BatchPlotProgress(self, value) -> None: ...
    @NumberOfCopies.setter
    def NumberOfCopies(self, value) -> None: ...
    @QuietErrorMode.setter
    def QuietErrorMode(self, value) -> None: ...


class IAcadPlotConfiguration(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, pPlotConfig=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetCanonicalMediaNames(self): ...
    def GetCustomScale(self, Numerator=..., Denominator=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetLocaleMediaName(self, Name=...): ...
    def GetPaperMargins(self, LowerLeft=..., UpperRight=...): ...
    def GetPaperSize(self, Width=..., Height=...): ...
    def GetPlotDeviceNames(self): ...
    def GetPlotStyleTableNames(self): ...
    def GetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RefreshPlotDeviceInfo(self): ...
    def SetCustomScale(self, Numerator=..., Denominator=...): ...
    def SetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def CanonicalMediaName(self): ...
    @property
    def CenterPlot(self): ...
    @property
    def ConfigName(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ModelType(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PaperUnits(self): ...
    @property
    def PlotHidden(self): ...
    @property
    def PlotOrigin(self): ...
    @property
    def PlotRotation(self): ...
    @property
    def PlotType(self): ...
    @property
    def PlotViewportBorders(self): ...
    @property
    def PlotViewportsFirst(self): ...
    @property
    def PlotWithLineweights(self): ...
    @property
    def PlotWithPlotStyles(self): ...
    @property
    def ScaleLineweights(self): ...
    @property
    def ShowPlotStyles(self): ...
    @property
    def StandardScale(self): ...
    @property
    def StyleSheet(self): ...
    @property
    def UseStandardScale(self): ...
    @property
    def ViewToPlot(self): ...
    @CanonicalMediaName.setter
    def CanonicalMediaName(self, value) -> None: ...
    @CenterPlot.setter
    def CenterPlot(self, value) -> None: ...
    @ConfigName.setter
    def ConfigName(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PaperUnits.setter
    def PaperUnits(self, value) -> None: ...
    @PlotHidden.setter
    def PlotHidden(self, value) -> None: ...
    @PlotOrigin.setter
    def PlotOrigin(self, value) -> None: ...
    @PlotRotation.setter
    def PlotRotation(self, value) -> None: ...
    @PlotType.setter
    def PlotType(self, value) -> None: ...
    @PlotViewportBorders.setter
    def PlotViewportBorders(self, value) -> None: ...
    @PlotViewportsFirst.setter
    def PlotViewportsFirst(self, value) -> None: ...
    @PlotWithLineweights.setter
    def PlotWithLineweights(self, value) -> None: ...
    @PlotWithPlotStyles.setter
    def PlotWithPlotStyles(self, value) -> None: ...
    @ScaleLineweights.setter
    def ScaleLineweights(self, value) -> None: ...
    @ShowPlotStyles.setter
    def ShowPlotStyles(self, value) -> None: ...
    @StandardScale.setter
    def StandardScale(self, value) -> None: ...
    @StyleSheet.setter
    def StyleSheet(self, value) -> None: ...
    @UseStandardScale.setter
    def UseStandardScale(self, value) -> None: ...
    @ViewToPlot.setter
    def ViewToPlot(self, value) -> None: ...


class IAcadPlotConfigurations(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=..., ModelType=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadPoint(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPoint: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPointCloud(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPointCloud: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def IntensityColorScheme(self): ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Locked(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ShowClipped(self): ...
    @property
    def ShowIntensity(self): ...
    @property
    def Stylization(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Unit(self): ...
    @property
    def UnitFactor(self): ...
    @property
    def UseEntityColor(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @property
    def scale(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @IntensityColorScheme.setter
    def IntensityColorScheme(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Length.setter
    def Length(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Locked.setter
    def Locked(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ShowClipped.setter
    def ShowClipped(self, value) -> None: ...
    @ShowIntensity.setter
    def ShowIntensity(self, value) -> None: ...
    @Stylization.setter
    def Stylization(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UseEntityColor.setter
    def UseEntityColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @scale.setter
    def scale(self, value) -> None: ...


class IAcadPointCloudEx(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPointCloudEx: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ColorScheme(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Geolocate(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Locked(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ShowCropped(self): ...
    @property
    def Stylization(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Unit(self): ...
    @property
    def UnitFactor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @property
    def scale(self): ...
    @ColorScheme.setter
    def ColorScheme(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Geolocate.setter
    def Geolocate(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Locked.setter
    def Locked(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ShowCropped.setter
    def ShowCropped(self, value) -> None: ...
    @Stylization.setter
    def Stylization(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @scale.setter
    def scale(self, value) -> None: ...


class IAcadPointCloudEx2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadPointCloudEx2: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ColorScheme(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Geolocate(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Locked(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Path(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def Segmentation(self): ...
    @property
    def ShowCropped(self): ...
    @property
    def Stylization(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Unit(self): ...
    @property
    def UnitFactor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @property
    def scale(self): ...
    @ColorScheme.setter
    def ColorScheme(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Geolocate.setter
    def Geolocate(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Locked.setter
    def Locked(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ShowCropped.setter
    def ShowCropped(self, value) -> None: ...
    @Stylization.setter
    def Stylization(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @scale.setter
    def scale(self, value) -> None: ...


class IAcadPolyfaceMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadPolyfaceMesh: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def NumberOfFaces(self): ...
    @property
    def NumberOfVertices(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Faces.setter
    def Faces(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPolygonMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadPolygonMesh: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MClose(self): ...
    @property
    def MDensity(self): ...
    @property
    def MVertexCount(self): ...
    @property
    def Material(self): ...
    @property
    def NClose(self): ...
    @property
    def NDensity(self): ...
    @property
    def NVertexCount(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Type(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MClose.setter
    def MClose(self, value) -> None: ...
    @MDensity.setter
    def MDensity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @NClose.setter
    def NClose(self, value) -> None: ...
    @NDensity.setter
    def NDensity(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Type.setter
    def Type(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadPolyline: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBulge(self, Index=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBulge(self, Index=..., bulge=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self): ...
    @property
    def Area(self): ...
    @property
    def Closed(self): ...
    @property
    def ConstantWidth(self): ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self): ...
    @property
    def Document(self): ...
    @property
    def Elevation(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeGeneration(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Type(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Closed.setter
    def Closed(self, value) -> None: ...
    @ConstantWidth.setter
    def ConstantWidth(self, value) -> None: ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @Elevation.setter
    def Elevation(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeGeneration.setter
    def LinetypeGeneration(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Type.setter
    def Type(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPopupMenu(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddMenuItem(self, Index=..., Label=..., Macro=...): ...
    def AddSeparator(self, Index=...): ...
    def AddSubMenu(self, Index=..., Label=...): ...
    def InsertInMenuBar(self, Index=...): ...
    def Item(self, Index=...): ...
    def RemoveFromMenuBar(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Name(self): ...
    @property
    def NameNoMnemonic(self): ...
    @property
    def OnMenuBar(self): ...
    @property
    def Parent(self): ...
    @property
    def ShortcutMenu(self): ...
    @property
    def TagString(self): ...
    @Name.setter
    def Name(self, value) -> None: ...

class IAcadPopupMenuItem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Caption(self): ...
    @property
    def Check(self): ...
    @property
    def Enable(self): ...
    @property
    def EndSubMenuLevel(self): ...
    @property
    def HelpString(self): ...
    @property
    def Index(self): ...
    @property
    def Label(self): ...
    @property
    def Macro(self): ...
    @property
    def Parent(self): ...
    @property
    def SubMenu(self): ...
    @property
    def TagString(self): ...
    @property
    def Type(self): ...
    @Check.setter
    def Check(self, value) -> None: ...
    @Enable.setter
    def Enable(self, value) -> None: ...
    @EndSubMenuLevel.setter
    def EndSubMenuLevel(self, value) -> None: ...
    @HelpString.setter
    def HelpString(self, value) -> None: ...
    @Label.setter
    def Label(self, value) -> None: ...
    @Macro.setter
    def Macro(self, value) -> None: ...
    @TagString.setter
    def TagString(self, value) -> None: ...


class IAcadPopupMenus(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, MenuName=...): ...
    def InsertMenuInMenuBar(self, MenuName=..., Index=...): ...
    def Item(self, Index=...): ...
    def RemoveMenuFromMenuBar(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Parent(self): ...


class IAcadPreferences(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Display(self): ...
    @property
    def Drafting(self): ...
    @property
    def Files(self): ...
    @property
    def OpenSave(self): ...
    @property
    def Output(self): ...
    @property
    def Profiles(self): ...
    @property
    def Selection(self): ...
    @property
    def System(self): ...
    @property
    def User(self): ...


class IAcadPreferencesDisplay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AutoTrackingVecColor(self): ...
    @property
    def CursorSize(self): ...
    @property
    def DisplayLayoutTabs(self): ...
    @property
    def DisplayScreenMenu(self): ...
    @property
    def DisplayScrollBars(self): ...
    @property
    def DockedVisibleLines(self): ...
    @property
    def GraphicsWinLayoutBackgrndColor(self): ...
    @property
    def GraphicsWinModelBackgrndColor(self): ...
    @property
    def HistoryLines(self): ...
    @property
    def ImageFrameHighlight(self): ...
    @property
    def LayoutCreateViewport(self): ...
    @property
    def LayoutCrosshairColor(self): ...
    @property
    def LayoutDisplayMargins(self): ...
    @property
    def LayoutDisplayPaper(self): ...
    @property
    def LayoutDisplayPaperShadow(self): ...
    @property
    def LayoutShowPlotSetup(self): ...
    @property
    def MaxAutoCADWindow(self): ...
    @property
    def ModelCrosshairColor(self): ...
    @property
    def ShowRasterImage(self): ...
    @property
    def TextFont(self): ...
    @property
    def TextFontSize(self): ...
    @property
    def TextFontStyle(self): ...
    @property
    def TextWinBackgrndColor(self): ...
    @property
    def TextWinTextColor(self): ...
    @property
    def TrueColorImages(self): ...
    @property
    def XRefFadeIntensity(self): ...
    @AutoTrackingVecColor.setter
    def AutoTrackingVecColor(self, value) -> None: ...
    @CursorSize.setter
    def CursorSize(self, value) -> None: ...
    @DisplayLayoutTabs.setter
    def DisplayLayoutTabs(self, value) -> None: ...
    @DisplayScreenMenu.setter
    def DisplayScreenMenu(self, value) -> None: ...
    @DisplayScrollBars.setter
    def DisplayScrollBars(self, value) -> None: ...
    @DockedVisibleLines.setter
    def DockedVisibleLines(self, value) -> None: ...
    @GraphicsWinLayoutBackgrndColor.setter
    def GraphicsWinLayoutBackgrndColor(self, value) -> None: ...
    @GraphicsWinModelBackgrndColor.setter
    def GraphicsWinModelBackgrndColor(self, value) -> None: ...
    @HistoryLines.setter
    def HistoryLines(self, value) -> None: ...
    @ImageFrameHighlight.setter
    def ImageFrameHighlight(self, value) -> None: ...
    @LayoutCreateViewport.setter
    def LayoutCreateViewport(self, value) -> None: ...
    @LayoutCrosshairColor.setter
    def LayoutCrosshairColor(self, value) -> None: ...
    @LayoutDisplayMargins.setter
    def LayoutDisplayMargins(self, value) -> None: ...
    @LayoutDisplayPaper.setter
    def LayoutDisplayPaper(self, value) -> None: ...
    @LayoutDisplayPaperShadow.setter
    def LayoutDisplayPaperShadow(self, value) -> None: ...
    @LayoutShowPlotSetup.setter
    def LayoutShowPlotSetup(self, value) -> None: ...
    @MaxAutoCADWindow.setter
    def MaxAutoCADWindow(self, value) -> None: ...
    @ModelCrosshairColor.setter
    def ModelCrosshairColor(self, value) -> None: ...
    @ShowRasterImage.setter
    def ShowRasterImage(self, value) -> None: ...
    @TextFont.setter
    def TextFont(self, value) -> None: ...
    @TextFontSize.setter
    def TextFontSize(self, value) -> None: ...
    @TextFontStyle.setter
    def TextFontStyle(self, value) -> None: ...
    @TextWinBackgrndColor.setter
    def TextWinBackgrndColor(self, value) -> None: ...
    @TextWinTextColor.setter
    def TextWinTextColor(self, value) -> None: ...
    @TrueColorImages.setter
    def TrueColorImages(self, value) -> None: ...
    @XRefFadeIntensity.setter
    def XRefFadeIntensity(self, value) -> None: ...


class IAcadPreferencesDrafting(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def AlignmentPointAcquisition(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AutoSnapAperture(self): ...
    @property
    def AutoSnapApertureSize(self): ...
    @property
    def AutoSnapMagnet(self): ...
    @property
    def AutoSnapMarker(self): ...
    @property
    def AutoSnapMarkerColor(self): ...
    @property
    def AutoSnapMarkerSize(self): ...
    @property
    def AutoSnapTooltip(self): ...
    @property
    def AutoTrackTooltip(self): ...
    @property
    def FullScreenTrackingVector(self): ...
    @property
    def PolarTrackingVector(self): ...
    @AlignmentPointAcquisition.setter
    def AlignmentPointAcquisition(self, value) -> None: ...
    @AutoSnapAperture.setter
    def AutoSnapAperture(self, value) -> None: ...
    @AutoSnapApertureSize.setter
    def AutoSnapApertureSize(self, value) -> None: ...
    @AutoSnapMagnet.setter
    def AutoSnapMagnet(self, value) -> None: ...
    @AutoSnapMarker.setter
    def AutoSnapMarker(self, value) -> None: ...
    @AutoSnapMarkerColor.setter
    def AutoSnapMarkerColor(self, value) -> None: ...
    @AutoSnapMarkerSize.setter
    def AutoSnapMarkerSize(self, value) -> None: ...
    @AutoSnapTooltip.setter
    def AutoSnapTooltip(self, value) -> None: ...
    @AutoTrackTooltip.setter
    def AutoTrackTooltip(self, value) -> None: ...
    @FullScreenTrackingVector.setter
    def FullScreenTrackingVector(self, value) -> None: ...
    @PolarTrackingVector.setter
    def PolarTrackingVector(self, value) -> None: ...


class IAcadPreferencesFiles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def GetProjectFilePath(self, ProjectName=...): ...
    def SetProjectFilePath(self, ProjectName=..., ProjectFilePath=...): ...
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    @property
    def ActiveInvProject(self): ...
    @property
    def AltFontFile(self): ...
    @property
    def AltTabletMenuFile(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AutoSavePath(self): ...
    @property
    def ColorBookPath(self): ...
    @property
    def ConfigFile(self): ...
    @property
    def CustomDictionary(self): ...
    @property
    def CustomIconPath(self): ...
    @property
    def DefaultInternetURL(self): ...
    @property
    def DriversPath(self): ...
    @property
    def EnterpriseMenuFile(self): ...
    @property
    def FontFileMap(self): ...
    @property
    def HelpFilePath(self): ...
    @property
    def LicenseServer(self): ...
    @property
    def LogFilePath(self): ...
    @property
    def MainDictionary(self): ...
    @property
    def MenuFile(self): ...
    @property
    def ObjectARXPath(self): ...
    @property
    def PageSetupOverridesTemplateFile(self): ...
    @property
    def PlotLogFilePath(self): ...
    @property
    def PostScriptPrologFile(self): ...
    @property
    def PrintFile(self): ...
    @property
    def PrintSpoolExecutable(self): ...
    @property
    def PrintSpoolerPath(self): ...
    @property
    def PrinterConfigPath(self): ...
    @property
    def PrinterDescPath(self): ...
    @property
    def PrinterStyleSheetPath(self): ...
    @property
    def QNewTemplateFile(self): ...
    @property
    def SupportPath(self): ...
    @property
    def TempFilePath(self): ...
    @property
    def TempXrefPath(self): ...
    @property
    def TemplateDwgPath(self): ...
    @property
    def TextEditor(self): ...
    @property
    def TextureMapPath(self): ...
    @property
    def ToolPalettePath(self): ...
    @property
    def WorkspacePath(self): ...
    @ActiveInvProject.setter
    def ActiveInvProject(self, value) -> None: ...
    @AltFontFile.setter
    def AltFontFile(self, value) -> None: ...
    @AltTabletMenuFile.setter
    def AltTabletMenuFile(self, value) -> None: ...
    @AutoSavePath.setter
    def AutoSavePath(self, value) -> None: ...
    @ColorBookPath.setter
    def ColorBookPath(self, value) -> None: ...
    @CustomDictionary.setter
    def CustomDictionary(self, value) -> None: ...
    @CustomIconPath.setter
    def CustomIconPath(self, value) -> None: ...
    @DefaultInternetURL.setter
    def DefaultInternetURL(self, value) -> None: ...
    @DriversPath.setter
    def DriversPath(self, value) -> None: ...
    @EnterpriseMenuFile.setter
    def EnterpriseMenuFile(self, value) -> None: ...
    @FontFileMap.setter
    def FontFileMap(self, value) -> None: ...
    @HelpFilePath.setter
    def HelpFilePath(self, value) -> None: ...
    @LogFilePath.setter
    def LogFilePath(self, value) -> None: ...
    @MainDictionary.setter
    def MainDictionary(self, value) -> None: ...
    @MenuFile.setter
    def MenuFile(self, value) -> None: ...
    @ObjectARXPath.setter
    def ObjectARXPath(self, value) -> None: ...
    @PageSetupOverridesTemplateFile.setter
    def PageSetupOverridesTemplateFile(self, value) -> None: ...
    @PlotLogFilePath.setter
    def PlotLogFilePath(self, value) -> None: ...
    @PostScriptPrologFile.setter
    def PostScriptPrologFile(self, value) -> None: ...
    @PrintFile.setter
    def PrintFile(self, value) -> None: ...
    @PrintSpoolExecutable.setter
    def PrintSpoolExecutable(self, value) -> None: ...
    @PrintSpoolerPath.setter
    def PrintSpoolerPath(self, value) -> None: ...
    @PrinterConfigPath.setter
    def PrinterConfigPath(self, value) -> None: ...
    @PrinterDescPath.setter
    def PrinterDescPath(self, value) -> None: ...
    @PrinterStyleSheetPath.setter
    def PrinterStyleSheetPath(self, value) -> None: ...
    @QNewTemplateFile.setter
    def QNewTemplateFile(self, value) -> None: ...
    @SupportPath.setter
    def SupportPath(self, value) -> None: ...
    @TempFilePath.setter
    def TempFilePath(self, value) -> None: ...
    @TempXrefPath.setter
    def TempXrefPath(self, value) -> None: ...
    @TemplateDwgPath.setter
    def TemplateDwgPath(self, value) -> None: ...
    @TextEditor.setter
    def TextEditor(self, value) -> None: ...
    @TextureMapPath.setter
    def TextureMapPath(self, value) -> None: ...
    @ToolPalettePath.setter
    def ToolPalettePath(self, value) -> None: ...
    @WorkspacePath.setter
    def WorkspacePath(self, value) -> None: ...


class IAcadPreferencesOpenSave(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AutoAudit(self): ...
    @property
    def AutoSaveInterval(self): ...
    @property
    def CreateBackup(self): ...
    @property
    def DemandLoadARXApp(self): ...
    @property
    def FullCRCValidation(self): ...
    @property
    def IncrementalSavePercent(self): ...
    @property
    def LogFileOn(self): ...
    @property
    def MRUNumber(self): ...
    @property
    def ProxyImage(self): ...
    @property
    def SaveAsType(self): ...
    @property
    def SavePreviewThumbnail(self): ...
    @property
    def ShowProxyDialogBox(self): ...
    @property
    def TempFileExtension(self): ...
    @property
    def XrefDemandLoad(self): ...
    @AutoAudit.setter
    def AutoAudit(self, value) -> None: ...
    @AutoSaveInterval.setter
    def AutoSaveInterval(self, value) -> None: ...
    @CreateBackup.setter
    def CreateBackup(self, value) -> None: ...
    @DemandLoadARXApp.setter
    def DemandLoadARXApp(self, value) -> None: ...
    @FullCRCValidation.setter
    def FullCRCValidation(self, value) -> None: ...
    @IncrementalSavePercent.setter
    def IncrementalSavePercent(self, value) -> None: ...
    @LogFileOn.setter
    def LogFileOn(self, value) -> None: ...
    @ProxyImage.setter
    def ProxyImage(self, value) -> None: ...
    @SaveAsType.setter
    def SaveAsType(self, value) -> None: ...
    @SavePreviewThumbnail.setter
    def SavePreviewThumbnail(self, value) -> None: ...
    @ShowProxyDialogBox.setter
    def ShowProxyDialogBox(self, value) -> None: ...
    @TempFileExtension.setter
    def TempFileExtension(self, value) -> None: ...
    @XrefDemandLoad.setter
    def XrefDemandLoad(self, value) -> None: ...


class IAcadPreferencesOutput(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AutomaticPlotLog(self): ...
    @property
    def ContinuousPlotLog(self): ...
    @property
    def DefaultOutputDevice(self): ...
    @property
    def DefaultPlotStyleForLayer(self): ...
    @property
    def DefaultPlotStyleForObjects(self): ...
    @property
    def DefaultPlotStyleTable(self): ...
    @property
    def DefaultPlotToFilePath(self): ...
    @property
    def OLEQuality(self): ...
    @property
    def PlotLegacy(self): ...
    @property
    def PlotPolicy(self): ...
    @property
    def PrinterPaperSizeAlert(self): ...
    @property
    def PrinterSpoolAlert(self): ...
    @property
    def UseLastPlotSettings(self): ...
    @AutomaticPlotLog.setter
    def AutomaticPlotLog(self, value) -> None: ...
    @ContinuousPlotLog.setter
    def ContinuousPlotLog(self, value) -> None: ...
    @DefaultOutputDevice.setter
    def DefaultOutputDevice(self, value) -> None: ...
    @DefaultPlotStyleForLayer.setter
    def DefaultPlotStyleForLayer(self, value) -> None: ...
    @DefaultPlotStyleForObjects.setter
    def DefaultPlotStyleForObjects(self, value) -> None: ...
    @DefaultPlotStyleTable.setter
    def DefaultPlotStyleTable(self, value) -> None: ...
    @DefaultPlotToFilePath.setter
    def DefaultPlotToFilePath(self, value) -> None: ...
    @OLEQuality.setter
    def OLEQuality(self, value) -> None: ...
    @PlotLegacy.setter
    def PlotLegacy(self, value) -> None: ...
    @PlotPolicy.setter
    def PlotPolicy(self, value) -> None: ...
    @PrinterPaperSizeAlert.setter
    def PrinterPaperSizeAlert(self, value) -> None: ...
    @PrinterSpoolAlert.setter
    def PrinterSpoolAlert(self, value) -> None: ...
    @UseLastPlotSettings.setter
    def UseLastPlotSettings(self, value) -> None: ...


class IAcadPreferencesProfiles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyProfile(self, oldProfileName=..., newProfileName=...): ...
    def DeleteProfile(self, ProfileName=...): ...
    def ExportProfile(self, ProfileName=..., RegFile=...): ...
    def GetAllProfileNames(self, pNames=...): ...
    def ImportProfile(self, ProfileName=..., RegFile=...,
                      IncludePathInfo=...): ...

    def RenameProfile(self, origProfileName=..., newProfileName=...): ...
    def ResetProfile(self, Profile=...): ...
    def __iter__(self): ...
    @property
    def ActiveProfile(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @ActiveProfile.setter
    def ActiveProfile(self, value) -> None: ...


class IAcadPreferencesSelection(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def DisplayGrips(self): ...
    @property
    def DisplayGripsWithinBlocks(self): ...
    @property
    def GripColorSelected(self): ...
    @property
    def GripColorUnselected(self): ...
    @property
    def GripSize(self): ...
    @property
    def PickAdd(self): ...
    @property
    def PickAuto(self): ...
    @property
    def PickBoxSize(self): ...
    @property
    def PickDrag(self): ...
    @property
    def PickFirst(self): ...
    @property
    def PickGroup(self): ...
    @DisplayGrips.setter
    def DisplayGrips(self, value) -> None: ...
    @DisplayGripsWithinBlocks.setter
    def DisplayGripsWithinBlocks(self, value) -> None: ...
    @GripColorSelected.setter
    def GripColorSelected(self, value) -> None: ...
    @GripColorUnselected.setter
    def GripColorUnselected(self, value) -> None: ...
    @GripSize.setter
    def GripSize(self, value) -> None: ...
    @PickAdd.setter
    def PickAdd(self, value) -> None: ...
    @PickAuto.setter
    def PickAuto(self, value) -> None: ...
    @PickBoxSize.setter
    def PickBoxSize(self, value) -> None: ...
    @PickDrag.setter
    def PickDrag(self, value) -> None: ...
    @PickFirst.setter
    def PickFirst(self, value) -> None: ...
    @PickGroup.setter
    def PickGroup(self, value) -> None: ...


class IAcadPreferencesSystem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BeepOnError(self): ...
    @property
    def DisplayOLEScale(self): ...
    @property
    def EnableStartupDialog(self): ...
    @property
    def LoadAcadLspInAllDocuments(self): ...
    @property
    def ShowWarningMessages(self): ...
    @property
    def SingleDocumentMode(self): ...
    @property
    def StoreSQLIndex(self): ...
    @property
    def TablesReadOnly(self): ...
    @BeepOnError.setter
    def BeepOnError(self, value) -> None: ...
    @DisplayOLEScale.setter
    def DisplayOLEScale(self, value) -> None: ...
    @EnableStartupDialog.setter
    def EnableStartupDialog(self, value) -> None: ...
    @LoadAcadLspInAllDocuments.setter
    def LoadAcadLspInAllDocuments(self, value) -> None: ...
    @ShowWarningMessages.setter
    def ShowWarningMessages(self, value) -> None: ...
    @SingleDocumentMode.setter
    def SingleDocumentMode(self, value) -> None: ...
    @StoreSQLIndex.setter
    def StoreSQLIndex(self, value) -> None: ...
    @TablesReadOnly.setter
    def TablesReadOnly(self, value) -> None: ...


class IAcadPreferencesUser(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def ADCInsertUnitsDefaultSource(self): ...
    @property
    def ADCInsertUnitsDefaultTarget(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def HyperlinkDisplayCursor(self): ...
    @property
    def KeyboardAccelerator(self): ...
    @property
    def KeyboardPriority(self): ...
    @property
    def SCMCommandMode(self): ...
    @property
    def SCMDefaultMode(self): ...
    @property
    def SCMEditMode(self): ...
    @property
    def SCMTimeMode(self): ...
    @property
    def SCMTimeValue(self): ...
    @property
    def ShortCutMenuDisplay(self): ...
    @ADCInsertUnitsDefaultSource.setter
    def ADCInsertUnitsDefaultSource(self, value) -> None: ...
    @ADCInsertUnitsDefaultTarget.setter
    def ADCInsertUnitsDefaultTarget(self, value) -> None: ...
    @HyperlinkDisplayCursor.setter
    def HyperlinkDisplayCursor(self, value) -> None: ...
    @KeyboardAccelerator.setter
    def KeyboardAccelerator(self, value) -> None: ...
    @KeyboardPriority.setter
    def KeyboardPriority(self, value) -> None: ...
    @SCMCommandMode.setter
    def SCMCommandMode(self, value) -> None: ...
    @SCMDefaultMode.setter
    def SCMDefaultMode(self, value) -> None: ...
    @SCMEditMode.setter
    def SCMEditMode(self, value) -> None: ...
    @SCMTimeMode.setter
    def SCMTimeMode(self, value) -> None: ...
    @SCMTimeValue.setter
    def SCMTimeValue(self, value) -> None: ...
    @ShortCutMenuDisplay.setter
    def ShortCutMenuDisplay(self, value) -> None: ...


class IAcadRasterImage(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClipBoundary(self, boundry=...): ...
    def Copy(self)->IAcadRasterImage: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Brightness(self): ...
    @property
    def ClippingEnabled(self): ...
    @property
    def Contrast(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fade(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ImageFile(self): ...
    @property
    def ImageHeight(self): ...
    @property
    def ImageVisibility(self): ...
    @property
    def ImageWidth(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def ShowRotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @property
    def transparency(self): ...
    @Brightness.setter
    def Brightness(self, value) -> None: ...
    @ClippingEnabled.setter
    def ClippingEnabled(self, value) -> None: ...
    @Contrast.setter
    def Contrast(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fade.setter
    def Fade(self, value) -> None: ...
    @ImageFile.setter
    def ImageFile(self, value) -> None: ...
    @ImageHeight.setter
    def ImageHeight(self, value) -> None: ...
    @ImageVisibility.setter
    def ImageVisibility(self, value) -> None: ...
    @ImageWidth.setter
    def ImageWidth(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @ShowRotation.setter
    def ShowRotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @transparency.setter
    def transparency(self, value) -> None: ...


class IAcadRay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadRay: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BasePoint(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DirectionVector(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def SecondPoint(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @BasePoint.setter
    def BasePoint(self, value) -> None: ...
    @DirectionVector.setter
    def DirectionVector(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @SecondPoint.setter
    def SecondPoint(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadRegion(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Boolean(self, Operation=..., Object=...): ...
    def Copy(self)->IAcadRegion: ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def Centroid(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def MomentOfInertia(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Perimeter(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def PrincipalDirections(self): ...
    @property
    def PrincipalMoments(self): ...
    @property
    def ProductOfInertia(self): ...
    @property
    def RadiiOfGyration(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadRegisteredApplication(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @Name.setter
    def Name(self, value) -> None: ...


class IAcadRegisteredApplications(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadRevolvedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadRevolvedSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AxisDirection(self): ...
    @property
    def AxisPosition(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def RevolutionAngle(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @AxisPosition.setter
    def AxisPosition(self, value) -> None: ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @RevolutionAngle.setter
    def RevolutionAngle(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSection(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, nIndex=..., val=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def CreateJog(self, varPt=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateSectionGeometry(self, pEntity=..., pIntersectionBoundaryObjs=..., pIntersectionFillObjs=...,
                                pBackgroudnObjs=..., pForegroudObjs=..., pCurveTangencyObjs=...): ...

    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, varPtHit=..., pHit=..., pSegmentIndex=...,
                pPtOnSegment=..., pSubItem=...): ...

    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveVertex(self, nIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def AxisDirection(self): ...
    @property
    def AxisPosition(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def RevolutionAngle(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @AxisPosition.setter
    def AxisPosition(self, value) -> None: ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @RevolutionAngle.setter
    def RevolutionAngle(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSection2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, nIndex=..., val=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def CreateJog(self, varPt=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateSectionGeometry(self, pEntity=..., pIntersectionBoundaryObjs=..., pIntersectionFillObjs=...,
                                pBackgroudnObjs=..., pForegroudObjs=..., pCurveTangencyObjs=...): ...

    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, varPtHit=..., pHit=..., pSegmentIndex=...,
                pPtOnSegment=..., pSubItem=...): ...

    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveVertex(self, nIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BottomHeight(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Elevation(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def IndicatorFillColor(self): ...
    @property
    def IndicatorTransparency(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def LiveSectionEnabled(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def NumVertices(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def SectionPlaneOffset(self): ...
    @property
    def Settings(self): ...
    @property
    def SliceDepth(self): ...
    @property
    def State(self): ...
    @property
    def State2(self): ...
    @property
    def TopHeight(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VerticalDirection(self): ...
    @property
    def Vertices(self): ...
    @property
    def ViewingDirection(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @BottomHeight.setter
    def BottomHeight(self, value) -> None: ...
    @Elevation.setter
    def Elevation(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @IndicatorFillColor.setter
    def IndicatorFillColor(self, value) -> None: ...
    @IndicatorTransparency.setter
    def IndicatorTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @LiveSectionEnabled.setter
    def LiveSectionEnabled(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @SectionPlaneOffset.setter
    def SectionPlaneOffset(self, value) -> None: ...
    @SliceDepth.setter
    def SliceDepth(self, value) -> None: ...
    @State.setter
    def State(self, value) -> None: ...
    @State2.setter
    def State2(self, value) -> None: ...
    @TopHeight.setter
    def TopHeight(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VerticalDirection.setter
    def VerticalDirection(self, value) -> None: ...
    @Vertices.setter
    def Vertices(self, value) -> None: ...
    @ViewingDirection.setter
    def ViewingDirection(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSectionManager(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetLiveSection(self): ...
    def GetUniqueSectionName(self, pBaseName=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadSectionSettings(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetSectionTypeSettings(self, secType=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def CurrentSectionType(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @CurrentSectionType.setter
    def CurrentSectionType(self, value) -> None: ...


class IAcadSectionTypeSettings(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def BackgroundLinesColor(self): ...
    @property
    def BackgroundLinesHiddenLine(self): ...
    @property
    def BackgroundLinesLayer(self): ...
    @property
    def BackgroundLinesLinetype(self): ...
    @property
    def BackgroundLinesLinetypeScale(self): ...
    @property
    def BackgroundLinesLineweight(self): ...
    @property
    def BackgroundLinesPlotStyleName(self): ...
    @property
    def BackgroundLinesVisible(self): ...
    @property
    def CurveTangencyLinesColor(self): ...
    @property
    def CurveTangencyLinesLayer(self): ...
    @property
    def CurveTangencyLinesLinetype(self): ...
    @property
    def CurveTangencyLinesLinetypeScale(self): ...
    @property
    def CurveTangencyLinesLineweight(self): ...
    @property
    def CurveTangencyLinesPlotStyleName(self): ...
    @property
    def CurveTangencyLinesVisible(self): ...
    @property
    def DestinationBlock(self): ...
    @property
    def DestinationFile(self): ...
    @property
    def ForegroundLinesColor(self): ...
    @property
    def ForegroundLinesEdgeTransparency(self): ...
    @property
    def ForegroundLinesFaceTransparency(self): ...
    @property
    def ForegroundLinesHiddenLine(self): ...
    @property
    def ForegroundLinesLayer(self): ...
    @property
    def ForegroundLinesLinetype(self): ...
    @property
    def ForegroundLinesLinetypeScale(self): ...
    @property
    def ForegroundLinesLineweight(self): ...
    @property
    def ForegroundLinesPlotStyleName(self): ...
    @property
    def ForegroundLinesVisible(self): ...
    @property
    def GenerationOptions(self): ...
    @property
    def IntersectionBoundaryColor(self): ...
    @property
    def IntersectionBoundaryDivisionLines(self): ...
    @property
    def IntersectionBoundaryLayer(self): ...
    @property
    def IntersectionBoundaryLinetype(self): ...
    @property
    def IntersectionBoundaryLinetypeScale(self): ...
    @property
    def IntersectionBoundaryLineweight(self): ...
    @property
    def IntersectionBoundaryPlotStyleName(self): ...
    @property
    def IntersectionFillColor(self): ...
    @property
    def IntersectionFillFaceTransparency(self): ...
    @property
    def IntersectionFillHatchAngle(self): ...
    @property
    def IntersectionFillHatchPatternName(self): ...
    @property
    def IntersectionFillHatchPatternType(self): ...
    @property
    def IntersectionFillHatchScale(self): ...
    @property
    def IntersectionFillHatchSpacing(self): ...
    @property
    def IntersectionFillLayer(self): ...
    @property
    def IntersectionFillLinetype(self): ...
    @property
    def IntersectionFillLinetypeScale(self): ...
    @property
    def IntersectionFillLineweight(self): ...
    @property
    def IntersectionFillPlotStyleName(self): ...
    @property
    def IntersectionFillVisible(self): ...
    @property
    def SourceObjects(self): ...
    @BackgroundLinesColor.setter
    def BackgroundLinesColor(self, value) -> None: ...
    @BackgroundLinesHiddenLine.setter
    def BackgroundLinesHiddenLine(self, value) -> None: ...
    @BackgroundLinesLayer.setter
    def BackgroundLinesLayer(self, value) -> None: ...
    @BackgroundLinesLinetype.setter
    def BackgroundLinesLinetype(self, value) -> None: ...
    @BackgroundLinesLinetypeScale.setter
    def BackgroundLinesLinetypeScale(self, value) -> None: ...
    @BackgroundLinesLineweight.setter
    def BackgroundLinesLineweight(self, value) -> None: ...
    @BackgroundLinesPlotStyleName.setter
    def BackgroundLinesPlotStyleName(self, value) -> None: ...
    @BackgroundLinesVisible.setter
    def BackgroundLinesVisible(self, value) -> None: ...
    @CurveTangencyLinesColor.setter
    def CurveTangencyLinesColor(self, value) -> None: ...
    @CurveTangencyLinesLayer.setter
    def CurveTangencyLinesLayer(self, value) -> None: ...
    @CurveTangencyLinesLinetype.setter
    def CurveTangencyLinesLinetype(self, value) -> None: ...
    @CurveTangencyLinesLinetypeScale.setter
    def CurveTangencyLinesLinetypeScale(self, value) -> None: ...
    @CurveTangencyLinesLineweight.setter
    def CurveTangencyLinesLineweight(self, value) -> None: ...
    @CurveTangencyLinesPlotStyleName.setter
    def CurveTangencyLinesPlotStyleName(self, value) -> None: ...
    @CurveTangencyLinesVisible.setter
    def CurveTangencyLinesVisible(self, value) -> None: ...
    @DestinationBlock.setter
    def DestinationBlock(self, value) -> None: ...
    @DestinationFile.setter
    def DestinationFile(self, value) -> None: ...
    @ForegroundLinesColor.setter
    def ForegroundLinesColor(self, value) -> None: ...
    @ForegroundLinesEdgeTransparency.setter
    def ForegroundLinesEdgeTransparency(self, value) -> None: ...
    @ForegroundLinesFaceTransparency.setter
    def ForegroundLinesFaceTransparency(self, value) -> None: ...
    @ForegroundLinesHiddenLine.setter
    def ForegroundLinesHiddenLine(self, value) -> None: ...
    @ForegroundLinesLayer.setter
    def ForegroundLinesLayer(self, value) -> None: ...
    @ForegroundLinesLinetype.setter
    def ForegroundLinesLinetype(self, value) -> None: ...
    @ForegroundLinesLinetypeScale.setter
    def ForegroundLinesLinetypeScale(self, value) -> None: ...
    @ForegroundLinesLineweight.setter
    def ForegroundLinesLineweight(self, value) -> None: ...
    @ForegroundLinesPlotStyleName.setter
    def ForegroundLinesPlotStyleName(self, value) -> None: ...
    @ForegroundLinesVisible.setter
    def ForegroundLinesVisible(self, value) -> None: ...
    @GenerationOptions.setter
    def GenerationOptions(self, value) -> None: ...
    @IntersectionBoundaryColor.setter
    def IntersectionBoundaryColor(self, value) -> None: ...
    @IntersectionBoundaryDivisionLines.setter
    def IntersectionBoundaryDivisionLines(self, value) -> None: ...
    @IntersectionBoundaryLayer.setter
    def IntersectionBoundaryLayer(self, value) -> None: ...
    @IntersectionBoundaryLinetype.setter
    def IntersectionBoundaryLinetype(self, value) -> None: ...
    @IntersectionBoundaryLinetypeScale.setter
    def IntersectionBoundaryLinetypeScale(self, value) -> None: ...
    @IntersectionBoundaryLineweight.setter
    def IntersectionBoundaryLineweight(self, value) -> None: ...
    @IntersectionBoundaryPlotStyleName.setter
    def IntersectionBoundaryPlotStyleName(self, value) -> None: ...
    @IntersectionFillColor.setter
    def IntersectionFillColor(self, value) -> None: ...
    @IntersectionFillFaceTransparency.setter
    def IntersectionFillFaceTransparency(self, value) -> None: ...
    @IntersectionFillHatchAngle.setter
    def IntersectionFillHatchAngle(self, value) -> None: ...
    @IntersectionFillHatchPatternName.setter
    def IntersectionFillHatchPatternName(self, value) -> None: ...
    @IntersectionFillHatchPatternType.setter
    def IntersectionFillHatchPatternType(self, value) -> None: ...
    @IntersectionFillHatchScale.setter
    def IntersectionFillHatchScale(self, value) -> None: ...
    @IntersectionFillHatchSpacing.setter
    def IntersectionFillHatchSpacing(self, value) -> None: ...
    @IntersectionFillLayer.setter
    def IntersectionFillLayer(self, value) -> None: ...
    @IntersectionFillLinetype.setter
    def IntersectionFillLinetype(self, value) -> None: ...
    @IntersectionFillLinetypeScale.setter
    def IntersectionFillLinetypeScale(self, value) -> None: ...
    @IntersectionFillLineweight.setter
    def IntersectionFillLineweight(self, value) -> None: ...
    @IntersectionFillPlotStyleName.setter
    def IntersectionFillPlotStyleName(self, value) -> None: ...
    @IntersectionFillVisible.setter
    def IntersectionFillVisible(self, value) -> None: ...
    @SourceObjects.setter
    def SourceObjects(self, value) -> None: ...


class IAcadSectionTypeSettings2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def BackgroundLinesColor(self): ...
    @property
    def BackgroundLinesHiddenLine(self): ...
    @property
    def BackgroundLinesLayer(self): ...
    @property
    def BackgroundLinesLinetype(self): ...
    @property
    def BackgroundLinesLinetypeScale(self): ...
    @property
    def BackgroundLinesLineweight(self): ...
    @property
    def BackgroundLinesPlotStyleName(self): ...
    @property
    def BackgroundLinesVisible(self): ...
    @property
    def CurveTangencyLinesColor(self): ...
    @property
    def CurveTangencyLinesLayer(self): ...
    @property
    def CurveTangencyLinesLinetype(self): ...
    @property
    def CurveTangencyLinesLinetypeScale(self): ...
    @property
    def CurveTangencyLinesLineweight(self): ...
    @property
    def CurveTangencyLinesPlotStyleName(self): ...
    @property
    def CurveTangencyLinesVisible(self): ...
    @property
    def DestinationBlock(self): ...
    @property
    def DestinationFile(self): ...
    @property
    def ForegroundLinesColor(self): ...
    @property
    def ForegroundLinesEdgeTransparency(self): ...
    @property
    def ForegroundLinesFaceTransparency(self): ...
    @property
    def ForegroundLinesHiddenLine(self): ...
    @property
    def ForegroundLinesLayer(self): ...
    @property
    def ForegroundLinesLinetype(self): ...
    @property
    def ForegroundLinesLinetypeScale(self): ...
    @property
    def ForegroundLinesLineweight(self): ...
    @property
    def ForegroundLinesPlotStyleName(self): ...
    @property
    def ForegroundLinesVisible(self): ...
    @property
    def GenerationOptions(self): ...
    @property
    def IntersectionBoundaryColor(self): ...
    @property
    def IntersectionBoundaryDivisionLines(self): ...
    @property
    def IntersectionBoundaryLayer(self): ...
    @property
    def IntersectionBoundaryLinetype(self): ...
    @property
    def IntersectionBoundaryLinetypeScale(self): ...
    @property
    def IntersectionBoundaryLineweight(self): ...
    @property
    def IntersectionBoundaryPlotStyleName(self): ...
    @property
    def IntersectionBoundaryVisible(self): ...
    @property
    def IntersectionFillColor(self): ...
    @property
    def IntersectionFillFaceTransparency(self): ...
    @property
    def IntersectionFillHatchAngle(self): ...
    @property
    def IntersectionFillHatchPatternName(self): ...
    @property
    def IntersectionFillHatchPatternType(self): ...
    @property
    def IntersectionFillHatchScale(self): ...
    @property
    def IntersectionFillHatchSpacing(self): ...
    @property
    def IntersectionFillLayer(self): ...
    @property
    def IntersectionFillLinetype(self): ...
    @property
    def IntersectionFillLinetypeScale(self): ...
    @property
    def IntersectionFillLineweight(self): ...
    @property
    def IntersectionFillPlotStyleName(self): ...
    @property
    def IntersectionFillVisible(self): ...
    @property
    def SourceObjects(self): ...
    @BackgroundLinesColor.setter
    def BackgroundLinesColor(self, value) -> None: ...
    @BackgroundLinesHiddenLine.setter
    def BackgroundLinesHiddenLine(self, value) -> None: ...
    @BackgroundLinesLayer.setter
    def BackgroundLinesLayer(self, value) -> None: ...
    @BackgroundLinesLinetype.setter
    def BackgroundLinesLinetype(self, value) -> None: ...
    @BackgroundLinesLinetypeScale.setter
    def BackgroundLinesLinetypeScale(self, value) -> None: ...
    @BackgroundLinesLineweight.setter
    def BackgroundLinesLineweight(self, value) -> None: ...
    @BackgroundLinesPlotStyleName.setter
    def BackgroundLinesPlotStyleName(self, value) -> None: ...
    @BackgroundLinesVisible.setter
    def BackgroundLinesVisible(self, value) -> None: ...
    @CurveTangencyLinesColor.setter
    def CurveTangencyLinesColor(self, value) -> None: ...
    @CurveTangencyLinesLayer.setter
    def CurveTangencyLinesLayer(self, value) -> None: ...
    @CurveTangencyLinesLinetype.setter
    def CurveTangencyLinesLinetype(self, value) -> None: ...
    @CurveTangencyLinesLinetypeScale.setter
    def CurveTangencyLinesLinetypeScale(self, value) -> None: ...
    @CurveTangencyLinesLineweight.setter
    def CurveTangencyLinesLineweight(self, value) -> None: ...
    @CurveTangencyLinesPlotStyleName.setter
    def CurveTangencyLinesPlotStyleName(self, value) -> None: ...
    @CurveTangencyLinesVisible.setter
    def CurveTangencyLinesVisible(self, value) -> None: ...
    @DestinationBlock.setter
    def DestinationBlock(self, value) -> None: ...
    @DestinationFile.setter
    def DestinationFile(self, value) -> None: ...
    @ForegroundLinesColor.setter
    def ForegroundLinesColor(self, value) -> None: ...
    @ForegroundLinesEdgeTransparency.setter
    def ForegroundLinesEdgeTransparency(self, value) -> None: ...
    @ForegroundLinesFaceTransparency.setter
    def ForegroundLinesFaceTransparency(self, value) -> None: ...
    @ForegroundLinesHiddenLine.setter
    def ForegroundLinesHiddenLine(self, value) -> None: ...
    @ForegroundLinesLayer.setter
    def ForegroundLinesLayer(self, value) -> None: ...
    @ForegroundLinesLinetype.setter
    def ForegroundLinesLinetype(self, value) -> None: ...
    @ForegroundLinesLinetypeScale.setter
    def ForegroundLinesLinetypeScale(self, value) -> None: ...
    @ForegroundLinesLineweight.setter
    def ForegroundLinesLineweight(self, value) -> None: ...
    @ForegroundLinesPlotStyleName.setter
    def ForegroundLinesPlotStyleName(self, value) -> None: ...
    @ForegroundLinesVisible.setter
    def ForegroundLinesVisible(self, value) -> None: ...
    @GenerationOptions.setter
    def GenerationOptions(self, value) -> None: ...
    @IntersectionBoundaryColor.setter
    def IntersectionBoundaryColor(self, value) -> None: ...
    @IntersectionBoundaryDivisionLines.setter
    def IntersectionBoundaryDivisionLines(self, value) -> None: ...
    @IntersectionBoundaryLayer.setter
    def IntersectionBoundaryLayer(self, value) -> None: ...
    @IntersectionBoundaryLinetype.setter
    def IntersectionBoundaryLinetype(self, value) -> None: ...
    @IntersectionBoundaryLinetypeScale.setter
    def IntersectionBoundaryLinetypeScale(self, value) -> None: ...
    @IntersectionBoundaryLineweight.setter
    def IntersectionBoundaryLineweight(self, value) -> None: ...
    @IntersectionBoundaryPlotStyleName.setter
    def IntersectionBoundaryPlotStyleName(self, value) -> None: ...
    @IntersectionBoundaryVisible.setter
    def IntersectionBoundaryVisible(self, value) -> None: ...
    @IntersectionFillColor.setter
    def IntersectionFillColor(self, value) -> None: ...
    @IntersectionFillFaceTransparency.setter
    def IntersectionFillFaceTransparency(self, value) -> None: ...
    @IntersectionFillHatchAngle.setter
    def IntersectionFillHatchAngle(self, value) -> None: ...
    @IntersectionFillHatchPatternName.setter
    def IntersectionFillHatchPatternName(self, value) -> None: ...
    @IntersectionFillHatchPatternType.setter
    def IntersectionFillHatchPatternType(self, value) -> None: ...
    @IntersectionFillHatchScale.setter
    def IntersectionFillHatchScale(self, value) -> None: ...
    @IntersectionFillHatchSpacing.setter
    def IntersectionFillHatchSpacing(self, value) -> None: ...
    @IntersectionFillLayer.setter
    def IntersectionFillLayer(self, value) -> None: ...
    @IntersectionFillLinetype.setter
    def IntersectionFillLinetype(self, value) -> None: ...
    @IntersectionFillLinetypeScale.setter
    def IntersectionFillLinetypeScale(self, value) -> None: ...
    @IntersectionFillLineweight.setter
    def IntersectionFillLineweight(self, value) -> None: ...
    @IntersectionFillPlotStyleName.setter
    def IntersectionFillPlotStyleName(self, value) -> None: ...
    @IntersectionFillVisible.setter
    def IntersectionFillVisible(self, value) -> None: ...
    @SourceObjects.setter
    def SourceObjects(self, value) -> None: ...


class IAcadSecurityParams(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Action(self): ...
    @property
    def Algorithm(self): ...
    @property
    def Comment(self): ...
    @property
    def Issuer(self): ...
    @property
    def KeyLength(self): ...
    @property
    def Password(self): ...
    @property
    def ProviderName(self): ...
    @property
    def ProviderType(self): ...
    @property
    def SerialNumber(self): ...
    @property
    def Subject(self): ...
    @property
    def TimeServer(self): ...
    @Action.setter
    def Action(self, value) -> None: ...
    @Algorithm.setter
    def Algorithm(self, value) -> None: ...
    @Comment.setter
    def Comment(self, value) -> None: ...
    @Issuer.setter
    def Issuer(self, value) -> None: ...
    @KeyLength.setter
    def KeyLength(self, value) -> None: ...
    @Password.setter
    def Password(self, value) -> None: ...
    @ProviderName.setter
    def ProviderName(self, value) -> None: ...
    @ProviderType.setter
    def ProviderType(self, value) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value) -> None: ...
    @Subject.setter
    def Subject(self, value) -> None: ...
    @TimeServer.setter
    def TimeServer(self, value) -> None: ...


class IAcadSelectionSet(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddItems(self, pSelSet=...): ...
    def Clear(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Highlight(self, bFlag=...): ...
    def Item(self, Index=...): ...
    def RemoveItems(self, Objects=...): ...
    def Select(self, Mode=..., Point1=..., Point2=...,
               FilterType=..., FilterData=...): ...

    def SelectAtPoint(self, Point=..., FilterType=..., FilterData=...): ...
    def SelectByPolygon(self, Mode=..., PointsList=...,
                        FilterType=..., FilterData=...): ...

    def SelectOnScreen(self, FilterType=..., FilterData=...): ...
    def Update(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self) -> int: ...
    @property
    def Name(self) -> str: ...


class IAcadSelectionSets(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...) -> IAcadSelectionSet: ...
    def Item(self, Index=...) -> IAcadSelectionSet: ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self) -> int: ...


class IAcadShadowDisplay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def EnableShadowDisplay(self): ...
    @property
    def ShadowDisplay(self): ...
    @ShadowDisplay.setter
    def ShadowDisplay(self, value) -> None: ...


class IAcadShape(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadShape: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def ObliqueAngle(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @ObliqueAngle.setter
    def ObliqueAngle(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSolid(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadSolid: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSortentsTable(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Block(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetFullDrawOrder(self, Objects=..., honorSortentsSysvar=...): ...
    def GetRelativeDrawOrder(self, Objects=..., honorSortentsSysvar=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def MoveAbove(self, Objects=..., Target=...): ...
    def MoveBelow(self, Objects=..., Target=...): ...
    def MoveToBottom(self, Objects=...): ...
    def MoveToTop(self, Objects=...): ...
    def SetRelativeDrawOrder(self, Objects=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SwapOrder(self, Object1=..., Object2=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadSpline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddFitPoint(self, Index=..., fitPoint=...): ...

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadSpline: ...
    def Delete(self): ...
    def DeleteFitPoint(self, Index=...): ...
    def ElevateOrder(self, Order=...): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetControlPoint(self, Index=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetFitPoint(self, Index=...): ...
    def GetWeight(self, Index=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def PurgeFitData(self): ...
    def Reverse(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetControlPoint(self, Index=..., controlPoint=...): ...
    def SetFitPoint(self, Index=..., fitPoint=...): ...
    def SetWeight(self, Index=..., weight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Area(self): ...
    @property
    def Closed(self): ...
    @property
    def Closed2(self): ...
    @property
    def ControlPoints(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Degree(self): ...
    @property
    def Degree2(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EndTangent(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def FitPoints(self): ...
    @property
    def FitTolerance(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def IsPeriodic(self): ...
    @property
    def IsPlanar(self): ...
    @property
    def IsRational(self): ...
    @property
    def KnotParameterization(self): ...
    @property
    def Knots(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def NumberOfControlPoints(self): ...
    @property
    def NumberOfFitPoints(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def SplineFrame(self): ...
    @property
    def SplineMethod(self): ...
    @property
    def StartTangent(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Weights(self): ...
    @property
    def color(self): ...
    @Closed2.setter
    def Closed2(self, value) -> None: ...
    @ControlPoints.setter
    def ControlPoints(self, value) -> None: ...
    @Degree2.setter
    def Degree2(self, value) -> None: ...
    @EndTangent.setter
    def EndTangent(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @FitPoints.setter
    def FitPoints(self, value) -> None: ...
    @FitTolerance.setter
    def FitTolerance(self, value) -> None: ...
    @KnotParameterization.setter
    def KnotParameterization(self, value) -> None: ...
    @Knots.setter
    def Knots(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @SplineFrame.setter
    def SplineFrame(self, value) -> None: ...
    @SplineMethod.setter
    def SplineMethod(self, value) -> None: ...
    @StartTangent.setter
    def StartTangent(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Weights.setter
    def Weights(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadState(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def IsQuiescent(self): ...


class IAcadSubDMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadSubDMesh: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def FaceCount(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Smoothness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VertexCount(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Smoothness.setter
    def Smoothness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubDMeshEdge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def CreaseLevel(self): ...
    @property
    def CreaseType(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @CreaseLevel.setter
    def CreaseLevel(self, value) -> None: ...
    @CreaseType.setter
    def CreaseType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubDMeshFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def CreaseLevel(self): ...
    @property
    def CreaseType(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @CreaseLevel.setter
    def CreaseLevel(self, value) -> None: ...
    @CreaseType.setter
    def CreaseType(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubDMeshVertex(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Coordinates(self): ...
    @property
    def CreaseLevel(self): ...
    @property
    def CreaseType(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @CreaseLevel.setter
    def CreaseLevel(self, value) -> None: ...
    @CreaseType.setter
    def CreaseType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubEntSolidEdge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubEntSolidFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @Material.setter
    def Material(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubEntSolidNode(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubEntSolidVertex(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSubEntity(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def ObjectName(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSummaryInfo(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddCustomInfo(self, key=..., Value=...): ...
    def GetCustomByIndex(self, Index=..., pKey=..., pValue=...): ...
    def GetCustomByKey(self, key=..., pValue=...): ...
    def NumCustomInfo(self): ...
    def RemoveCustomByIndex(self, Index=...): ...
    def RemoveCustomByKey(self, key=...): ...
    def SetCustomByIndex(self, Index=..., key=..., Value=...): ...
    def SetCustomByKey(self, key=..., Value=...): ...
    def __iter__(self): ...
    @property
    def Author(self): ...
    @property
    def Comments(self): ...
    @property
    def HyperlinkBase(self): ...
    @property
    def Keywords(self): ...
    @property
    def LastSavedBy(self): ...
    @property
    def RevisionNumber(self): ...
    @property
    def Subject(self): ...
    @property
    def Title(self): ...
    @Author.setter
    def Author(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
    @HyperlinkBase.setter
    def HyperlinkBase(self, value) -> None: ...
    @Keywords.setter
    def Keywords(self, value) -> None: ...
    @LastSavedBy.setter
    def LastSavedBy(self, value) -> None: ...
    @RevisionNumber.setter
    def RevisionNumber(self, value) -> None: ...
    @Subject.setter
    def Subject(self, value) -> None: ...
    @Title.setter
    def Title(self, value) -> None: ...


class IAcadSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadSweptSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadSweptSurface: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Bank(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EdgeExtensionDistances(self): ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Length(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def MaintainAssociativity(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ProfileRotation(self): ...
    @property
    def ShowAssociativity(self): ...
    @property
    def SurfTrimAssociativity(self): ...
    @property
    def SurfaceType(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Twist(self): ...
    @property
    def UIsolineDensity(self): ...
    @property
    def VIsolineDensity(self): ...
    @property
    def Visible(self): ...
    @property
    def WireframeType(self): ...
    @property
    def color(self): ...
    @property
    def scale(self): ...
    @Bank.setter
    def Bank(self, value) -> None: ...
    @EdgeExtensionDistances.setter
    def EdgeExtensionDistances(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @MaintainAssociativity.setter
    def MaintainAssociativity(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ProfileRotation.setter
    def ProfileRotation(self, value) -> None: ...
    @ShowAssociativity.setter
    def ShowAssociativity(self, value) -> None: ...
    @SurfTrimAssociativity.setter
    def SurfTrimAssociativity(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Twist.setter
    def Twist(self, value) -> None: ...
    @UIsolineDensity.setter
    def UIsolineDensity(self, value) -> None: ...
    @VIsolineDensity.setter
    def VIsolineDensity(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @WireframeType.setter
    def WireframeType(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @scale.setter
    def scale(self, value) -> None: ...


class IAcadTable(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClearSubSelection(self): ...
    def ClearTableStyleOverrides(self, flag=...): ...
    def Copy(self)->IAcadTable: ...
    def CreateContent(self, nRow=..., nCol=..., nIndex=...): ...
    def Delete(self): ...
    def DeleteCellContent(self, row=..., col=...): ...
    def DeleteColumns(self, col=..., cols=...): ...
    def DeleteContent(self, nRow=..., nCol=...): ...
    def DeleteRows(self, row=..., Rows=...): ...
    def EnableMergeAll(self, nRow=..., nCol=..., bEnable=...): ...
    def Erase(self): ...
    def FormatValue(self, row=..., col=..., nOption=..., pVal=...): ...
    def GenerateLayout(self): ...
    def GetAlignment(self, rowType=...): ...
    def GetAttachmentPoint(self, row=..., col=...): ...
    def GetAutoScale(self, row=..., col=...): ...
    def GetAutoScale2(self, nRow=..., nCol=..., nContent=...): ...
    def GetBackgroundColor(self, rowType=...): ...
    def GetBackgroundColorNone(self, rowType=...): ...
    def GetBlockAttributeValue(self, row=..., col=..., attdefId=...): ...
    def GetBlockAttributeValue2(
        self, nRow=..., nCol=..., nContent=..., blkId=...): ...

    def GetBlockRotation(self, row=..., col=...): ...
    def GetBlockScale(self, row=..., col=...): ...
    def GetBlockTableRecordId(self, row=..., col=...): ...
    def GetBlockTableRecordId2(self, nRow=..., nCol=..., nContent=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBreakHeight(self, nIndex=...): ...
    def GetCellAlignment(self, row=..., col=...): ...
    def GetCellBackgroundColor(self, row=..., col=...): ...
    def GetCellBackgroundColorNone(self, row=..., col=...): ...
    def GetCellContentColor(self, row=..., col=...): ...
    def GetCellDataType(self, row=..., col=...,
                        pDataType=..., pUnitType=...): ...

    def GetCellExtents(self, row=..., col=..., bOuterCell=...): ...
    def GetCellFormat(self, row=..., col=...): ...
    def GetCellGridColor(self, row=..., col=..., edge=...): ...
    def GetCellGridLineWeight(self, row=..., col=..., edge=...): ...
    def GetCellGridVisibility(self, row=..., col=..., edge=...): ...
    def GetCellState(self, nRow=..., nCol=...): ...
    def GetCellStyle(self, nRow=..., nCol=...): ...
    def GetCellStyleOverrides(self, row=..., col=...): ...
    def GetCellTextHeight(self, row=..., col=...): ...
    def GetCellTextStyle(self, row=..., col=...): ...
    def GetCellType(self, row=..., col=...): ...
    def GetCellValue(self, row=..., col=...): ...
    def GetColumnName(self, nIndex=...): ...
    def GetColumnWidth(self, col=...): ...
    def GetContentColor(self, rowType=...): ...
    def GetContentColor2(self, nRow=..., nCol=..., nContent=...): ...
    def GetContentLayout(self, row=..., col=...): ...
    def GetContentType(self, nRow=..., nCol=...): ...
    def GetCustomData(self, nRow=..., nCol=..., szKey=..., pData=...): ...
    def GetDataFormat(self, nRow=..., nCol=..., nContent=...): ...
    def GetDataType(self, rowType=..., pDataType=..., pUnitType=...): ...
    def GetDataType2(self, nRow=..., nCol=..., nContent=...,
                     pDataType=..., pUnitType=...): ...

    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetFieldId(self, row=..., col=...): ...
    def GetFieldId2(self, nRow=..., nCol=..., nContent=...): ...
    def GetFormat(self, rowType=...): ...
    def GetFormula(self, nRow=..., nCol=..., nContent=...): ...
    def GetGridColor(self, gridLineType=..., rowType=...): ...
    def GetGridColor2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridDoubleLineSpacing(
        self, nRow=..., nCol=..., nGridLineType=...): ...

    def GetGridLineStyle(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridLineWeight(self, gridLineType=..., rowType=...): ...
    def GetGridLineWeight2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridLinetype(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridVisibility(self, gridLineType=..., rowType=...): ...
    def GetGridVisibility2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetHasFormula(self, nRow=..., nCol=..., nContent=...): ...
    def GetMargin(self, nRow=..., nCol=..., nMargin=...): ...
    def GetMinimumColumnWidth(self, col=...): ...
    def GetMinimumRowHeight(self, row=...): ...
    def GetOverride(self, nRow=..., nCol=..., nContent=...): ...
    def GetRotation(self, nRow=..., nCol=..., nContent=...): ...
    def GetRowHeight(self, row=...): ...
    def GetRowType(self, row=...): ...
    def GetScale(self, nRow=..., nCol=..., nContent=...): ...
    def GetSubSelection(self, rowMin=..., rowMax=...,
                        colMin=..., colMax=...): ...

    def GetText(self, row=..., col=...): ...
    def GetTextHeight(self, rowType=...): ...
    def GetTextHeight2(self, nRow=..., nCol=..., nContent=...): ...
    def GetTextRotation(self, row=..., col=...): ...
    def GetTextString(self, nRow=..., nCol=..., nContent=...): ...
    def GetTextStyle(self, rowType=...): ...
    def GetTextStyle2(self, nRow=..., nCol=..., nContent=...): ...
    def GetValue(self, nRow=..., nCol=..., nContent=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, wpt=..., wviewVec=...,
                resultRowIndex=..., resultColumnIndex=...): ...

    def InsertColumns(self, col=..., Width=..., cols=...): ...
    def InsertColumnsAndInherit(
        self, col=..., nInheritFrom=..., nNumCols=...): ...

    def InsertRows(self, row=..., Height=..., Rows=...): ...
    def InsertRowsAndInherit(
        self, nIndex=..., nInheritFrom=..., nNumRows=...): ...

    def IntersectWith(self, IntersectObject=..., option=...): ...
    def IsContentEditable(self, nRow=..., nCol=...): ...
    def IsEmpty(self, nRow=..., nCol=...): ...
    def IsFormatEditable(self, nRow=..., nCol=...): ...
    def IsMergeAllEnabled(self, nRow=..., nCol=...): ...
    def IsMergedCell(self, row=..., col=..., minRow=...,
                     maxRow=..., minCol=..., maxCol=...): ...

    def MergeCells(self, minRow=..., maxRow=..., minCol=..., maxCol=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def MoveContent(self, nRow=..., nCol=...,
                    nFromIndex=..., nToIndex=...): ...

    def RecomputeTableBlock(self, bForceUpdate=...): ...
    def RemoveAllOverrides(self, nRow=..., nCol=...): ...
    def ReselectSubRegion(self): ...
    def ResetCellValue(self, row=..., col=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...

    def Select(self, wpt=..., wvwVec=..., wvwxVec=..., wxaper=..., wyaper=...,
               allowOutside=..., resultRowIndex=..., resultColumnIndex=...): ...
    def SelectSubRegion(self, wpt1=..., wpt2=..., wvwVec=..., wvwxVec=..., seltype=...,
                        bIncludeCurrentSelection=..., rowMin=..., rowMax=..., colMin=..., colMax=...): ...

    def SetAlignment(self, rowTypes=..., cellAlignment=...): ...
    def SetAutoScale(self, row=..., col=..., bValue=...): ...
    def SetAutoScale2(self, nRow=..., nCol=...,
                      nContent=..., bAutoFit=...): ...

    def SetBackgroundColor(self, rowTypes=..., pColor=...): ...
    def SetBackgroundColorNone(self, rowTypes=..., bValue=...): ...

    def SetBlockAttributeValue(
        self, row=..., col=..., attdefId=..., bstrValue=...): ...
    def SetBlockAttributeValue2(
        self, nRow=..., nCol=..., nContent=..., blkId=..., Value=...): ...

    def SetBlockRotation(self, row=..., col=..., blkRotation=...): ...
    def SetBlockScale(self, row=..., col=..., blkScale=...): ...

    def SetBlockTableRecordId(self, row=..., col=...,
                              blkId=..., bAutoFit=...): ...
    def SetBlockTableRecordId2(
        self, nRow=..., nCol=..., nContent=..., blkId=..., autoFit=...): ...

    def SetBreakHeight(self, nIndex=..., Height=...): ...
    def SetCellAlignment(self, row=..., col=..., cellAlignment=...): ...
    def SetCellBackgroundColor(self, row=..., col=..., pColor=...): ...
    def SetCellBackgroundColorNone(self, row=..., col=..., bValue=...): ...
    def SetCellContentColor(self, row=..., col=..., pColor=...): ...
    def SetCellDataType(self, row=..., col=...,
                        dataType=..., unitType=...): ...

    def SetCellFormat(self, row=..., col=..., pFormat=...): ...
    def SetCellGridColor(self, row=..., col=..., edges=..., pColor=...): ...

    def SetCellGridLineWeight(self, row=..., col=...,
                              edges=..., Lineweight=...): ...
    def SetCellGridVisibility(self, row=..., col=...,
                              edges=..., bValue=...): ...

    def SetCellState(self, nRow=..., nCol=..., nLock=...): ...
    def SetCellStyle(self, nRow=..., nCol=..., szCellStyle=...): ...
    def SetCellTextHeight(self, row=..., col=..., TextHeight=...): ...
    def SetCellTextStyle(self, row=..., col=..., bstrName=...): ...
    def SetCellType(self, row=..., col=..., CellType=...): ...
    def SetCellValue(self, row=..., col=..., val=...): ...
    def SetCellValueFromText(self, row=..., col=..., val=..., nOption=...): ...
    def SetColumnName(self, nIndex=..., Name=...): ...
    def SetColumnWidth(self, col=..., Width=...): ...
    def SetContentColor(self, rowTypes=..., pColor=...): ...
    def SetContentColor2(self, nRow=..., nCol=...,
                         nContent=..., pColor=...): ...

    def SetContentLayout(self, row=..., col=..., nLayout=...): ...
    def SetCustomData(self, nRow=..., nCol=..., szKey=..., data=...): ...
    def SetDataFormat(self, nRow=..., nCol=...,
                      nContent=..., szFormat=...): ...

    def SetDataType(self, rowTypes=..., dataType=..., unitType=...): ...
    def SetDataType2(self, nRow=..., nCol=..., nContent=...,
                     dataType=..., unitType=...): ...

    def SetFieldId(self, row=..., col=..., fieldId=...): ...
    def SetFieldId2(self, nRow=..., nCol=..., nContent=...,
                    acDbObjectId=..., nflag=...): ...

    def SetFormat(self, rowTypes=..., pFormat=...): ...
    def SetFormula(self, nRow=..., nCol=..., nContent=..., pszFormula=...): ...
    def SetGridColor(self, gridLineTypes=..., rowTypes=..., pColor=...): ...

    def SetGridColor2(self, nRow=..., nCol=...,
                      nGridLineType=..., pColor=...): ...

    def SetGridDoubleLineSpacing(
        self, nRow=..., nCol=..., nGridLineType=..., fSpacing=...): ...

    def SetGridLineStyle(self, nRow=..., nCol=...,
                         nGridLineTypes=..., nLineStyle=...): ...

    def SetGridLineWeight(self, gridLineTypes=...,
                          rowTypes=..., Lineweight=...): ...

    def SetGridLineWeight2(self, nRow=..., nCol=...,
                           nGridLineType=..., Lineweight=...): ...

    def SetGridLinetype(self, nRow=..., nCol=...,
                        nGridLineType=..., idLinetype=...): ...

    def SetGridVisibility(self, gridLineTypes=...,
                          rowTypes=..., bValue=...): ...
    def SetGridVisibility2(self, nRow=..., nCol=...,
                           nGridLineType=..., bVisible=...): ...

    def SetMargin(self, nRow=..., nCol=..., nMargins=..., fMargin=...): ...
    def SetOverride(self, nRow=..., nCol=..., nContent=..., nProp=...): ...
    def SetRotation(self, nRow=..., nCol=..., nContent=..., Value=...): ...
    def SetRowHeight(self, row=..., Height=...): ...
    def SetScale(self, nRow=..., nCol=..., nContent=..., scale=...): ...
    def SetSubSelection(self, rowMin=..., rowMax=...,
                        colMin=..., colMax=...): ...

    def SetText(self, row=..., col=..., pStr=...): ...
    def SetTextHeight(self, rowTypes=..., TextHeight=...): ...
    def SetTextHeight2(self, nRow=..., nCol=..., nContent=..., Height=...): ...
    def SetTextRotation(self, row=..., col=..., TextRotation=...): ...
    def SetTextString(self, nRow=..., nCol=..., nContent=..., Text=...): ...
    def SetTextStyle(self, rowTypes=..., bstrName=...): ...
    def SetTextStyle2(self, nRow=..., nCol=...,
                      nContent=..., bstrStyleName=...): ...

    def SetToolTip(self, nRow=..., nCol=..., tip=...): ...
    def SetValue(self, nRow=..., nCol=..., nContent=..., acValue=...): ...
    def SetValueFromText(self, nRow=..., nCol=...,
                         nContent=..., szText=..., nOption=...): ...

    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def UnmergeCells(self, minRow=..., maxRow=..., minCol=..., maxCol=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AllowManualHeights(self): ...
    @property
    def AllowManualPositions(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BreakSpacing(self): ...
    @property
    def BreaksEnabled(self): ...
    @property
    def Columns(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Direction(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def FlowDirection(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HasSubSelection(self): ...
    @property
    def HeaderSuppressed(self): ...
    @property
    def Height(self): ...
    @property
    def HorzCellMargin(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def MinimumTableHeight(self): ...
    @property
    def MinimumTableWidth(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def RegenerateTableSuppressed(self): ...
    @property
    def RepeatBottomLabels(self): ...
    @property
    def RepeatTopLabels(self): ...
    @property
    def Rows(self): ...
    @property
    def StyleName(self): ...
    @property
    def TableBreakFlowDirection(self): ...
    @property
    def TableBreakHeight(self): ...
    @property
    def TableStyleOverrides(self): ...
    @property
    def TitleSuppressed(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def VertCellMargin(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @AllowManualHeights.setter
    def AllowManualHeights(self, value) -> None: ...
    @AllowManualPositions.setter
    def AllowManualPositions(self, value) -> None: ...
    @BreakSpacing.setter
    def BreakSpacing(self, value) -> None: ...
    @BreaksEnabled.setter
    def BreaksEnabled(self, value) -> None: ...
    @ColumnWidth.setter
    def ColumnWidth(self, value) -> None: ...
    @Columns.setter
    def Columns(self, value) -> None: ...
    @Direction.setter
    def Direction(self, value) -> None: ...
    @EnableBreak.setter
    def EnableBreak(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @FlowDirection.setter
    def FlowDirection(self, value) -> None: ...
    @HeaderSuppressed.setter
    def HeaderSuppressed(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @HorzCellMargin.setter
    def HorzCellMargin(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @RegenerateTableSuppressed.setter
    def RegenerateTableSuppressed(self, value) -> None: ...
    @RepeatBottomLabels.setter
    def RepeatBottomLabels(self, value) -> None: ...
    @RepeatTopLabels.setter
    def RepeatTopLabels(self, value) -> None: ...
    @RowHeight.setter
    def RowHeight(self, value) -> None: ...
    @Rows.setter
    def Rows(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TableBreakFlowDirection.setter
    def TableBreakFlowDirection(self, value) -> None: ...
    @TableBreakHeight.setter
    def TableBreakHeight(self, value) -> None: ...
    @TitleSuppressed.setter
    def TitleSuppressed(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @VertCellMargin.setter
    def VertCellMargin(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadTableStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CreateCellStyle(self, bstrCellStyle=...): ...
    def CreateCellStyleFromStyle(
        self, bstrCellStyle=..., bstrSourceCellStyle=...): ...

    def Delete(self): ...
    def DeleteCellStyle(self, bstrCellStyle=...): ...
    def EnableMergeAll(self, bstrCellStyle=..., bEnable=...): ...
    def Erase(self): ...
    def GetAlignment(self, rowType=...): ...
    def GetAlignment2(self, bstrCellStyle=...): ...
    def GetBackgroundColor(self, rowType=...): ...
    def GetBackgroundColor2(self, bstrCellStyle=...): ...
    def GetBackgroundColorNone(self, rowType=...): ...
    def GetCellClass(self, bstrCellStyle=...): ...
    def GetCellStyles(self, cellStylesArray=...): ...
    def GetColor(self, rowType=...): ...
    def GetColor2(self, bstrCellStyle=...): ...
    def GetDataType(self, rowType=..., pDataType=..., pUnitType=...): ...
    def GetDataType2(self, bstrCellStyle=...,
                     pDataType=..., pUnitType=...): ...

    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetFormat(self, rowType=...): ...
    def GetFormat2(self, bstrCellStyle=..., pbstrFormat=...): ...
    def GetGridColor(self, gridLineType=..., rowType=...): ...
    def GetGridColor2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetGridLineWeight(self, gridLineType=..., rowType=...): ...
    def GetGridLineWeight2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetGridVisibility(self, gridLineType=..., rowType=...): ...
    def GetGridVisibility2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetIsCellStyleInUse(self, pszCellStyle=...): ...
    def GetIsMergeAllEnabled(self, bstrCellStyle=...): ...
    def GetRotation(self, bstrCellStyle=...): ...
    def GetTextHeight(self, rowType=...): ...
    def GetTextHeight2(self, bstrCellStyle=...): ...
    def GetTextStyle(self, rowType=...): ...
    def GetTextStyleId(self, bstrCellStyle=...): ...
    def GetUniqueCellStyleName(self, pszBaseName=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RenameCellStyle(self, bstrOldName=..., bstrNewName=...): ...
    def SetAlignment(self, rowTypes=..., cellAlignment=...): ...
    def SetAlignment2(self, bstrCellStyle=..., cellAlignment=...): ...
    def SetBackgroundColor(self, rowTypes=..., pColor=...): ...
    def SetBackgroundColor2(self, bstrCellStyle=..., color=...): ...
    def SetBackgroundColorNone(self, rowTypes=..., bValue=...): ...
    def SetCellClass(self, bstrCellStyle=..., cellClass=...): ...
    def SetColor(self, rowTypes=..., pColor=...): ...
    def SetColor2(self, bstrCellStyle=..., color=...): ...
    def SetDataType(self, rowTypes=..., nDataType=..., nUnitType=...): ...
    def SetDataType2(self, bstrCellStyle=...,
                     nDataType=..., nUnitType=...): ...

    def SetFormat(self, rowTypes=..., val=...): ...
    def SetFormat2(self, bstrCellStyle=..., bstrFormat=...): ...
    def SetGridColor(self, gridLineTypes=..., rowTypes=..., pColor=...): ...

    def SetGridColor2(self, bstrCellStyle=...,
                      gridLineTypes=..., pColor=...): ...

    def SetGridLineWeight(self, gridLineTypes=...,
                          rowTypes=..., Lineweight=...): ...

    def SetGridLineWeight2(self, bstrCellStyle=...,
                           gridLineTypes=..., Lineweight=...): ...

    def SetGridVisibility(self, gridLineTypes=...,
                          rowTypes=..., bValue=...): ...
    def SetGridVisibility2(self, bstrCellStyle=...,
                           gridLineTypes=..., bValue=...): ...

    def SetRotation(self, bstrCellStyle=..., Rotation=...): ...
    def SetTemplateId(self, val=..., option=...): ...
    def SetTextHeight(self, rowTypes=..., TextHeight=...): ...
    def SetTextHeight2(self, bstrCellStyle=..., Height=...): ...
    def SetTextStyle(self, rowTypes=..., bstrName=...): ...
    def SetTextStyleId(self, bstrCellStyle=..., val=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BitFlags(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Description(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def FlowDirection(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HeaderSuppressed(self): ...
    @property
    def HorzCellMargin(self): ...
    @property
    def Name(self): ...
    @property
    def NumCellStyles(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def TemplateId(self): ...
    @property
    def TitleSuppressed(self): ...
    @property
    def VertCellMargin(self): ...
    @BitFlags.setter
    def BitFlags(self, value) -> None: ...
    @Description.setter
    def Description(self, value) -> None: ...
    @FlowDirection.setter
    def FlowDirection(self, value) -> None: ...
    @HeaderSuppressed.setter
    def HeaderSuppressed(self, value) -> None: ...
    @HorzCellMargin.setter
    def HorzCellMargin(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @TemplateId.setter
    def TemplateId(self, value) -> None: ...
    @TitleSuppressed.setter
    def TitleSuppressed(self, value) -> None: ...
    @VertCellMargin.setter
    def VertCellMargin(self, value) -> None: ...


class IAcadText(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadText: ...
    def Delete(self): ...
    def Erase(self): ...
    def FieldCode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Alignment(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Backward(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def HorizontalAlignment(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def ObliqueAngle(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TextAlignmentPoint(self): ...
    @property
    def TextGenerationFlag(self): ...
    @property
    def TextString(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UpsideDown(self): ...
    @property
    def VerticalAlignment(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Alignment.setter
    def Alignment(self, value) -> None: ...
    @Backward.setter
    def Backward(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @ObliqueAngle.setter
    def ObliqueAngle(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TextAlignmentPoint.setter
    def TextAlignmentPoint(self, value) -> None: ...
    @TextGenerationFlag.setter
    def TextGenerationFlag(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UpsideDown.setter
    def UpsideDown(self, value) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadTextStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetFont(self, TypeFace=..., Bold=..., Italic=...,
                Charset=..., PitchAndFamily=...): ...

    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetFont(self, TypeFace=..., Bold=..., Italic=...,
                Charset=..., PitchAndFamily=...): ...

    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def BigFontFile(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def LastHeight(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def ObliqueAngle(self): ...
    @property
    def OwnerID(self): ...
    @property
    def TextGenerationFlag(self): ...
    @property
    def Width(self): ...
    @property
    def fontFile(self): ...
    @BigFontFile.setter
    def BigFontFile(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @LastHeight.setter
    def LastHeight(self, value) -> None: ...
    @ObliqueAngle.setter
    def ObliqueAngle(self, value) -> None: ...
    @TextGenerationFlag.setter
    def TextGenerationFlag(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @fontFile.setter
    def fontFile(self, value) -> None: ...


class IAcadTextStyles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadTolerance(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadTolerance: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def DimensionLineColor(self): ...
    @property
    def DirectionVector(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def InsertionPoint(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def StyleName(self): ...
    @property
    def TextColor(self): ...
    @property
    def TextHeight(self): ...
    @property
    def TextString(self): ...
    @property
    def TextStyle(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @DimensionLineColor.setter
    def DimensionLineColor(self, value) -> None: ...
    @DirectionVector.setter
    def DirectionVector(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @InsertionPoint.setter
    def InsertionPoint(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @StyleName.setter
    def StyleName(self, value) -> None: ...
    @TextColor.setter
    def TextColor(self, value) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value) -> None: ...
    @TextString.setter
    def TextString(self, value) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadToolbar(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddSeparator(self, Index=...): ...
    def AddToolbarButton(self, Index=..., Name=...,
                         HelpString=..., Macro=..., FlyoutButton=...): ...

    def Delete(self): ...
    def Dock(self, Side=...): ...
    def Float(self, top=..., left=..., NumberFloatRows=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def DockStatus(self): ...
    @property
    def FloatingRows(self): ...
    @property
    def Height(self): ...
    @property
    def HelpString(self): ...
    @property
    def LargeButtons(self): ...
    @property
    def Name(self): ...
    @property
    def Parent(self): ...
    @property
    def TagString(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def left(self): ...
    @property
    def top(self): ...
    @FloatingRows.setter
    def FloatingRows(self, value) -> None: ...
    @HelpString.setter
    def HelpString(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @left.setter
    def left(self, value) -> None: ...
    @top.setter
    def top(self, value) -> None: ...


class IAcadToolbarItem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AttachToolbarToFlyout(self, MenuGroupName=..., ToolbarName=...): ...
    def Delete(self): ...
    def GetBitmaps(self, SmallIconName=..., LargeIconName=...): ...
    def SetBitmaps(self, SmallIconName=..., LargeIconName=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def CommandDisplayName(self): ...
    @property
    def Flyout(self): ...
    @property
    def HelpString(self): ...
    @property
    def Index(self): ...
    @property
    def Macro(self): ...
    @property
    def Name(self): ...
    @property
    def Parent(self): ...
    @property
    def TagString(self): ...
    @property
    def Type(self): ...
    @CommandDisplayName.setter
    def CommandDisplayName(self, value) -> None: ...
    @HelpString.setter
    def HelpString(self, value) -> None: ...
    @Macro.setter
    def Macro(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @TagString.setter
    def TagString(self, value) -> None: ...


class IAcadToolbars(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, ToolbarName=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def LargeButtons(self): ...
    @property
    def Parent(self): ...
    @LargeButtons.setter
    def LargeButtons(self, value) -> None: ...


class IAcadTrace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Coordinate(self, Index=...): ...
    def Copy(self)->IAcadTrace: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Coordinates(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Normal(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Thickness(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @Coordinates.setter
    def Coordinates(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Normal.setter
    def Normal(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Thickness.setter
    def Thickness(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadUCS(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetUCSMatrix(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def XVector(self): ...
    @property
    def YVector(self): ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @XVector.setter
    def XVector(self, value) -> None: ...
    @YVector.setter
    def YVector(self, value) -> None: ...


class IAcadUCSs(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Origin=..., XAxisPoint=..., YAxisPoint=..., Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadUnderlay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClipBoundary(self, boundry=...): ...
    def Copy(self)->IAcadUnderlay: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def AdjustForBackground(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ClippingEnabled(self): ...
    @property
    def Contrast(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fade(self): ...
    @property
    def File(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ItemName(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Monochrome(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Position(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def UnderlayLayerOverrideApplied(self): ...
    @property
    def UnderlayName(self): ...
    @property
    def UnderlayVisibility(self): ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @AdjustForBackground.setter
    def AdjustForBackground(self, value) -> None: ...
    @ClippingEnabled.setter
    def ClippingEnabled(self, value) -> None: ...
    @Contrast.setter
    def Contrast(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fade.setter
    def Fade(self, value) -> None: ...
    @File.setter
    def File(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @ItemName.setter
    def ItemName(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Monochrome.setter
    def Monochrome(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Position.setter
    def Position(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @UnderlayLayerOverrideApplied.setter
    def UnderlayLayerOverrideApplied(self, value) -> None: ...
    @UnderlayName.setter
    def UnderlayName(self, value) -> None: ...
    @UnderlayVisibility.setter
    def UnderlayVisibility(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAcadUtility(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AngleFromXAxis(self, StartPoint=..., EndPoint=...): ...
    def AngleToReal(self, Angle=..., Unit=...): ...
    def AngleToString(self, Angle=..., Unit=..., precision=...): ...
    def CreateTypedArray(self, *args): ...
    def DistanceToReal(self, Distance=..., Unit=...): ...
    def GetAngle(self, Point=..., Prompt=...): ...
    def GetCorner(self, Point=..., Prompt=...): ...
    def GetDistance(self, Point=..., Prompt=...): ...
    def GetEntity(self, Prompt=...): ...
    def GetInput(self): ...
    def GetInteger(self, Prompt=...): ...
    def GetKeyword(self, Prompt=...): ...
    def GetObjectIdString(self, Object=..., bHex=...): ...
    def GetOrientation(self, Point=..., Prompt=...): ...
    def GetPoint(self, Prompt=...): ...
    def GetPointWithBase(self, Point=..., Prompt=...): ...
    def GetReal(self, Prompt=...): ...
    def GetRemoteFile(self, URL=..., LocalFile=..., IgnoreCache=...): ...
    def GetString(self, HasSpaces=..., Prompt=...): ...
    def GetSubEntity(self, Prompt=...): ...

    def InitializeUserInput(self, Bits=..., KeyWordList=...): ...
    def IsRemoteFile(self, LocalFile=..., URL=...): ...
    def IsURL(self, URL=...): ...
    def LaunchBrowserDialog(self, SelectedURL=..., DialogTitle=..., OpenButtonCaption=...,
                            StartPageURL=..., RegistryRootKey=..., OpenButtonAlwaysEnabled=...): ...

    def PolarPoint(self, Point=..., Angle=..., Distance=...): ...
    def Prompt(self, Message=...): ...
    def PutRemoteFile(self, URL=..., LocalFile=...): ...
    def RealToString(self, Value=..., Unit=..., precision=...): ...
    def SendModelessOperationEnded(self, Context=...): ...
    def SendModelessOperationStart(self, Context=...): ...
    def TranslateCoordinates(self, Point=..., FromCoordSystem=...,
                             ToCoordSystem=..., Displacement=..., OCSNormal=...): ...

    def __iter__(self): ...


class IAcadView(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def CategoryName(self): ...
    @property
    def Center(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Direction(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def HasVpAssociation(self): ...
    @property
    def Height(self): ...
    @property
    def LayerState(self): ...
    @property
    def LayoutId(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def Target(self): ...
    @property
    def Width(self): ...
    @CategoryName.setter
    def CategoryName(self, value) -> None: ...
    @Center.setter
    def Center(self, value) -> None: ...
    @Direction.setter
    def Direction(self, value) -> None: ...
    @HasVpAssociation.setter
    def HasVpAssociation(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @LayerState.setter
    def LayerState(self, value) -> None: ...
    @LayoutId.setter
    def LayoutId(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Target.setter
    def Target(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...


class IAcadViewport(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetView(self, View=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Split(self, NumWins=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def ArcSmoothness(self): ...
    @property
    def Center(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Direction(self): ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def GridOn(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def LowerLeftCorner(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OrthoOn(self): ...
    @property
    def OwnerID(self): ...
    @property
    def SnapBasePoint(self): ...
    @property
    def SnapOn(self): ...
    @property
    def SnapRotationAngle(self): ...
    @property
    def Target(self): ...
    @property
    def UCSIconAtOrigin(self): ...
    @property
    def UCSIconOn(self): ...
    @property
    def UpperRightCorner(self): ...
    @property
    def Width(self): ...
    @ArcSmoothness.setter
    def ArcSmoothness(self, value) -> None: ...
    @Center.setter
    def Center(self, value) -> None: ...
    @Direction.setter
    def Direction(self, value) -> None: ...
    @GridOn.setter
    def GridOn(self, value) -> None: ...
    @Height.setter
    def Height(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @OrthoOn.setter
    def OrthoOn(self, value) -> None: ...
    @SnapBasePoint.setter
    def SnapBasePoint(self, value) -> None: ...
    @SnapOn.setter
    def SnapOn(self, value) -> None: ...
    @SnapRotationAngle.setter
    def SnapRotationAngle(self, value) -> None: ...
    @Target.setter
    def Target(self, value) -> None: ...
    @UCSIconAtOrigin.setter
    def UCSIconAtOrigin(self, value) -> None: ...
    @UCSIconOn.setter
    def UCSIconOn(self, value) -> None: ...
    @Width.setter
    def Width(self, value) -> None: ...


class IAcadViewports(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def DeleteConfiguration(self, Name=...): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadViews(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Count(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...


class IAcadWipeout(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def ClipBoundary(self, boundry=...): ...
    def Copy(self)->IAcadWipeout: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Brightness(self): ...
    @property
    def ClippingEnabled(self): ...
    @property
    def Contrast(self): ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Fade(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Height(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def ImageFile(self): ...
    @property
    def ImageHeight(self): ...
    @property
    def ImageVisibility(self): ...
    @property
    def ImageWidth(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def Rotation(self): ...
    @property
    def ScaleFactor(self): ...
    @property
    def ShowRotation(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def Width(self): ...
    @property
    def color(self): ...
    @property
    def transparency(self): ...
    @Brightness.setter
    def Brightness(self, value) -> None: ...
    @ClippingEnabled.setter
    def ClippingEnabled(self, value) -> None: ...
    @Contrast.setter
    def Contrast(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Fade.setter
    def Fade(self, value) -> None: ...
    @ImageFile.setter
    def ImageFile(self, value) -> None: ...
    @ImageHeight.setter
    def ImageHeight(self, value) -> None: ...
    @ImageVisibility.setter
    def ImageVisibility(self, value) -> None: ...
    @ImageWidth.setter
    def ImageWidth(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @Rotation.setter
    def Rotation(self, value) -> None: ...
    @ScaleFactor.setter
    def ScaleFactor(self, value) -> None: ...
    @ShowRotation.setter
    def ShowRotation(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
    @transparency.setter
    def transparency(self, value) -> None: ...


class IAcadXRecord(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def GetXRecordData(self, XRecordDataType=..., XRecordDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SetXRecordData(self, XRecordDataType=..., XRecordDataValue=...): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Name(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def TranslateIDs(self): ...
    @Name.setter
    def Name(self, value) -> None: ...
    @TranslateIDs.setter
    def TranslateIDs(self, value) -> None: ...


class IAcadXline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete

    def ArrayPolar(self, NumberOfObjects=...,
                   AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=...,
                         DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...

    def Copy(self)->IAcadXline: ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self)->IAcadDictionary: ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
    @property
    def Application(self) -> IAcadApplication: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Document(self) -> IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self) -> IAcadHyperlinks: ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self) -> IAcadAcCmColor: ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    @property
    def BasePoint(self): ...
    @property
    def DirectionVector(self): ...
    @property
    def SecondPoint(self): ...
    @BasePoint.setter
    def BasePoint(self, value) -> None: ...
    @DirectionVector.setter
    def DirectionVector(self, value) -> None: ...
    @SecondPoint.setter
    def SecondPoint(self, value) -> None: ...
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...


class IAxDbDocument(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyObjects(self, Objects=..., Owner=...): ...
    def DxfIn(self, FileName=..., LogFileName=...): ...
    def DxfOut(self, FileName=..., precision=..., SaveThumbnailImage=...): ...
    def HandleToObject(self, Handle=...): ...
    def ObjectIdToObject(self, ObjectID=...): ...
    def Open(self, FileName=..., Password=...): ...
    def Save(self): ...
    def SaveAs(self, FileName=..., vSecurityParams=...): ...
    def __iter__(self): ...
    @property
    def Application(self): ...
    @property
    def Blocks(self) -> IAcadBlocks: ...
    @property
    def Database(self) -> IAcadDatabase: ...
    @property
    def Dictionaries(self) -> IAcadDictionaries: ...
    @property
    def DimStyles(self) -> IAcadDimStyles: ...
    @property
    def ElevationModelSpace(self): ...
    @property
    def ElevationPaperSpace(self): ...
    @property
    def Groups(self) -> IAcadDimStyles: ...
    @property
    def Layers(self) -> IAcadLayers: ...
    @property
    def Layouts(self) -> IAcadLayouts: ...
    @property
    def Limits(self): ...
    @property
    def Linetypes(self) -> IAcadLineTypes: ...
    @property
    def Materials(self) -> IAcadMaterials: ...
    @property
    def ModelSpace(self) -> IAcadModelSpace: ...
    @property
    def Name(self): ...
    @property
    def PaperSpace(self) -> IAcadPaperSpace: ...
    @property
    def PlotConfigurations(self) -> IAcadPlotConfigurations: ...
    @property
    def Preferences(self) -> IAcadDatabasePreferences: ...
    @property
    def RegisteredApplications(self) -> IAcadRegisteredApplications: ...
    @property
    def SectionManager(self) -> IAcadSectionManager: ...
    @property
    def SummaryInfo(self) -> IAcadSummaryInfo: ...
    @property
    def TextStyles(self) -> IAcadTextStyles: ...
    @property
    def UserCoordinateSystems(self) -> IAcadUCSs: ...
    @property
    def Viewports(self) -> IAcadViewports: ...
    @property
    def Views(self) -> IAcadViews: ...
    @ElevationModelSpace.setter
    def ElevationModelSpace(self, value) -> None: ...
    @ElevationPaperSpace.setter
    def ElevationPaperSpace(self, value) -> None: ...
    @Limits.setter
    def Limits(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...


class _DAcadApplicationEvents:
    CLSID: Incomplete
    CLSID_Sink: Incomplete
    coclass_clsid: Incomplete
    def __init__(self, oobj: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...


class _DAcadDocumentEvents:
    CLSID: Incomplete
    CLSID_Sink: Incomplete
    coclass_clsid: Incomplete
    def __init__(self, oobj: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...


class Acad3DFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DFace


class Acad3DPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DPolyline


class Acad3DSolid(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DSolid


class AcadAcCmColor(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAcCmColor


class AcadApplication(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    default_source: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadApplication


class AcadArc(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadArc


class AcadAttribute(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAttribute


class AcadAttributeReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAttributeReference


class AcadBlock(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlock


class AcadBlockReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlockReference


class AcadBlocks(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlocks


class AcadCircle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadCircle


class AcadComparedReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadComparedReference


class AcadDatabase(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDatabase


class AcadDatabasePreferences(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDatabasePreferences


class AcadDgnUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay


class AcadDictionaries(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDictionaries


class AcadDictionary(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDictionary


class AcadDim3PointAngular(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDim3PointAngular


class AcadDimAligned(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimAligned


class AcadDimAngular(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimAngular


class AcadDimArcLength(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimArcLength


class AcadDimDiametric(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimDiametric


class AcadDimOrdinate(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimOrdinate


class AcadDimRadial(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRadial


class AcadDimRadialLarge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRadialLarge


class AcadDimRotated(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRotated


class AcadDimStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimStyle


class AcadDimStyles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimStyles


class AcadDimension(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimension


class AcadDocument(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    default_source: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDocument


class AcadDocuments(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDocuments


class AcadDwfUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay


class AcadDynamicBlockReferenceProperty(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDynamicBlockReferenceProperty


class AcadEllipse(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadEllipse


class AcadEntity(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadEntity


class AcadExternalReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadExternalReference


class AcadExtrudedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadExtrudedSurface


class AcadGeoPositionMarker(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGeoPositionMarker


class AcadGeomapImage(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGeomapImage


class AcadGroup(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGroup


class AcadGroups(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGroups


class AcadHatch(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHatch


class AcadHelix(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHelix


class AcadHyperlink(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHyperlink


class AcadHyperlinks(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHyperlinks


class AcadIdPair(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadIdPair


class AcadLWPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLWPolyline


class AcadLayer(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayer


class AcadLayerStateManager(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayerStateManager


class AcadLayers(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayers


class AcadLayout(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayout


class AcadLayouts(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayouts


class AcadLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLeader


class AcadLine(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLine


class AcadLineType(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLineType


class AcadLineTypes(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLineTypes


class AcadLoftedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLoftedSurface


class AcadMInsertBlock(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMInsertBlock


class AcadMLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeader


class AcadMLeaderLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeaderLeader


class AcadMLeaderStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeaderStyle


class AcadMLine(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLine


class AcadMText(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMText


class AcadMaterial(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMaterial


class AcadMaterials(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMaterials


class AcadMenuBar(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuBar


class AcadMenuGroup(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuGroup


class AcadMenuGroups(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuGroups


class AcadModelSpace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadModelSpace


class AcadNurbSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadNurbSurface


class AcadObject(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadObject


class AcadOle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadOle


class AcadPViewport(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPViewport


class AcadPaperSpace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPaperSpace


class AcadPdfUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay


class AcadPlaneSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlaneSurface


class AcadPlot(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlot


class AcadPlotConfiguration(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlotConfiguration


class AcadPlotConfigurations(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlotConfigurations


class AcadPoint(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPoint


class AcadPointCloud(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPointCloud


class AcadPointCloudEx(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPointCloudEx2


class AcadPolyfaceMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolyfaceMesh


class AcadPolygonMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolygonMesh


class AcadPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolyline


class AcadPopupMenu(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenu


class AcadPopupMenuItem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenuItem


class AcadPopupMenus(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenus


class AcadPreferences(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferences


class AcadPreferencesDisplay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesDisplay


class AcadPreferencesDrafting(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesDrafting


class AcadPreferencesFiles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesFiles


class AcadPreferencesOpenSave(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesOpenSave


class AcadPreferencesOutput(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesOutput


class AcadPreferencesProfiles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesProfiles


class AcadPreferencesSelection(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesSelection


class AcadPreferencesSystem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesSystem


class AcadPreferencesUser(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesUser


class AcadRasterImage(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRasterImage


class AcadRay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRay


class AcadRegion(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegion


class AcadRegisteredApplication(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegisteredApplication


class AcadRegisteredApplications(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegisteredApplications


class AcadRevolvedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRevolvedSurface


class AcadSection(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSection2


class AcadSectionManager(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionManager


class AcadSectionSettings(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionSettings


class AcadSectionTypeSettings(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionTypeSettings2


class AcadSecurityParams(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSecurityParams


class AcadSelectionSet(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSelectionSet


class AcadSelectionSets(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSelectionSets


class AcadShape(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadShape


class AcadSolid(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSolid


class AcadSortentsTable(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSortentsTable


class AcadSpline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSpline


class AcadState(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadState


class AcadSubDMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMesh


class AcadSubDMeshEdge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshEdge


class AcadSubDMeshFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshFace


class AcadSubDMeshVertex(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshVertex


class AcadSubEntSolidEdge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidEdge


class AcadSubEntSolidFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidFace


class AcadSubEntSolidNode(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidNode


class AcadSubEntSolidVertex(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidVertex


class AcadSubEntity(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntity


class AcadSummaryInfo(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSummaryInfo


class AcadSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSurface


class AcadSweptSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSweptSurface


class AcadTable(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTable


class AcadTableStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTableStyle


class AcadText(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadText


class AcadTextStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTextStyle


class AcadTextStyles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTextStyles


class AcadTolerance(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTolerance


class AcadToolbar(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbar


class AcadToolbarItem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbarItem


class AcadToolbars(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbars


class AcadTrace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTrace


class AcadUCS(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUCS


class AcadUCSs(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUCSs


class AcadUtility(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUtility


class AcadView(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadView


class AcadViewport(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViewport


class AcadViewports(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViewports


class AcadViews(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViews


class AcadWipeout(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadWipeout


class AcadXRecord(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadXRecord


class AcadXline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadXline

